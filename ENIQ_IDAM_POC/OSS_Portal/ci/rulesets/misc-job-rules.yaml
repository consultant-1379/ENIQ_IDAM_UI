modelVersion: 2.0
import:
  common: ../../ruleset2.0.yaml
  robustness: deploy-upgrade-robustness.yaml

env:
  - JIRA_TOKEN (default=notset)
  - IMAGE_TAG (default=notset)
  - JENKINS_USERNAME (default=notset)
  - JENKINS_PASSWORD (default=notset)

properties:
  - jira-portfolio-team: 3492 # EEA Smart Insights Team code
  - credential-id-mimer-prod: mimer-token-production
  - jenkins-server: https://seliius27190.seli.gic.ericsson.se:8443
  - demo-namespace-label: demo
  - helm-chart-name-gas-mock: demo-ui-service

rules:
  # DesignCheck.jenkinsfile

  helm-warning-check:
    - task: helm-chart-check
      docker-image: common.adp-helm-dr-check
      # .Capabilities.APIVersions don't work correctly in this case for DR-1124-100, so we need to set the capabilities manually
      # with a property.
      # https://gerrit.ericsson.se/plugins/gitiles/adp-cicd/adp-helm-dr-checker#DR_1124_100_A
      cmd: helm-dr-check
        --helm-chart charts/${common.helm-chart-name}
        --output .bob/check-charts/
        --helm-v3
        --fail-on-warnings true
        --values-file ci/config/helm-dr-values.yaml
        -DhelmDesignRule.template.Capabilities.APIVersions=networking.k8s.io/v1

  helm-warning-image-check:
    - task: image-dr-check
      docker-image: common.adp-image-dr-check
      docker-flags:
        - "-v /var/run/docker.sock:/var/run/docker.sock"
        - '-u $(id -u):$(id -g) $(for x in $(id -G); do printf " --group-add %s" "$x"; done)'
        - "--env REGISTRY_USER=${env.common.DOCKER_USERNAME}"
        - "--env REGISTRY_TOKEN=${env.common.DOCKER_PASSWORD}"
      cmd: image-dr-check ${common.helm-image-dr-vm-args}
        --image ${var.common.image-full-name-internal}:${var.common.version}
        --remote
        --fail-on-warnings true
        --output .bob/check-image/

  create-design-jira-card:
    - task: helm-design-fail-card
      docker-image: common.ci-toolbox
      cmd: jira_ticket_generation.sh
        -token='${env.JIRA_TOKEN}'
        -m='Create Issue'
        -t='Bug'
        -p='ADPRS'
        -a=-1
        -s='New design pattern warning(s) in the ${common.image-title} microservice'
        -d='${env.common.BUILD_URL}'
        -pt=${jira-portfolio-team}
        -r='Major'
        -cmp='${common.jira-component-name}'

  # UpdateBaseOS.jenkinsfile

  create-new-cbo-patch:
    - task: create-modification
      docker-image: common.adp-release-auto
      cmd:
        - "sed -i 's/^  - image-base-os-version: .*/  - image-base-os-version: ${env.IMAGE_TAG}/' ruleset2.0.yaml"
        - config-handler update
          --set-cbo-version ${env.IMAGE_TAG}
          --product-structure plms/product_structure.yaml
          --debug
    - task: create-new-cbo-patch
      docker-image: common.adp-release-auto
      docker-flags:
        - "--env GERRIT_USERNAME"
        - "--env GERRIT_PASSWORD"
      cmd: >
        gerrit create-patch
        --file ruleset2.0.yaml plms/product_structure.yaml
        --message "Update Common Base OS to ${env.IMAGE_TAG}"
        --message "Requirement: no-jira"
        --git-repo-local .
        --wait-label "Verified"="+1"
        --timeout 3600
        --debug
        --submit

  # UpdateMuninToken.jenkinsfile

  jenkins-munin-secret-update:
    - task: munin-production-secret-update
      docker-image: common.adp-release-auto
      cmd: munin-jenkins update-secret-text
        -t ${env.common.MUNIN_TOKEN}
        --jenkins-credential-id ${credential-id-mimer-prod}
        --jenkins-username ${env.JENKINS_USERNAME}
        --jenkins-password ${env.JENKINS_PASSWORD}
        --server ${jenkins-server}/

  # DemoDeploy.jenkinsfile

  deploy-demo:
    - rule: robustness.download-gas-drop-chart # this pulls either latest drop of GAS or the version given in GAS_VERSION pipeline parameter
    - rule: common.set-chart-values-demo # this sets the fixed demo loadbalancer IP before installing ICCR
    - rule: delete-previous-demo-namespaces
    - rule: robustness.services-ip-pool-test
    - rule: robustness.install-ci-and-mocks
    - rule: label-demo-namespace
    - rule: common.install-gas
    - rule: enable-mocks

  delete-previous-demo-namespaces:
    - task: delete-namespaces-with-demo-label
      docker-image: common.k8-test
      docker-flags:
        - "--network=host"
        - "--env KUBECONFIG=${env.common.KUBECONFIG}"
        - "--volume ${env.common.KUBECONFIG}:${env.common.KUBECONFIG}:ro"
        - "--volume ${env.common.PWD}:${env.common.PWD}"
      cmd:
        - kubectl delete ns -l ${demo-namespace-label}=${env.common.NAMESPACE_LABEL_VALUE}

  enable-mocks:
    - task: upgrade
      docker-image: common.k8-test
      docker-flags:
        - "--network=host"
        - "--env KUBECONFIG=${env.common.KUBECONFIG}"
        - "--volume ${env.common.KUBECONFIG}:${env.common.KUBECONFIG}:ro"
        - "--volume ${env.common.PWD}:${env.common.PWD}"
      cmd: "helm upgrade adp-gas-dependencies .bob/ci-0.0.0.tgz \
        --namespace ${var.common.k8s-namespace} \
        --wait \
        --timeout 10m0s \
        --reuse-values \
        --values ${common.mocks-enable-demo-yaml} \
        --set ${helm-chart-name-gas-mock}-eea.ingress.hostname=${var.common.ingress-hostname} \
        --set ${helm-chart-name-gas-mock}-ecm.uid=${env.common.DOCKER_USERNAME} \
        --set ${helm-chart-name-gas-mock}-eea.uid=${env.common.DOCKER_USERNAME} \
        --set ${helm-chart-name-gas-mock}-enm.uid=${env.common.DOCKER_USERNAME} \
        --set ${helm-chart-name-gas-mock}-ecm.ingress.iccrIP=${var.common.functions.mock-service-iccr-value} \
        --set ${helm-chart-name-gas-mock}-eea.ingress.iccrIP=${var.common.functions.mock-service-iccr-value} \
        --set ${helm-chart-name-gas-mock}-enm.ingress.iccrIP=${var.common.functions.mock-service-iccr-value} \
        --set ${common.helm-chart-name-ha-mock}-eea.uid=${env.common.DOCKER_USERNAME} \
        --set ${common.helm-chart-name-ha-mock}-eea.ingress.iccrIP=${var.common.functions.mock-service-iccr-value} \
        --set ${common.functions.helm-chart-name-ha}.uid=${env.common.DOCKER_USERNAME} \
        --set ${common.functions.helm-chart-name-ha}.ingress.iccrIP=${var.common.functions.mock-service-iccr-value} \
        --set ${common.functions.helm-chart-name-ha}.ingress.hostname=${var.common.ha-ingress-hostname} \
        --set ${common.helm-chart-name-ha-mock}-eea-real-doc.uid=${env.common.DOCKER_USERNAME} \
        --set ${common.helm-chart-name-ha-mock}-eea-real-doc.ingress.iccrIP=${var.common.functions.mock-service-iccr-value} \
        --set ${common.helm-chart-name-ha-mock}-ecm.uid=${env.common.DOCKER_USERNAME} \
        --set ${common.helm-chart-name-ha-mock}-ecm.ingress.iccrIP=${var.common.functions.mock-service-iccr-value}"

  label-demo-namespace:
    - task: set-demo-label-on-namespace
      docker-image: common.k8-test
      docker-flags:
        - "--network=host"
        - "--env KUBECONFIG=${env.common.KUBECONFIG}"
        - "--volume ${env.common.KUBECONFIG}:${env.common.KUBECONFIG}:ro"
        - "--volume ${env.common.PWD}:${env.common.PWD}"
      cmd:
        - kubectl label ns ${var.common.k8s-namespace} ${demo-namespace-label}=${env.common.NAMESPACE_LABEL_VALUE}

  echo-demo-ingress-url:
    - task: echo-demo-ingress-url
      cmd: "echo External Ingress URL: https://${var.common.ingress-hostname}/${var.common.ingress-iccr-path}/ui/#launcher"

  # ciChartCheck.jenkinsfile

  create-cichart-jira-card:
    - task: helm-cichart-fail-card
      docker-image: common.ci-toolbox
      cmd: jira_ticket_generation.sh
        -token='${env.JIRA_TOKEN}'
        -m='Create Issue'
        -t='Bug'
        -p='ADPRS'
        -a=-1
        -s='New ciChart deployment issue in the ${common.image-title} microservice'
        -d='${env.common.BUILD_URL}'
        -pt=${jira-portfolio-team}
        -r='Major'
        -cmp='${common.jira-component-name}'
