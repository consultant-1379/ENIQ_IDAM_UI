pipeline {
  agent {
    node('presentation')
  }
  options {
    ansiColor('xterm')
    timeout(time: 1, unit: 'HOURS')
    buildDiscarder(logRotator(numToKeepStr: '30', artifactNumToKeepStr: '30'))
  }
  parameters {
    string(name: 'GAS_VERSION', description: 'The drop (-) or released (+) version of the GAS Helm chart to deploy. If empty, the latest drop is deployed.')
    string(name: 'DEMO_INGRESS_PATH', description: 'The path where GAS will be available, set e.g. "adp-ui-service". If empty, the current BUILD_TAG is used.')
    string(name: 'DEMO_NAMESPACE', description: 'The name of the demo namespace. Required to be filled in case of + version demo. If empty, the generated namespace is used.')
    string(name: 'NAMESPACE_LABEL_VALUE', defaultValue: 'drop', description: 'The label value of the demo namespace. "drop" by default. Can be "release" or any other word.')
  }
  stages {
    stage('Clean') {
      steps {
        sh 'bob clean'
      }
    }
    stage('Init') {
      steps {
        lock(resource: null, label: 'presentation-ci', quantity: 1, variable: 'system') {
          withCredentials([
          usernamePassword(credentialsId: 'arm-functional-user', usernameVariable: 'HELM_USER', passwordVariable: 'API_TOKEN'),
          file(credentialsId: env.system, variable: 'KUBECONFIG')
          ]) {
            ansiColor('xterm') {
              sh 'bob init-demo'
            }
          }
        }
      }
    }
    stage('Deploy GAS and CI chart') {
      steps {
        lock(resource: null, label: 'presentation-ci', quantity: 1, variable: 'system') {
          withCredentials([
            usernamePassword(credentialsId: 'arm-functional-user', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD'),
            usernamePassword(credentialsId: 'arm-functional-user', usernameVariable: 'HELM_USER', passwordVariable: 'API_TOKEN'),
            string(credentialsId: 'arm-adpgs-eceaart-api-token', variable: 'API_TOKEN_ADP'),
            file(credentialsId: env.system, variable: 'KUBECONFIG')
          ]) {
            ansiColor('xterm') {
              sh 'bob -r ci/rulesets/misc-job-rules.yaml deploy-demo'
            }
          }
        }
      }
    }
    stage('Print Ingress URL') {
      steps {
        sh 'bob -r ci/rulesets/misc-job-rules.yaml echo-demo-ingress-url'
      }
    }
  }
  post {
    cleanup {
      sh "docker ps -a -q --filter label=$BUILD_TAG | xargs --no-run-if-empty  docker stop"
      sh "docker ps -a -q --filter label=$BUILD_TAG | xargs --no-run-if-empty  docker rm"
    }
    failure {
      mail to: 'f98b007c.ericsson.onmicrosoft.com@emea.teams.ms',
      subject: "Failed Pipeline: ${currentBuild.fullDisplayName}",
      body: "Failure on ${env.BUILD_URL}"
    }
  }
}
