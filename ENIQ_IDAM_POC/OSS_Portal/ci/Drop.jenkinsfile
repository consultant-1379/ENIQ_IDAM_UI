pipeline {
  agent {
    node('presentation')
  }
  options {
    ansiColor('xterm')
    timeout(time: 1, unit: 'HOURS')
    buildDiscarder(logRotator(numToKeepStr: '30', artifactNumToKeepStr: '30'))
  }
  environment {
    // This sonar instance is a temporary solution
    SONAR_LOGIN_TOKEN = 'e4ceb3805b764d8cdb97df28d69ac60b7c48d6c0'
  }
  stages {
    stage('Clean') {
      steps {
        sh 'bob clean'
      }
    }
    stage('Init stage') {
      failFast true
      parallel {
        stage('Check Bob rules') {
          when {
            expression {
              return  sh(
                script: 'bob -q ruleset-validation-helper:validate-rules',
                returnStdout: true
              ).trim() != '0'
            }
          }
          steps {
            sh 'bob --dryrun $(bob -lq)'
          }
        }
        stage('Save Build Causes') {
          steps {
            writeFile file: '.bob/var.build-causes', text: "${currentBuild.getBuildCauses()}"
          }
        }
        stage('Set Bob variables') {
          steps {
            withCredentials([
                  usernamePassword(credentialsId: 'arm-functional-user', usernameVariable: 'HELM_USER', passwordVariable: 'API_TOKEN')
                ]) {
                  sh 'bob init-drop'
                  archiveArtifacts 'artifact.properties'
                }
          }
        }
        stage('Install npm dependencies') {
          steps {
            sh 'bob npm-install'
          }
        }
      }
    }
    stage('Generate help content') {
      steps {
        ansiColor('xterm') {
          sh 'bob generate-and-copy-help-content'
        }
      }
    }
    stage('Main stage') {
      failFast true
      parallel {
        stage('Lint') {
          steps {
            sh 'bob lint'
          }
        }
        stage('FOSS handling') {
          stages {
            stage('Lint FOSS') {
              steps {
                sh 'bob munin:validate-product-structure foss-helper:check-dependencies-files'
              }
            }
            stage('Analyze FOSS') {
              steps {
                withCredentials([string(credentialsId: 'fossa-token', variable: 'FOSSA_API_KEY')]) {
                  sh 'bob foss-analyze'
                }
              }
            }
            stage('Check Prim numbers') {
              when {
                expression {
                  return  sh(
                    script: 'bob -q foss-helper:check-dependencies-file-is-changed',
                    returnStdout: true
                  ).trim() != '0'
                }
              }
              steps {
                withCredentials([usernamePassword(credentialsId: 'scasuser-token', variable: 'SCAS_TOKEN')]) {
                  //Switch off bazaar scan until bazaar api issues are not solved
                  //sh "bob foss-helper:dependency-update-with-scas"
                  //Until that we are check only the prim numbers
                  sh 'bob foss-helper:check-all-prim-number-filled'
                }
              }
            }
            stage('Merge manual & auto dependencies') {
              steps {
                sh 'bob foss-helper:merge-dependencies'
              }
            }
            stage('Check Munin sync status') {
              steps {
                withCredentials([string(credentialsId: 'mimer-token-production', variable: 'MUNIN_TOKEN')]) {
                  sh 'bob foss-helper:check-munin-sync-status'
                }
              }
            }
            stage('Pre-register to EVMS') {
              steps {
                withCredentials([string(credentialsId: 'evms-product-instance-token', variable: 'EVMS_API_KEY')]) {
                  sh 'bob evms:pre-registration'
                }
              }
            }
            stage('Generate License Agreements') {
              steps {
                sh 'bob license-agreement'
              }
            }
          }
        }
        stage('Validation') {
          stages {
            stage('Unit tests') {
              steps {
                ansiColor('css') {
                  sh 'bob test-ui test-ws'
                }
              }
            }
            stage('Sonar scanner') {
              steps {
                //withCredentials([string(credentialsId: 'sonarqube.lmera.ericsson.se-EEASONAR-token', variable: 'SONAR_LOGIN_TOKEN')]) {
                  ansiColor('xterm') {
                    sh 'bob sonar-scanner'
                    sh 'bob sonar-gate-check'
                  }
                //}
              }
            }
            stage('Selenium tests') {
              steps {
                ansiColor('css') {
                  sh 'bob run-selenium-tests-frontend'
                }
              }
            }
          }
        }
        stage('K8S Build & Test') {
          stages {
            stage('Docker image') {
              steps {
                sh 'bob image'
              }
            }
            stage('Helm package') {
              steps {
                withCredentials([
                  usernamePassword(credentialsId: 'arm-functional-user', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD'),
                  usernamePassword(credentialsId: 'arm-functional-user', usernameVariable: 'HELM_USER', passwordVariable: 'API_TOKEN')
                ]) {
                  ansiColor('xterm') {
                    sh 'bob package'
                  }
                }
              }
            }
            stage('K8S Test') {
              steps {
                lock(resource: null, label: 'presentation-ci', quantity: 1, variable: 'system') {
                  withCredentials([
                    usernamePassword(credentialsId: 'arm-functional-user', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD'),
                    usernamePassword(credentialsId: 'arm-functional-user', usernameVariable: 'HELM_USER', passwordVariable: 'API_TOKEN'),
                    string(credentialsId: 'arm-adpgs-eceaart-api-token', variable: 'API_TOKEN_ADP'),
                    file(credentialsId: env.system, variable: 'KUBECONFIG')
                  ]) {
                    ansiColor('css') {
                      sh 'bob k8s-test-drop -r ci/rulesets/deploy-upgrade-robustness.yaml'
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    stage('Build frontend source code') {
      steps {
        ansiColor('xterm') {
          sh 'bob build-ui'
          sh 'bob create-ui-artifact'
        }
      }
    }
    stage('Generate documentations') {
      steps {
        withCredentials([
          usernamePassword(credentialsId: 'arm-functional-user', usernameVariable: 'HELM_USER', passwordVariable: 'API_TOKEN'),
          usernamePassword(credentialsId: 'eridoc-username-password', usernameVariable: 'ERIDOC_USERNAME', passwordVariable: 'ERIDOC_PASSWORD'),
          usernamePassword(credentialsId: 'git-functional-http-user', usernameVariable: 'GERRIT_USERNAME', passwordVariable: 'GERRIT_PASSWORD'),
          usernamePassword(credentialsId: 'eceaconfl', usernameVariable: 'JIRA_USERNAME', passwordVariable: 'JIRA_PASSWORD')
        ]) {
          ansiColor('xterm') {
            sh 'bob generate-docs foss-helper:generate-dependencies-report munin:generate-documents-revision-list generate-pri'
          }
        }
      }
    }
    stage('Upload Eridoc files') {
      when { expression { env.GERRIT_EVENT_TYPE == 'change-merged' } }
      steps {
        withCredentials([usernamePassword(credentialsId: 'eridoc-username-password', usernameVariable: 'ERIDOC_USERNAME', passwordVariable: 'ERIDOC_PASSWORD')]) {
          sh 'bob eridoc-upload'
        }
      }
    }
    stage('Update Munin') {
      when { expression { env.GERRIT_EVENT_TYPE == 'change-merged' } }
      steps {
        withCredentials([string(credentialsId: 'mimer-token-production', variable: 'MUNIN_TOKEN')]) {
          sh 'bob munin:skip-blocked-3pps munin:create-version'
        }
      }
    }
    stage('Publish artifacts') {
      when { expression { env.GERRIT_EVENT_TYPE == 'change-merged' } }
      steps {
        withCredentials([
            usernamePassword(credentialsId: 'arm-eceaart-user-pass', usernameVariable: 'HELM_USER', passwordVariable: 'API_TOKEN'),
            usernamePassword(credentialsId: 'git-functional-http-user', usernameVariable: 'GERRIT_USERNAME', passwordVariable: 'GERRIT_PASSWORD')
        ]) {
          ansiColor('xterm') {
            sh 'bob publish'
            sh 'bob upload-ui-artifact'
          }
        }
      }
    }
  }
  post {
    always {
      archiveArtifacts 'docs/release/metadata/license.agreement.json'
      archiveArtifacts artifacts: '.bob/munin-sync-status-files/*.json', allowEmptyArchive: true
      publishHTML(target: [
        allowMissing: false,
        alwaysLinkToLastBuild: false,
        keepAll: true,
        reportDir: '.bob/check-charts/',
        reportFiles: 'design-rule-check-report.html',
        reportName: 'Helm Design Rule Check'
      ])
      publishHTML(target: [
        allowMissing: false,
        alwaysLinkToLastBuild: false,
        keepAll: true,
        reportDir: '.bob/check-image/',
        reportFiles: 'image-design-rule-check-report.html',
        reportName: 'Helm Design Rule Image Check'
      ])
      publishHTML(target: [
        allowMissing: false,
        alwaysLinkToLastBuild: false,
        keepAll: true,
        reportDir: 'backend/test/reports/mochawesome/',
        reportFiles: 'mochawesome.html',
        reportName: 'WS Endpoint Test Report'
      ])
      publishHTML(target: [
        allowMissing: false,
        alwaysLinkToLastBuild: false,
        keepAll: true,
        reportDir: 'frontend/test_js/allure-report/',
        reportFiles: 'index.html',
        reportName: 'Frontend Selenium Test Report'
      ])
      publishHTML(target: [
        allowMissing: false,
        alwaysLinkToLastBuild: false,
        keepAll: true,
        reportDir: 'integration-tests/test/backend/reports/mochawesome/',
        reportFiles: 'mochawesome.html',
        reportName: 'WS Endpoint Integration Report'
      ])
      publishHTML(target: [
        allowMissing: false,
        alwaysLinkToLastBuild: false,
        keepAll: true,
        reportDir: 'integration-tests/test/ui/allure-report/',
        reportFiles: 'index.html',
        reportName: 'UI Selenium Integration Report'
      ])
      publishHTML(target: [
        allowMissing: false,
        alwaysLinkToLastBuild: false,
        keepAll: true,
        reportDir: 'frontend/coverage/lcov-report',
        reportFiles: 'index.html',
        reportName: 'Frontend Component Test Coverage Report'
      ])
      publishHTML(target: [
        allowMissing: false,
        alwaysLinkToLastBuild: false,
        keepAll: true,
        reportDir: 'frontend/testReport/Chromium',
        reportFiles: 'mochawesome.html',
        reportName: 'Frontend Chromium Unit Test Report'
      ])
      publishHTML(target: [
        allowMissing: false,
        alwaysLinkToLastBuild: false,
        keepAll: true,
        reportDir: 'frontend/testReport/Firefox',
        reportFiles: 'mochawesome.html',
        reportName: 'Frontend Firefox Unit Test Report'
      ])
      publishHTML(target: [
        allowMissing: false,
        alwaysLinkToLastBuild: false,
        keepAll: true,
        reportDir: '.bob/reports',
        reportFiles: 'dependencies-report.html',
        reportName: 'Dependencies report'
      ])
    }
    cleanup {
      sh "docker ps -a -q --filter label=$BUILD_TAG | xargs --no-run-if-empty  docker stop"
      sh "docker ps -a -q --filter label=$BUILD_TAG | xargs --no-run-if-empty  docker rm"
    }
    failure {
      mail to: 'f98b007c.ericsson.onmicrosoft.com@emea.teams.ms',
      subject: "Failed Pipeline: ${currentBuild.fullDisplayName}",
      body: "Failure on ${env.BUILD_URL}"
    }
  }
}
