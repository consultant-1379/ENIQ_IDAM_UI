modelVersion: 2.0
import:
  functions: ruleset-functions.yaml

docker-images:
  - nodejs-builder: armdocker.rnd.ericsson.se/proj-adp-cicd-drop/adp-nodejs-lts-builder-image:18.12.1-2
  - adp-release-auto: armdocker.rnd.ericsson.se/proj-adp-cicd-drop/bob-adp-release-auto:latest
  - adp-helm-dr-check: armdocker.rnd.ericsson.se/proj-adp-cicd-drop/adp-helm-dr-checker:latest
  - adp-image-dr-check: armdocker.rnd.ericsson.se/proj-adp-cicd-drop/adp-image-dr-check:latest
  - k8-test: armdocker.rnd.ericsson.se/proj-adp-cicd-drop/bob-py3kubehelmbuilder:latest
  - docbuilder: armdocker.rnd.ericsson.se/proj-adp-cicd-drop/bob-docbuilder:latest
  - ci-toolbox: armdocker.rnd.ericsson.se/proj-eea-drop/ci-toolbox:0.0.0-683
  - hadolint-scan: armdocker.rnd.ericsson.se/proj-adp-cicd-drop/hadolint-scan:latest

var:
  - version
  - mock-version
  - image-full-name-internal
  - rstate
  - commithash
  - image-repo-path-internal
  - helm-chart-repo-internal
  - helm-chart-file-name
  - test-base-url
  - branch
  - ingress-hostname
  - ha-ingress-hostname
  - ingress-iccr-ip
  - ingress-iccr-path
  - ingress-protocol
  - semver
  - kubernetes-version
  - helm-version
  - docker-image-size
  - install-start-time
  - install-finish-time
  - run-type
  - pri_params
  - sha256-helm
  - sha256-image
  - fossa-id
  - additional-chart-values
  - additional-chart-values-file
  - additional-dependencies-chart-values
  - additional-dependencies-chart-values-ha
  - additional-dependencies-chart-values-file
  - doc-version
  - k8s-namespace
  - demo-loadbalancer-ip
  - all-document-placeholder-map
  - free-loadbalancer-ip
  - build-causes

properties:
  - docker-image-name: ${functions.docker-image-name}
  - helm-chart-name: ${functions.helm-chart-name}
  - product-number: CXU 101 0218
  - image-title: "ADP GUI Aggregator Service"
  - microservice-name: "Lightweight GUI Aggregator service"
  - jira-component-name: "GAS Light"
  - image-registry: ${functions.image-registry}
  - image-dev-repo-path: proj-eea-dev
  - image-ci-repo-path: proj-eea-ci-internal
  - image-drop-repo-path: proj-eea-drop
  - image-full-name: ${image-registry}/${image-drop-repo-path}/${docker-image-name}
  - image-internal-name: ${image-registry}/${image-ci-repo-path}/${docker-image-name}
  - image-base-os-version: "5.10.0-18"
  - helm-chart-repo-server: ${functions.helm-chart-repo-server}
  - helm-chart-dev-repo-path: proj-eea-dev-helm
  - helm-chart-ci-repo-path: proj-eea-ci-internal-helm
  - helm-chart-drop-repo-path: proj-eea-drop-helm
  - helm-chart-drop-repo: ${helm-chart-repo-server}/${helm-chart-drop-repo-path}
  - test-dummy-chart-name: domain-ui-generic
  - test-dummy-chart-name-ha: domain-ui-generic-oss-helper
  - helm-chart-name-ha-mock: help-center-mock
  - test-dummy-chart-file-name: ${test-dummy-chart-name}-${var.version}.tgz
  - standalone-ui-artifact-name: eric-adp-gas-common-portal
  - standalone-ui-artifact-file-name: ${standalone-ui-artifact-name}-${var.version}
  - standalone-ui-artifact-repo-path: proj-eea4-other-release-local
  - doc-arm-dev-path: proj-cea-external-local/eric-adp-gui-aggregator-service # TODO: create docs repo in ARM for EEA and ADP. eg.: proj-eea-marketplace-docs-dev-generic-local/eric-adp-gui-aggregator-service
  - system-test-from-version: 1.0.0-0 #TODO: find out this version automatically
  - image-pullsecret: arm-pullsecret
  - sonar-report-file: report-task.txt
  - repositories-yaml-path: .bob/repositories.yaml
  #TODO: get it from environment variable
  - adp-marketplace-token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJtc2lkIjoiOWVjZWI2MjI0MjU4OWJlY2NiYjEwOTA1MjI1NTNkNmQiLCJpbnZhbF9zZWNyZXQiOiI0djljYm9lNHp1In0.6ECN2HtUlVPx_LQIaZkNoJUHp9r8aN-b88aP7wvrpGI
  - marketplace-stylesheet: /usr/share/marketplace/resources/pdf_style.css
  - sonar-host-url: ${env.SONAR_HOST}
  - fossa-team-name: BDGS-EEA-RelHandl
  - fossa-project-name: fossa-eric-adp-gui-aggregator-service
  - fossa-server-endpoint: https://scasfossa.internal.ericsson.com
  - fossa-report-name: .bob/fossa-report.json
  - auto-dependency-file-name: plms/dependencies_foss_auto.yaml
  - manual-dependency-file-name: plms/dependencies_manual.yaml
  - dependency-full-file-name: .bob/dependency_merged_full.yaml
  - scas-product-id: 5398
  - scas-version-id: 4711
  - report-directory: .bob/reports
  - dependencies-report-html: ${report-directory}/dependencies-report.html
  - product-structure: plms/product_structure.yaml
  - generated-document-list: .bob/documents.yaml
  - generated-document-list-for-pri: .bob/documents-pri.json
  - munin-sync-status-directory: .bob/munin-sync-status-files
  - jenkins-files-path: ci
  - metadata-docs-folder: docs/release/metadata
  - pm-metric-fragment-file-name: ${helm-chart-name}_pm_metrics.json
  - service-ports-fragment-file-name: ${helm-chart-name}_serviceports.json
  - license-agreement-file-name: license.agreement.json
  - license-agreement-path: ${metadata-docs-folder}/${license-agreement-file-name}
  - manual-license-agreement-file-name: plms/manual.license.agreement.json
  - gerrit-url: https://gerrit.ericsson.se/a/plugins/gitiles/EEA/adp-ui-service
  - git-clone-url: https://gerrit.ericsson.se/EEA/adp-ui-service.git
  - pri-eridoc-folder-id: 0b004cffc6b574c5
  - pri-manual-json: plms/pri_manual_input.json
  - pri-config-extra: plms/config_adpprg.json
  - helm-image-dr-vm-args: " -DhelmDesignRule.config.drHc001=skip -DimageDesignRule.config.DR-D470203-041=skip -DimageDesignRule.config.DR-D470203-050=skip -DimageDesignRule.config.DrD470203050a=skip -DhelmDesignRule.config.DR-D1121-064=skip"
  - pri-doc-number: "109 21-APR 201 088"
  - abstract-product-number: APR201088
  - report-name: test-report
  - report-generation-output: build/doc-archive/test-report/
  - demo-drop-ip: 10.196.121.161
  - demo-release-ip: 10.196.121.169

  # Values.yaml files
  - ci-chart-config-yaml: ci/config/ci-chart.yaml
  - mocks-enable-yaml: ci/config/mocks-enable.yaml
  - pcr-chart-values: ci/config/pcr-chart-values.yaml
  - drop-chart-values: ci/config/drop-chart-values.yaml
  - demo-chart-values: ci/config/demo-chart-values.yaml
  - demo-ci-chart-values: ci/config/demo-ci-chart-values.yaml
  - mocks-enable-demo-yaml: ci/config/mocks-enable-demo.yaml
  - characteristics-chart-values: ci/config/characteristics-chart-values.yaml

env:
  - PWD (default=notset)
  - HELM_USER  (default=notset) #Have to set before run
  - API_TOKEN  (default=notset) #Have to set before run
  - API_TOKEN_ADP  (default=notset) #Have to set before run
  - KUBECONFIG (default=notset) #Have to set before run
  - USER (default=notset)
  - BUILD_TAG (default=proj-eea-app-local)
  - BUILD_URL (default=notset)
  - DOCKER_USERNAME (default=test)
  - DOCKER_PASSWORD (default=test)
  - DEFAULT_DOCKER_FLAGS (default=--init --rm --user $(id -u):$(id -g) --label $(echo ${BUILD_TAG:-proj-eea-app-local}))
  - TEST_BASE_URL (default=host.docker.internal:14444)
  - SONAR_HOST (default=https://seliics01656e03.seli.gic.ericsson.se)
  - SONAR_LOGIN_TOKEN (default=notset) #Have to set before run
  - FOSSA_API_KEY (default=notset) #Have to set before run
  - SCAS_TOKEN (default=notset) #Have to set before run
  - BAZAAR_USER (default=notset) #Have to set before run
  - BAZAAR_TOKEN (default=notset) #Have to set before run
  - DEMO_INGRESS_PATH (default=${env.BUILD_TAG})
  - DEMO_NAMESPACE (default=notset)
  - NAMESPACE_LABEL_VALUE (default=notset)
  - EVMS_API_KEY (default=notset)
  - MUNIN_TOKEN (default=notset)
  - ERIDOC_USERNAME (default=notset)
  - ERIDOC_PASSWORD (default=notset)
  - DRY_RUN (default=false)

rules:
  local-pipeline:
    - rule: clean
    - rule: init-dev
    - rule: npm-install
    - rule: lint
    - rule: generate-docs
    - rule: generate-and-copy-help-content
    - rule: build-ui
    - rule: create-ui-artifact
    - rule: run-selenium-tests-frontend
    - rule: test-ui
    - rule: test-ws
    - rule: sonar-scanner
    - rule: image
    - rule: eridoc-dryrun
    - rule: eridoc-upload
    - rule: eridoc-approve

  # **********
  #
  # INIT TASKS
  #
  # **********

  clean:
    - task: rm
      cmd:
        - rm -rf .bob/
        - rm -rf build/

  init-dev:
    - rule: functions.init
      properties:
        - is-release: "false"
        - image-repo-path: ${image-dev-repo-path}
        - helm-chart-repo-path: ${helm-chart-dev-repo-path}
        - run-type: "dev"

  init-precodereview:
    - rule: functions.init
      properties:
        - is-release: "false"
        - image-repo-path: ${image-ci-repo-path}
        - helm-chart-repo-path: ${helm-chart-ci-repo-path}
        - run-type: "precodereview"

  init-drop:
    - rule: functions.init
      properties:
        - is-release: "true"
        - image-repo-path: ${image-ci-repo-path}
        - helm-chart-repo-path: ${helm-chart-ci-repo-path}
        - run-type: "drop"
        - pri-param: "--upload"
    - task: adp-artifacts-properties
      docker-image: adp-release-auto
      cmd: generate-adp-artifacts
        --chart-name ${helm-chart-name}
        --chart-version ${var.version}
        --chart-repo ${helm-chart-drop-repo}
    - task: add-committer-name
      cmd: echo COMMITTER_NAME=$(git --no-pager show -s --format='%cn') >> artifact.properties
    - task: add-trigger-type
      cmd:
        bash -c '
        echo "${var.build-causes}" | grep "Triggered by Gerrit";
        if [[ $? == 0 ]]; then
          echo "TRIGGER_TYPE=auto" >> artifact.properties;
        else
          echo "TRIGGER_TYPE=manual" >> artifact.properties;fi'

  init-ci-test:
    - rule: functions.init
      properties:
        - is-release: "false"
        - image-repo-path: ${image-ci-repo-path}
        - helm-chart-repo-path: ${helm-chart-ci-repo-path}
        - run-type: "ci-test"

  init-demo:
    - rule: functions.init
      properties:
        - is-release: "false"
        - image-repo-path: ${image-ci-repo-path}
        - helm-chart-repo-path: ${helm-chart-ci-repo-path}
        - run-type: "demo"
    - task: set-k8s-namespace
      cmd: bash -c '
        if [ "${env.DEMO_NAMESPACE}" != "notset" ];
        then echo ${env.DEMO_NAMESPACE} > .bob/var.k8s-namespace;fi'
    - rule: functions.get-free-loadbalancer-ip
    - task: set-default-demo-loadbalancer-ip
      cmd: bash -c '
        if [ "${env.NAMESPACE_LABEL_VALUE}" = "drop" ];
          then echo -n ${demo-drop-ip} > .bob/var.demo-loadbalancer-ip;
        elif [ "${env.NAMESPACE_LABEL_VALUE}" = "release" ];
          then echo -n ${demo-release-ip} > .bob/var.demo-loadbalancer-ip;
        else
          echo -n ${var.free-loadbalancer-ip} > .bob/var.demo-loadbalancer-ip;fi'

  init-robustness:
    - rule: functions.init
      properties:
        - is-release: "false"
        - image-repo-path: ${image-ci-repo-path}
        - helm-chart-repo-path: ${helm-chart-ci-repo-path}
        - run-type: "robustness"

  npm-install:
    - task: npm
      docker-image: nodejs-builder
      docker-flags:
        - "--env NODE_ENV=" # Unset production flag
      cmd:
        - npm run ci:all

  docker-common:
    - task: docker-login
      cmd: echo ${env.DOCKER_PASSWORD} | docker login ${image-registry} -u ${env.DOCKER_USERNAME} --password-stdin

  # ********************
  #
  # BUILD, PACKAGE TASKS
  #
  # ********************

  build-ui:
    - task: build
      docker-image: nodejs-builder
      cmd:
        - npm run build:frontend

  create-ui-artifact:
    - task: create-ui-archived-artifact
      docker-image: adp-release-auto
      cmd:
        - >
          bash -c '
          cd frontend/build;
          zip -q -r ./${standalone-ui-artifact-file-name}.zip .;
          '

  upload-ui-artifact:
    - task: functions.release:upload-file # upload-ui-artifact-to-artifactory
      properties:
        - file-to-upload: frontend/build/${standalone-ui-artifact-file-name}.zip
        - repo-for-upload: ${helm-chart-repo-server}/${standalone-ui-artifact-repo-path}/com/ericsson/eea4/${standalone-ui-artifact-name}/${var.version}
        - upload-api-token: ${env.API_TOKEN}

  image:
    - task: docker-build-image
      cmd: docker build ${PWD#}
        --file docker/Dockerfile
        --tag ${var.image-full-name-internal}:${var.version}
        --build-arg BASE_OS_VERSION=${image-base-os-version}
        --label com.ericsson.product-number="${product-number}"
        --label com.ericsson.product-revision=${var.rstate}
        --label org.opencontainers.image.title="${image-title}"
        --label org.opencontainers.image.created=`date -u +%FT%TZ`
        --label org.opencontainers.image.revision=${var.commithash}
        --label org.opencontainers.image.vendor="Ericsson"
        --label org.opencontainers.image.version=${var.version}
    - task: save-image-size
      cmd: docker image inspect ${var.image-full-name-internal}:${var.version} -f '{{.Size}}' | numfmt --to=si > .bob/var.docker-image-size

  package-local:
    - task: image-push-internal
      cmd: docker push ${var.image-full-name-internal}:${var.version}
    - task: package-helm-internal
      docker-image: adp-release-auto
      docker-flags:
        - "--env HELM_USER"
        - "--env HELM_TOKEN=${env.API_TOKEN}"
        - "--env ENABLE_HELM_V3=true"
      cmd: helm-package
        --folder charts/${helm-chart-name}
        --workdir .bob
        --output .bob/${helm-chart-name}-internal
        --version ${var.version}
        --replace eric-product-info.yaml:VERSION=${var.version}
        --replace RSTATE=${var.rstate}
        --replace eric-product-info.yaml:REPO_PATH=${var.image-repo-path-internal}
        --replace eric-product-info.yaml:IMAGE_NAME=${docker-image-name}

  package:
    - rule: package-local
    - task: image-dr-check
      docker-image: adp-image-dr-check
      docker-flags:
        - "-v /var/run/docker.sock:/var/run/docker.sock"
        - '-u $(id -u):$(id -g) $(for x in $(id -G); do printf " --group-add %s" "$x"; done)'
        - "--env REGISTRY_USER=${env.DOCKER_USERNAME}"
        - "--env REGISTRY_TOKEN=${env.DOCKER_PASSWORD}"
      cmd: image-dr-check ${helm-image-dr-vm-args}
        --image ${var.image-full-name-internal}:${var.version}
        --remote
        --output .bob/check-image/
    - task: functions.release:upload-file # helm-upload-internal
      properties:
        - file-to-upload: .bob/${helm-chart-name}-internal/${var.helm-chart-file-name}
        - repo-for-upload: ${var.helm-chart-repo-internal}/${helm-chart-name}
        - upload-api-token: ${env.API_TOKEN}

  publish:
    - task: package-helm-public
      docker-image: adp-release-auto
      docker-flags:
        - "--env ENABLE_HELM_V3=true"
      cmd: helm-package
        --folder charts/${helm-chart-name}
        --workdir .bob
        --output build
        --version ${var.version}
        --replace eric-product-info.yaml:VERSION=${var.version}
        --replace RSTATE=${var.rstate}
        --replace eric-product-info.yaml:REPO_PATH=${image-drop-repo-path}
        --replace eric-product-info.yaml:IMAGE_NAME=${docker-image-name}
    - task: image-pull-internal
      cmd: docker pull ${var.image-full-name-internal}:${var.version}
    - task: image-tag-public
      cmd: docker tag ${var.image-full-name-internal}:${var.version} ${image-full-name}:${var.version}
    - task: image-push-public
      cmd: docker push ${image-full-name}:${var.version}
    - task: git-tag
      docker-image: adp-release-auto
      docker-flags:
        - --env GERRIT_USERNAME
        - --env GERRIT_PASSWORD
      cmd: version-handler create-git-tag
        --git-repo-url ${git-clone-url}
        --tag v${var.version}
        --commitid ${var.commithash}
        --message "Release ${var.version} from ${docker-image-name}"
    - task: functions.release:upload-file # helm-upload
      properties:
        - file-to-upload: build/${var.helm-chart-file-name}
        - repo-for-upload: ${helm-chart-drop-repo}/${helm-chart-name}
        - upload-api-token: ${env.API_TOKEN}
    - rule: publish-docs

  # **********
  #
  # SCAN TASKS
  #
  # **********

  lint:
    # TODO: documentation specific lint
    - task: commit-msg-lint
      docker-image: nodejs-builder
      cmd:
        - node git-hooks/commit-msg.d/smi-commit-msg.js "$(git log --format=%B -n1)"
    - task: validate-jenkins-files
      docker-image: ci-toolbox
      cmd: jenkinsfile_validator.sh --jenkinsfiles-path ${jenkins-files-path}
    - task: helm
      docker-image: adp-release-auto
      cmd: helm lint charts/${helm-chart-name}
    - task: helm-chart-check
      docker-image: adp-helm-dr-check
      # .Capabilities.APIVersions don't work correctly in this case for DR-1124-100, so we need to set the capabilities manually
      # with a property.
      # https://gerrit.ericsson.se/plugins/gitiles/adp-cicd/adp-helm-dr-checker#DR_1124_100_A
      cmd: helm-dr-check
        --helm-chart charts/${helm-chart-name}
        --output .bob/check-charts/
        --helm-v3
        --values-file ci/config/helm-dr-values.yaml
        -DhelmDesignRule.template.Capabilities.APIVersions=networking.k8s.io/v1
    - task: dockerfile-check
      docker-image: hadolint-scan
      docker-flags:
        - "--workdir /app/"
        - "-v ${env.PWD}/ci/config/hadolint-config.yaml:/data/custom_config.yaml"
        - "-v ${env.PWD}/docker/Dockerfile:/data/Dockerfile"
        - "-v ${env.PWD}/mock/domain-ui-generic/Dockerfile:/data/Dockerfile-ui-generic"
      cmd: "-p ${helm-chart-name} --dockerfiles /data/Dockerfile /data/Dockerfile-ui-generic -c /data/custom_config.yaml"
    - task: markdownlint
      docker-image: nodejs-builder
      cmd:
        # npm run lint:markdownlint does not work as the glob does not mach any md file in this env
        - node_modules/.bin/markdownlint $(git ls-files -- \*\.md | cat | xargs)
    - task: vale
      docker-image: docbuilder
      cmd:
        - >
          bash -c '
          vale $(git ls-files -- \*\.md ":!:*fragment.md" | cat | xargs);

          if [ $? -ne 0 ]; then
            echo "Linting error (Vale): there are spelling errors"
            exit 1
          fi'
    - task: jslint
      docker-image: nodejs-builder
      cmd:
        - npm run lint:js
        - npm run lint:frontend
        - npm run lint:server
        - npm run lint:package-lock

  sonar-scanner:
    - task: scan
      docker-image: nodejs-builder
      docker-flags:
        - "--env SONAR_SCANNER_OPTS='-Djavax.net.ssl.trustStore=/usr/lib64/jvm/java-11-openjdk-11/lib/security/cacerts'"
        - "--env TZ=`date +%Z`"
        - "-v /etc/localtime:/etc/localtime:ro" # SQ is sensible to exact time, as it rejects older builds
      cmd:
        - npm run sonar-scanner:frontend -- -- -Dsonar.host.url=${sonar-host-url} -Dsonar.login=${env.SONAR_LOGIN_TOKEN}
        - npm run sonar-scanner:server -- -- -Dsonar.host.url=${sonar-host-url} -Dsonar.login=${env.SONAR_LOGIN_TOKEN}

  sonar-gate-check:
    - task: sonar-quality-gate-check
      docker-image: ci-toolbox
      cmd:
        - sonarQualityCheck frontend/.scannerwork/${sonar-report-file} ${env.SONAR_LOGIN_TOKEN}
        - sonarQualityCheck backend/.scannerwork/${sonar-report-file} ${env.SONAR_LOGIN_TOKEN}

  ruleset-validation-helper:
    - task: validate-rules
      cmd:
        - git diff HEAD^ --name-only | grep -oE '^ruleset.*\.yaml$|ci/rulesets/.*\.yaml' | wc -l

  # *********
  #
  # DOC TASKS
  #
  # *********

  generate-metrics-doc:
    - task: validate-metrics-json
      docker-image: adp-release-auto
      cmd: pm-metrics validate -d
        -f ${metadata-docs-folder}/${pm-metric-fragment-file-name}
    - task: generate-doc
      docker-image: adp-release-auto
      cmd: pm-metrics generate-markdown -d
        --json ${metadata-docs-folder}/${pm-metric-fragment-file-name}
        --output docs/release/content/fragments/pm_metrics_fragment.md

  generate-docs:
    - rule: generate-svl-doc
    - rule: generate-metrics-doc
    - rule: generate-api-specs
    - task: generate-html-zip
      docker-image: adp-release-auto
      cmd: doc-handler generate --config docs/release/config/marketplace/generate_config.yaml
        --output ./build/doc-archive/html
        --format html
        --zip
    - task: generate-pdf
      docker-image: adp-release-auto
      cmd: doc-handler generate --config docs/release/config/marketplace/generate_config.yaml
        --output ./build/doc-archive/pdf
        --format pdf
        --stylesheet ${marketplace-stylesheet}
    - rule: create-test-report

  generate-pri:
    - task: generate-pri
      docker-image: adp-release-auto
      docker-flags:
        - "--env PRODUCT_RELEASE_NUMBER='${var.version}'"
        - "--env GERRIT_USERNAME"
        - "--env GERRIT_PASSWORD"
        - "--env JIRA_USERNAME"
        - "--env JIRA_PASSWORD"
        - "--env ERIDOC_USERNAME"
        - "--env ERIDOC_PASSWORD"
        - "--env FOLDER_ID=${pri-eridoc-folder-id}"
        - "--env JIRA_COMPONENT_LONG_NAME='${jira-component-name}'"
        - "--env GERRIT_URL=${gerrit-url}"
        - "--env DPRAF_REPORT_JSON=${generated-document-list-for-pri}"
        - "--env DOCUMENTS_YAML=${generated-document-list}"
        - "--env PRI_MANUAL_JSON=${pri-manual-json}"
        - "--env PRI_CONFIG_EXTRA=${pri-config-extra}"
      cmd: pri.py
        --debug
        --template-version 1.8
        --mimer
        --dry-run ${env.DRY_RUN}
        ${var.pri_params}

  # The created variable required for the marketplace placeholder replacement
  retrieve-document-data-from-pri-input:
    - task: retrieve-document-data-from-pri-input
      docker-image: nodejs-builder
      cmd: node plms/scripts/process-documents.js ${generated-document-list} .bob/var.all-document-placeholder-map

  # SVL replacement generator deletes the folder, therefore it must be the first step
  generate-svl-doc:
    - task: svl-replacement
      docker-image: adp-release-auto
      cmd: doc-handler generate-svl-replacement
        --product-number ${abstract-product-number}
        --product-version ${var.semver}
        --output ./build/doc-archive
        --format html
        --zip

  generate-and-copy-help-content:
    - task: fill-version-tags
      cmd:
        - mkdir -p .bob/temp/help-content/doc-gen-output
        - sed 's/VERSION/${var.version}/' docs/release/config/help-content/template/help-content-metadata.json > .bob/temp/help-content/help-content-metadata.json
        - sed 's/VERSION/${var.version}/' docs/release/config/help-content/template/help-package-metadata.json > .bob/temp/help-content/help-package-metadata.json
    - task: generate-help-content-zip
      docker-image: adp-release-auto
      cmd: doc-handler generate
        --config docs/release/config/help-content/help-content-config.yaml
        --output .bob/temp/help-content/doc-gen-output/
        --format md --zip
    - task: copy-help-content-to-public-folder
      cmd:
        - cp .bob/temp/help-content/doc-gen-output/*.zip ./frontend/public
        - cp .bob/temp/help-content/help-content-metadata.json ./frontend/public

  publish-docs:
    - rule: retrieve-document-data-from-pri-input
    - task: set-path-for-artifactory-links
      cmd:
        - echo -n ' "pm-metrics-folder-path=${helm-chart-repo-server}/${doc-arm-dev-path}/documents"' >> .bob/var.all-document-placeholder-map
    - task: upload-marketplace-doc-to-arm
      docker-image: adp-release-auto
      cmd: marketplace upload
        --arm-api-token ${env.API_TOKEN}
        --arm-url ${helm-chart-repo-server}/${doc-arm-dev-path}
        --config docs/release/config/marketplace/development_upload_config.yaml
        --dev
        --refresh
        --portal-token ${adp-marketplace-token}
        --key-value-parameters ${var.all-document-placeholder-map}
    - task: upload-metrics-json
      docker-image: adp-release-auto
      cmd: pm-metrics validate
        -f ${metadata-docs-folder}/${pm-metric-fragment-file-name}
        --arm-upload
        --arm-api-token ${env.API_TOKEN}
        --arm-upload-url ${helm-chart-repo-server}/${doc-arm-dev-path}/documents/
    - task: zip-all-marketplace-documents
      docker-image: adp-release-auto
      cmd:
        - cp docs/release/config/marketplace/development_upload_config.yaml ./build/doc-archive
        - cp -a ${metadata-docs-folder}/. ./build/doc-archive
        - >
          bash -c '
          cd build/doc-archive;
          zip -q -r ./../marketplace-docs-${var.version}.zip .;
          '
    - task: functions.release:upload-file # upload-zip-documents-to-artifactory
      properties:
        - file-to-upload: ./build/marketplace-docs-${var.version}.zip
        - repo-for-upload: ${helm-chart-repo-server}/${doc-arm-dev-path}/drop-documents/
        - upload-api-token: ${env.API_TOKEN}

  create-test-report:
    - task: functions.report-generation:fill-ejs-template
      properties:
        - report-template-file: docs/release/content/test-report-template.ejs.md
        - template-variables: kubernetesVersion=${var.kubernetes-version} helmVersion=${var.helm-version} dockerImageName=${var.image-full-name-internal} dockerImageTag=${var.version} dockerImageSize=${var.docker-image-size} installStartTime=${var.install-start-time} installFinishTime=${var.install-finish-time}
        - report-output-path: ${report-generation-output}
        - report-name: ${report-name}
    - task: functions.report-generation:echo-messages
      properties:
        - report-output-path: ${report-generation-output}
        - report-name: ${report-name}
    - task: functions.report-generation:convert-to-pdf
      properties:
        - report-output-path: ${report-generation-output}
    - task: archive-reports
      docker-image: adp-release-auto
      cmd:
        - cp ./build/doc-archive/test-report/pdf/test-report/test-report.pdf ./build/doc-archive/test-report/final
        - cp -r backend/test/reports/mochawesome ./build/doc-archive/test-report/final/ws-test-report
        - cp -r backend/test/reports/coverage/lcov-report ./build/doc-archive/test-report/final/ws-test-coverage-report
        - cp -r frontend/testReport ./build/doc-archive/test-report/final/gui-test-report
        - cp -r frontend/coverage/lcov-report ./build/doc-archive/test-report/final/gui-test-coverage-report
        - cp -r frontend/test_js/allure-report ./build/doc-archive/test-report/final/gui-selenium-test-report
        - >
          bash -c '
            if [ ${var.run-type} = "drop" ]; then
              cp -r integration-tests/test/backend/reports/mochawesome ./build/doc-archive/test-report/final/ws-integration-report
              cp -r integration-tests/test/ui/allure-report ./build/doc-archive/test-report/final/ui-integration-report
            else
              exit 0
            fi
          '
        - >
          bash -c '
          cd build/doc-archive/test-report/final;
          zip -q -r ./../../test-report.zip .;
          '

  generate-api-specs:
    - task: generate
      docker-image: nodejs-builder
      cmd: npm run generateApiDocs

  # **********
  #
  # TEST TASKS
  #
  # **********

  test-ws:
    - task: test-in-builder-image
      docker-image: nodejs-builder
      cmd:
        - npm run test:server

  test-ui:
    - task: test-frontend-in-builder-image
      docker-image: nodejs-builder
      docker-flags:
        - "--shm-size=2g"
        - "--env PLAYWRIGHT_BROWSERS_PATH=${PWD#}/.bob/ms-playwright"
      cmd:
        - npm run test:frontend

  generate-ci-chart:
    - task: prepare-repositories-yaml
      cmd:
        - mkdir -p .bob
        - cp repositories.yaml.template ${repositories-yaml-path}
        - sed -i "s/USERNAME/${env.HELM_USER}/" ${repositories-yaml-path}
        - sed -i "s/API_TOKEN_ADP/${env.API_TOKEN_ADP}/" ${repositories-yaml-path}
        - sed -i "s/API_TOKEN_EEA/${env.API_TOKEN}/" ${repositories-yaml-path}
    - task: copy-ci-base
      cmd:
        - mkdir -p .bob/ci-extended-chart
        - cp -r charts/ci/. .bob/ci-extended-chart
    - task: update-dummy-service-version
      cmd:
        - >
          bash -c "
          cd .bob/ci-extended-chart;
          sed -i '/name: ${test-dummy-chart-name-ha}/,/version: ~0.0.0-0/ s/~0.0.0-0/${var.functions.ha-mock-version}/' Chart.yaml;
          sed -i '/name: ${functions.helm-chart-name-ha}/,/version: ~0.0.0-0/ s/~0.0.0-0/${var.functions.ha-version}/' Chart.yaml;
          sed -i '/name: ${functions.helm-chart-name-ha}/,/alias: ${functions.helm-chart-name-ha}/ s/${helm-chart-drop-repo-path}/${var.functions.ha-demo-helm-repo}/' Chart.yaml;
          sed -i '/name: ${test-dummy-chart-name}/,/version: ~0.0.0-0/ s/~0.0.0-0/${var.mock-version}/' Chart.yaml;
          "
    - task: create-and-fetch-subcharts
      docker-image: adp-release-auto
      docker-flags:
        - "--env ENABLE_HELM_V3=true"
      cmd: helm-package
        --folder .bob/ci-extended-chart
        --workdir .bob
        --output .bob
        --version 0.0.0
        --helm-credentials ${repositories-yaml-path}

  generate-dummy-service-all:
    - task: build-dummy-service-image
      cmd: docker build ${PWD#}
        --file mock/domain-ui-generic/Dockerfile
        --tag ${image-registry}/${image-drop-repo-path}/${docker-image-name}-dummyservice:${var.version}
    - task: build-dummy-service-chart
      docker-image: adp-release-auto
      docker-flags:
        - "--env ENABLE_HELM_V3=true"
      cmd: helm-package
        --folder mock/charts/domain-ui-generic
        --replace REPO_PATH=${image-drop-repo-path}
        --replace IMAGE_NAME=${docker-image-name}-dummyservice
        --replace VERSION=${var.version}
        --version ${var.version}
        --output .bob/${test-dummy-chart-name}-internal
    - task: functions.release:upload-file # publish-to-drop-repo
      properties:
        - file-to-upload: .bob/${test-dummy-chart-name}-internal/${test-dummy-chart-file-name}
        - repo-for-upload: ${helm-chart-drop-repo}/${test-dummy-chart-name}
        - upload-api-token: ${env.API_TOKEN}
    - task: wait-for-artifactory-indexing
      cmd: sleep 10
    - task: dummy-service-image-push-internal
      cmd: docker push ${image-registry}/${image-drop-repo-path}/${docker-image-name}-dummyservice:${var.version}

  run-selenium-tests-frontend:
    - task: start-selenium-tests
      cmd: docker-compose
        --file docker/selenium-docker-compose-frontend.yml
        up
        --abort-on-container-exit
        --exit-code-from test-mock
    - task: functions.test:remove-containers
      properties:
        - docker-compose-path: docker/selenium-docker-compose-frontend.yml

  install-gas:
    - task: save-install-start-time
      cmd:
        - date "+%s" > .bob/var.install-start-time
    - rule: service-install-test
    - task: save-install-finish-time
      cmd:
        - date "+%s" > .bob/var.install-finish-time

  k8s-test-pcr:
    - rule: set-chart-values-pcr
    - rule: k8-cluster-prepare
    - rule: service-install-test
    - rule: namespace-cleanup

  set-chart-values-pcr:
    - task: set-additional-values
      cmd: echo "global.pullSecret=${image-pullsecret}" > .bob/var.additional-chart-values
    - task: set-additional-values-file
      cmd: echo "${pcr-chart-values}" > .bob/var.additional-chart-values-file

  set-chart-values-demo:
    - task: set-ingress-hostname-with-fixed-lb-ip
      cmd:
        - echo "demo.gas.${var.demo-loadbalancer-ip}.nip.io" > .bob/var.ingress-hostname
        - echo "demo.ha.${var.demo-loadbalancer-ip}.nip.io" > .bob/var.ha-ingress-hostname
        - echo "${var.demo-loadbalancer-ip}" > .bob/var.mock-service-iccr-value
    - task: convert-iccr-path # contour rewrite does not support - so need to replace with _ in the path string
      cmd: echo "${env.DEMO_INGRESS_PATH}" | sed -r 's/-/_/g' > .bob/var.ingress-iccr-path
    - task: set-additional-values
      cmd: echo "global.pullSecret=${image-pullsecret},ingress.hostname=${var.ingress-hostname},ingress.path=/${env.DEMO_INGRESS_PATH},ingress.tls.existingSecret=common-ingress-external-cert" > .bob/var.additional-chart-values
    - task: set-additional-values-file
      cmd:
        - echo "${demo-chart-values}" > .bob/var.additional-chart-values-file
        - echo "${demo-ci-chart-values}" > .bob/var.additional-dependencies-chart-values-file
    - task: set-additional-dependencies-values
      cmd: echo "--set eric-eea-ingress-ctrl-applications.service.loadBalancerIP=${var.demo-loadbalancer-ip}" > .bob/var.additional-dependencies-chart-values
    - task: set-additional-dependencies-values-ha
      cmd: echo "
        --set ${helm-chart-name-ha-mock}-ecm.ingress.path=/domainapp-ecm-${var.k8s-namespace}
        --set ${helm-chart-name-ha-mock}-eea.ingress.path=/domainapp-eea-${var.ingress-iccr-path}
        --set ${helm-chart-name-ha-mock}-eea-real-doc.ingress.path=/domainapp-eea-real-doc-${var.k8s-namespace}
        --set ${helm-chart-name-ha-mock}-enm.ingress.path=/domainapp-enm-${var.k8s-namespace}
        --set ${functions.helm-chart-name-ha}.ingress.path=/domainapp-help-aggregator-${var.k8s-namespace}
        --set ${functions.helm-chart-name-ha}.ingress.tls.existingSecret=common-ingress-external-cert" > .bob/var.additional-dependencies-chart-values-ha

  set-chart-values-characteristics:
    - task: set-additional-values
      cmd: echo "global.pullSecret=${image-pullsecret}" > .bob/var.additional-chart-values
    - task: set-additional-values-file
      cmd: echo "${characteristics-chart-values}" > .bob/var.additional-chart-values-file

  service-install-test:
    - rule: get-versions
    - task: system-test
      docker-image: k8-test
      docker-flags:
        - "--network=host"
        - "--env KUBECONFIG=${env.KUBECONFIG}"
        - "--volume ${env.KUBECONFIG}:${env.KUBECONFIG}:ro"
        - "--volume ${env.PWD}:${env.PWD}"
      cmd:
        - test.py --helm-v3 --kubernetes-admin-conf=${env.KUBECONFIG}
          --helm-user=${env.HELM_USER}
          --arm-api-token=${env.API_TOKEN}
          --kubernetes-namespace=${var.k8s-namespace}
          --chart-archive=.bob/${helm-chart-name}-internal/${var.helm-chart-file-name}
          --helm-repo=${helm-chart-drop-repo}
          --docker-server=${image-registry}
          --docker-username=${env.DOCKER_USERNAME}
          --docker-password=${env.DOCKER_PASSWORD}
          --secret-name=${image-pullsecret}
          --helm_variables="${var.additional-chart-values}"
          --helm_value_file="${var.additional-chart-values-file}"
          --skip-upgrade-test
          --baseline_chart_version=${system-test-from-version}
          --helm-timeout=600
          --skip-cleanup
          --ignore-cleanup

  namespace-cleanup:
    - task: kubernetes-namespace-clean
      docker-image: k8-test
      docker-flags:
        - "--network=host"
        - "--env KUBECONFIG=${env.KUBECONFIG}"
        - "--volume ${env.KUBECONFIG}:${env.KUBECONFIG}:ro"
        - "--volume ${env.PWD}:${env.PWD}"
      cmd:
        - kubectl delete namespace ${var.k8s-namespace}

  get-versions:
    - task: get-environment-versions
      docker-image: k8-test
      docker-flags:
        - "--network=host"
        - "--env KUBECONFIG=${env.KUBECONFIG}"
        - "--volume ${env.KUBECONFIG}:${env.KUBECONFIG}:ro"
        - "--volume ${env.PWD}:${env.PWD}"
      cmd:
        - kubectl version --short | grep "Server Version" | sed -e 's#.*v\(\)#\1#' > .bob/var.kubernetes-version
        - helm version --short > .bob/var.helm-version

  k8-cluster-prepare:
    - task: create-namespace
      docker-image: k8-test
      docker-flags:
        - "--network=host"
        - "--env KUBECONFIG=${env.KUBECONFIG}"
        - "--volume ${env.KUBECONFIG}:${env.KUBECONFIG}:ro"
      cmd: "kubectl create namespace ${var.k8s-namespace} || true"
    - task: create-pull-secret
      docker-image: k8-test
      docker-flags:
        - "--network=host"
        - "--env KUBECONFIG=${env.KUBECONFIG}"
        - "--volume ${env.KUBECONFIG}:${env.KUBECONFIG}:ro"
      cmd: "kubectl create secret docker-registry arm-pullsecret \
        --docker-server=armdocker.rnd.ericsson.se \
        --docker-username=${env.DOCKER_USERNAME} \
        --docker-password=${env.DOCKER_PASSWORD} \
        --namespace ${var.k8s-namespace} || true"

  test-ci-chart:
    - rule: k8-cluster-prepare
    - rule: generate-dummy-service-all
    - rule: generate-ci-chart
    - task: install-ci-chart
      docker-image: k8-test
      docker-flags:
        - "--network=host"
        - "--env KUBECONFIG=${env.KUBECONFIG}"
        - "--volume ${env.KUBECONFIG}:${env.KUBECONFIG}:ro"
        - "--volume ${env.PWD}:${env.PWD}"
      cmd:
        - "helm install ci .bob/ci-0.0.0.tgz \
          --wait \
          --timeout 30m0s \
          --repo ${helm-chart-ci-repo-path} \
          --username ${env.HELM_USER} \
          --password ${env.API_TOKEN} \
          --values ${ci-chart-config-yaml} \
          --set global.pullSecret=${image-pullsecret} \
          --namespace=${var.k8s-namespace}"
    - rule: namespace-cleanup

  # **************
  #
  # 3PP/PLMS TASKS
  #
  # **************

  # WARNING: RUN ONLY MANUALLY THIS RULE
  scas-register:
    - task: scas-request
      docker-image: adp-release-auto
      cmd: dependencies register
        --dependencies ${auto-dependency-file-name}
        --mimer
        --scas
        --scas-refresh-token ${env.SCAS_TOKEN}
        --productid ${scas-product-id}
        --versionid ${scas-version-id}

  foss-name-mapping:
    - task: get-name-mapping
      docker-image: adp-release-auto
      cmd: cp /usr/share/foss/resources/bazaar_name_map.csv .bob/bazaar_name_map.csv
    - task: check-component-name-differences
      docker-image: ci-toolbox
      cmd: different-bazaar-names.js
        --dependencies-path ${auto-dependency-file-name}
        --map-file .bob/bazaar_name_map.csv

  foss-helper:
    - task: check-dependencies-file-is-changed
      cmd: git diff HEAD^ -- ${auto-dependency-file-name} ${manual-dependency-file-name} | wc -l
    - task: check-all-prim-number-filled
      cmd: >
        exit $(grep "prim: ''" ${auto-dependency-file-name} ${manual-dependency-file-name} | wc -l)
    - task: check-dependencies-files
      docker-image: adp-release-auto
      cmd: dependencies validate
        -d ${manual-dependency-file-name}
        -d ${auto-dependency-file-name}
        --allow-esw4
    - task: dependency-update-with-scas
      docker-image: adp-release-auto
      cmd:
        - dependencies update
          --dependencies ${auto-dependency-file-name}
          --scan-scas
          --scas-refresh-token ${env.SCAS_TOKEN}
          --sort
          --allow-esw4
    - task: dependency-update-with-scas-no-errors
      docker-image: adp-release-auto
      cmd: >
        dependencies update
        --dependencies ${auto-dependency-file-name}
        --scan-scas
        --scas-refresh-token ${env.SCAS_TOKEN}
        --sort
        --allow-esw4
        || true
    - task: dependency-update-with-scas-manual
      docker-image: adp-release-auto
      cmd:
        - dependencies update
          --dependencies ${manual-dependency-file-name}
          --scan-scas
          --scas-refresh-token ${env.SCAS_TOKEN}
          --sort
          --allow-esw4
    - task: merge-dependencies
      docker-image: adp-release-auto
      cmd: dependencies merge
        -d ${manual-dependency-file-name}
        -d ${auto-dependency-file-name}
        -o ${dependency-full-file-name}
        --sort
    - task: check-munin-sync-status
      docker-image: adp-release-auto
      cmd:
        - rm -rf ${munin-sync-status-directory}
        - mkdir -p ${munin-sync-status-directory}
        - munin search-foss
          -t ${env.MUNIN_TOKEN}
          -d ${dependency-full-file-name}
          -o ${munin-sync-status-directory}
    - task: generate-dependencies-report
      docker-image: adp-release-auto
      cmd:
        - mkdir -p ${report-directory}
        - dependencies report
          -d ${dependency-full-file-name}
          -out ${dependencies-report-html}
    - task: fix-format
      docker-image: adp-release-auto
      cmd: dependencies merge
        -d ${auto-dependency-file-name}
        -d plms/scripts/empty_dependency.yaml
        -o ${auto-dependency-file-name}
        --sort
    - task: fix-format-manual
      docker-image: adp-release-auto
      cmd: dependencies merge
        -d ${manual-dependency-file-name}
        -d plms/scripts/empty_dependency.yaml
        -o ${manual-dependency-file-name}
        --sort
    - task: update-munin-section
      docker-image: adp-release-auto
      cmd:
        - mkdir -p ${munin-sync-status-directory}
        - munin search-foss
          -t ${env.MUNIN_TOKEN}
          -d ${auto-dependency-file-name}
          -o ${munin-sync-status-directory}
    - task: delete-munin-version
      docker-image: adp-release-auto
      cmd:
        - munin delete-versions
          -t ${env.MUNIN_TOKEN}
          -c ${product-structure}
          -v ${var.version}
    - task: migrate-dependencies
      docker-image: adp-release-auto
      cmd:
        - dependencies migrate -d ${auto-dependency-file-name}
        - dependencies migrate -d ${manual-dependency-file-name}

  foss-analyze:
    - task: analyze
      docker-image: nodejs-builder
      docker-flags:
        - "--env FOSSA_API_KEY=${env.FOSSA_API_KEY}"
      cmd:
        - fossa analyze
          --revision ${var.fossa-id}
          --project ${fossa-project-name}
          --endpoint ${fossa-server-endpoint}
          --branch ${var.branch}
          --team ${fossa-team-name}
    - task: status-check
      docker-image: adp-release-auto
      docker-flags:
        - "--env FOSSA_API_KEY=${env.FOSSA_API_KEY}"
      cmd: fossa_scan_status_check -s ${fossa-server-endpoint} -f custom -p ${fossa-project-name} -r ${var.fossa-id} -t ${env.FOSSA_API_KEY} -dl 15
    - task: report-attribution
      docker-image: nodejs-builder
      docker-flags:
        - "--env FOSSA_API_KEY=${env.FOSSA_API_KEY}"
      cmd: fossa report attribution
        --endpoint ${fossa-server-endpoint}
        --project ${fossa-project-name}
        --revision ${var.fossa-id} --json > ${fossa-report-name}
    - task: dependency-update-with-foss
      docker-image: adp-release-auto
      cmd: dependencies update
        --fossa-report ${fossa-report-name}
        --dependencies ${auto-dependency-file-name}
        --sort
        --allow-esw4
    - task: skip-blocked-3pps
      docker-image: nodejs-builder
      cmd: node plms/scripts/skip-dependencies.js ${auto-dependency-file-name} plms/dependencies_blocked_by_fossa.yaml
    - task: fix-primary
      docker-image: nodejs-builder
      cmd: node plms/scripts/fix-primary-from-package.js
        ${auto-dependency-file-name}
        frontend/package.json
        backend/package.json
    - task: fix-linking
      docker-image: nodejs-builder
      cmd:
        - node plms/scripts/fix-linking-from-package-lock.js
          ${auto-dependency-file-name}
          frontend/package-lock.json
          Static
        - node plms/scripts/fix-linking-from-package-lock.js
          ${auto-dependency-file-name}
          backend/package-lock.json
          Dynamic
    - task: enrich
      docker-image: ci-toolbox
      cmd: enrich.js
        --dependencies-path ${auto-dependency-file-name}
        --enrichment-path plms/dependencies_enrichment.yaml
        --output-dependencies-path ${auto-dependency-file-name}
    - task: foss-helper:fix-format

  foss-analyze-local:
    - rule: clean
    - rule: init-dev
    - rule: foss-analyze
    - rule: foss-register-help

  foss-register-help:
    - task: filter-unregistered
      docker-image: nodejs-builder
      cmd:
        - mkdir -p .bob/plms
        - node plms/scripts/filter-unregistered.js
          ${auto-dependency-file-name}
          .bob/plms/dependencies_foss_unregistered.yaml
        - node plms/scripts/change-name.js
          .bob/plms/dependencies_foss_unregistered.yaml
          bazaar
    - task: dependency-update-with-scas-for-unregistered
      docker-image: adp-release-auto
      cmd: >
        dependencies update
        --dependencies .bob/plms/dependencies_foss_unregistered.yaml
        --scan-scas
        --scas-refresh-token ${env.SCAS_TOKEN}
        --sort
        --allow-esw4
        || true
    - task: rename-unregistered
      docker-image: nodejs-builder
      cmd:
        - node plms/scripts/change-name.js
          .bob/plms/dependencies_foss_unregistered.yaml
          fossa
    - task: merge-unregistered
      docker-image: adp-release-auto
      cmd: dependencies merge
        -d .bob/plms/dependencies_foss_unregistered.yaml
        -d ${auto-dependency-file-name}
        -o ${auto-dependency-file-name}
        --sort
    - task: fill-missing-bazaar-src
      docker-image: nodejs-builder
      cmd:
        - node plms/scripts/fill-missing-bazaar-src.js
          ${auto-dependency-file-name}
    - task: fix-license-stako-src
      docker-image: ci-toolbox
      cmd: fix-stako-license.js
        --dependencies-path ${auto-dependency-file-name}
        --output-dependencies-path ${auto-dependency-file-name}
    - task: foss-helper:fix-format
    - task: foss-helper:update-munin-section
    - task: foss-helper:check-dependencies-files

  munin:
    - task: generate-documents-revision-list
      docker-image: adp-release-auto
      docker-flags:
        - --env ERIDOC_USERNAME="${env.ERIDOC_USERNAME}"
        - --env ERIDOC_PASSWORD="${env.ERIDOC_PASSWORD}"
      cmd: munin-doc search
        -c ${product-structure}
        -docs ${generated-document-list}
        -pi ${generated-document-list-for-pri}
        -v ${var.semver}
        --set PRIDOC="${pri-doc-number}/${var.doc-version}"
    - task: validate-product-structure
      docker-image: adp-release-auto
      cmd: munin validate
        -ps ${product-structure}
        --set PRIDOC="${pri-doc-number}/${var.doc-version}"
    - task: skip-blocked-3pps
      docker-image: nodejs-builder
      cmd: node plms/scripts/skip-dependencies.js ${dependency-full-file-name} plms/dependencies_blocked_by_mimer.yaml
    - task: create-version
      docker-image: adp-release-auto
      cmd: munin create-versions
        -t ${env.MUNIN_TOKEN}
        -c ${product-structure}
        -v ${var.version}
        --set PRIDOC="${pri-doc-number}/${var.doc-version}"

  license-agreement:
    - task: generate
      docker-image: adp-release-auto
      cmd: license-agreement generate
        --dependencies ${dependency-full-file-name}
        --fossa-report ${fossa-report-name}
        --license-agreement ${manual-license-agreement-file-name}
        --output ${license-agreement-path}
    - task: validate
      docker-image: adp-release-auto
      cmd: license-agreement validate
        --license-agreement ${license-agreement-path}

  evms:
    - task: pre-registration
      docker-image: adp-release-auto
      cmd: dependencies pre-register
        --evms
        --evms-product-name '${microservice-name}'
        --evms-api-key ${env.EVMS_API_KEY}
        --evms-product-version ${var.semver}
        --dependencies ${dependency-full-file-name}
        --dry-run false
        --debug

  # Check if eridoc_config.yaml is OK
  eridoc-dryrun:
    - task: dryrun
      docker-image: adp-release-auto
      docker-flags:
        - --env ERIDOC_USERNAME="${env.ERIDOC_USERNAME}"
        - --env ERIDOC_PASSWORD="${env.ERIDOC_PASSWORD}"
      cmd:
        - eridoc upload --config ./docs/release/config/eridoc/release-dpi-documents.yaml --debug --no-validate-certificates --set semver=${var.semver} --dry-run
        - eridoc upload --config ./docs/release/config/eridoc/release-test-documents.yaml --debug --no-validate-certificates --set semver=${var.semver} --dry-run
  # Upload eridoc documents to Eridoc
  eridoc-upload:
    - task: eridoc-upload
      docker-image: adp-release-auto
      docker-flags:
        - --env ERIDOC_USERNAME="${env.ERIDOC_USERNAME}"
        - --env ERIDOC_PASSWORD="${env.ERIDOC_PASSWORD}"
      cmd:
        - eridoc upload --config ./docs/release/config/eridoc/release-dpi-documents.yaml --debug --no-validate-certificates --set semver=${var.semver}
        - eridoc upload --config ./docs/release/config/eridoc/release-test-documents.yaml --debug --no-validate-certificates --set semver=${var.semver}
  # Approve uploaded documents in Eridoc
  eridoc-approve:
    - task: eridoc-approve
      docker-image: adp-release-auto
      docker-flags:
        - --env ERIDOC_USERNAME="${env.ERIDOC_USERNAME}"
        - --env ERIDOC_PASSWORD="${env.ERIDOC_PASSWORD}"
      cmd:
        - eridoc approve --config ./docs/release/config/eridoc/release-dpi-documents.yaml --debug --no-validate-certificates --set semver=${var.semver}
        - eridoc approve --config ./docs/release/config/eridoc/release-test-documents.yaml --debug --no-validate-certificates --set semver=${var.semver}
        - eridoc approve --config ./docs/release/config/eridoc/release-characteristics-report.yaml --debug --no-validate-certificates --set semver=${var.semver}
        - eridoc approve --config ./docs/release/config/eridoc/release-k8s-report.yaml --debug --no-validate-certificates --set semver=${var.semver}
