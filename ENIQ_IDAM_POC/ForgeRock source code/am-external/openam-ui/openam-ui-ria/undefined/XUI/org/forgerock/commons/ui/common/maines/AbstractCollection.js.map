{"version":3,"sources":["../../../../../../../XUI/org/forgerock/commons/ui/common/maines/AbstractCollection.js"],"names":["define","$","_","Backbone","BackbonePaginator","AbstractModel","ServiceInvoker","Messages","extend","model","setPageSize","pageSize","options","isObject","fetch","state","prototype","call","setPagingType","type","pagingType","getPagingType","setTotalPagedResultsPolicy","policy","totalPagedResultsPolicy","indexOf","setSorting","sortKey","order","hasPrevious","currentPage","hasNext","pagedResultsCookie","totalRecords","sync","method","collection","data","processData","error","response","addMessage","TYPE_DANGER","param","restCall","apply","arguments","getFirstPage","pagedResultsOffset","getLastPage","Math","floor","getNextPage","getPreviousPage","getPage","pageNumber","isFinite","parseState","resp","totalPagedResults","totalPages","ceil","parseRecords","result","firstPage","queryParams","_totalPagedResultsPolicy","_pagedResultsOffset","_pagedResultsCookie"],"mappings":"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","file":"AbstractCollection.js","sourcesContent":["/**\r\n * The contents of this file are subject to the terms of the Common Development and\r\n * Distribution License (the License). You may not use this file except in compliance with the\r\n * License.\r\n *\r\n * You can obtain a copy of the License at legal/CDDLv1.0.txt. See the License for the\r\n * specific language governing permission and limitations under the License.\r\n *\r\n * When distributing Covered Software, include this CDDL Header Notice in each file and include\r\n * the License file at legal/CDDLv1.0.txt. If applicable, add the following below the CDDL\r\n * Header, with the fields enclosed by brackets [] replaced by your own identifying\r\n * information: \"Portions copyright [year] [name of copyright owner]\".\r\n *\r\n * Copyright 2015-2016 ForgeRock AS.\r\n */\r\n/* eslint-disable */\r\n define([\r\n    \"jquery\",\r\n    \"underscore\",\r\n    \"backbone\",\r\n    \"backbone.paginator\",\r\n    \"org/forgerock/commons/ui/common/main/AbstractModel\",\r\n    \"org/forgerock/commons/ui/common/main/ServiceInvoker\",\r\n    \"org/forgerock/commons/ui/common/components/Messages\"\r\n], function($, _, Backbone, BackbonePaginator, AbstractModel, ServiceInvoker, Messages) {\r\n    /**\r\n     * @exports org/forgerock/commons/ui/common/main/AbstractCollection\r\n     *\r\n     * Extending PageableCollection to support CREST-specific paging details\r\n     *\r\n     */\r\n    return BackbonePaginator.extend({\r\n        model: AbstractModel,\r\n        /**\r\n           this setPageSize overrides the default implementation in BackbonePaginator so that it\r\n           can be called without necessarily triggering a .fetch()\r\n           @param {number} pageSize - number of records to fetch, per page\r\n           @param {object} options - any options necessary to provide\r\n           @param {boolean} options.fetch - if false, will suppress the fetch call and instead merely update the state\r\n        */\r\n        setPageSize : function (pageSize, options) {\r\n            if (_.isObject(options) && options.fetch === false) {\r\n                this.state.pageSize = pageSize;\r\n            } else {\r\n                return BackbonePaginator.prototype.setPageSize.call(this, pageSize, options);\r\n            }\r\n        },\r\n        /**\r\n            The only two type values supported here are offset and cookie. If anything else is\r\n            passed in, it will default to offset.\r\n        */\r\n        setPagingType : function (type) {\r\n            this.state.pagingType = (type === \"offset\") || (type === \"cookie\") ? type : \"offset\";\r\n            return this;\r\n        },\r\n        getPagingType : function () {\r\n            return this.state.pagingType || \"offset\";\r\n        },\r\n\r\n        /**\r\n            The three policy values supported here are ESTIMATE, NONE and EXACT. If anything else is\r\n            passed in, it will default to NONE\r\n        */\r\n        setTotalPagedResultsPolicy: function (policy) {\r\n            this.state.totalPagedResultsPolicy = (_.indexOf([\"ESTIMATE\",\"NONE\",\"EXACT\"], policy) !== -1)\r\n                ? policy : \"NONE\";\r\n            return this;\r\n        },\r\n\r\n        setSorting: function (sortKey, order) {\r\n            if (order === 1) {\r\n                return BackbonePaginator.prototype.setSorting.call(this, \"-\" + sortKey, order);\r\n            } else {\r\n                return BackbonePaginator.prototype.setSorting.call(this, sortKey, order);\r\n            }\r\n        },\r\n\r\n        hasPrevious: function () {\r\n            return (this.getPagingType() === \"offset\" && this.state.currentPage >= 1);\r\n        },\r\n        hasNext: function () {\r\n            return (this.getPagingType() === \"cookie\" && this.state.pagedResultsCookie !== null) ||\r\n                // when we don't have a total, assume there are more results\r\n                (this.getPagingType() === \"offset\" && this.state.totalRecords === null) ||\r\n                (this.getPagingType() === \"offset\"\r\n                    && this.state.totalRecords >= ((this.state.currentPage+1) * this.state.pageSize));\r\n        },\r\n        sync: function (method, collection, options) {\r\n            if (method === \"read\") {\r\n                // BackbonePaginator seems to insist that this field be included anytime sorting is performed.\r\n                delete options.data.order;\r\n                options.processData = false;\r\n\r\n                options.error = function (response) {\r\n                    Messages.addMessage({\r\n                        type: Messages.TYPE_DANGER,\r\n                        response: response\r\n                    });\r\n                };\r\n\r\n                if (_.isObject(options.data)) {\r\n                    // read calls will be GET requests, so any \"data\" sent will be URL parameters\r\n                    options.data = $.param(options.data);\r\n                }\r\n\r\n                return ServiceInvoker.restCall(options);\r\n            } else {\r\n                return BackbonePaginator.prototype.sync.apply(this, arguments);\r\n            }\r\n        },\r\n        getFirstPage: function () {\r\n            this.state.pagedResultsCookie = null;\r\n            this.state.pagedResultsOffset = 0;\r\n            this.state.currentPage = 0;\r\n            return BackbonePaginator.prototype.getFirstPage.apply(this, arguments);\r\n        },\r\n        getLastPage: function () {\r\n            if (this.getPagingType() === \"offset\" && this.state.totalRecords !== null && this.state.totalRecords > 0) {\r\n                this.state.pagedResultsCookie = null;\r\n                this.state.currentPage = Math.floor((this.state.totalRecords-1) / this.state.pageSize);\r\n                this.state.pagedResultsOffset = this.state.currentPage * this.state.pageSize;\r\n                return BackbonePaginator.prototype.getLastPage.apply(this, arguments);\r\n            } else {\r\n                // nothing else we can really do here, so fail over to getting the first page\r\n                return this.getFirstPage();\r\n            }\r\n        },\r\n        getNextPage: function () {\r\n            if (this.getPagingType() === \"cookie\") {\r\n                if (this.state.pagedResultsCookie === null) {\r\n                    return this.getFirstPage();\r\n                }\r\n                this.state.pagedResultsOffset = null;\r\n            } else {\r\n                this.state.pagedResultsCookie = null;\r\n                this.state.pagedResultsOffset = (this.state.currentPage+1) * this.state.pageSize;\r\n            }\r\n            return BackbonePaginator.prototype.getNextPage.apply(this, arguments);\r\n        },\r\n        getPreviousPage: function () {\r\n            if (!this.hasPrevious()) {\r\n                return this.getFirstPage();\r\n            }\r\n            // this only works with offset-based paging\r\n            this.state.pagedResultsCookie = null;\r\n            this.state.pagedResultsOffset = (this.state.currentPage-1) * this.state.pageSize;\r\n            return BackbonePaginator.prototype.getPreviousPage.apply(this, arguments);\r\n        },\r\n        getPage: function (pageNumber) {\r\n            if (_.isFinite(pageNumber)) {\r\n                this.state.currentPage = pageNumber;\r\n                // jumping to a specific page is only possible with offset\r\n                this.state.pagedResultsOffset = this.state.pageSize * pageNumber;\r\n            }\r\n            return BackbonePaginator.prototype.getPage.apply(this, arguments);\r\n        },\r\n        parseState: function (resp) {\r\n            if (this.getPagingType() === \"cookie\" && resp.pagedResultsCookie !== null) {\r\n                this.state.pagedResultsCookie = resp.pagedResultsCookie;\r\n            } else {\r\n                this.state.pagedResultsCookie = null;\r\n            }\r\n\r\n            // totalPagedResults may not be defined in the response, depending on the policy\r\n            this.state.totalRecords = _.isFinite(resp.totalPagedResults) && resp.totalPagedResults > -1\r\n                ? resp.totalPagedResults : null;\r\n\r\n            if (!this.state.totalPages && this.state.totalRecords) {\r\n                this.state.totalPages = Math.ceil(this.state.totalRecords / this.state.pageSize);\r\n            } else {\r\n                this.state.totalPages = null;\r\n            }\r\n        },\r\n        parseRecords: function (resp) {\r\n            return resp.result;\r\n        },\r\n        state : {\r\n            pagedResultsCookie: null,\r\n            pagedResultsOffset: 0,\r\n            firstPage: 0,\r\n            pageSize: 10,\r\n            pagingType: \"offset\",\r\n            totalPagedResultsPolicy: \"NONE\"\r\n        },\r\n        queryParams: {\r\n            currentPage: null,\r\n            totalPages: null,\r\n            totalRecords: null,\r\n            _totalPagedResultsPolicy: function () {\r\n                if (this.state.totalPagedResultsPolicy === \"NONE\") {\r\n                    return null;\r\n                }\r\n                return this.state.totalPagedResultsPolicy;\r\n            },\r\n            _pagedResultsOffset: function () {\r\n                if (this.state.pagedResultsOffset === 0 || !_.isFinite(this.state.pagedResultsOffset)) {\r\n                    return null;\r\n                }\r\n                return this.state.pagedResultsOffset;\r\n            },\r\n            _pagedResultsCookie: function () {\r\n                return this.state.pagedResultsCookie;\r\n            },\r\n            pageSize: \"_pageSize\",\r\n            sortKey: \"_sortKeys\"\r\n        }\r\n    });\r\n});"]}