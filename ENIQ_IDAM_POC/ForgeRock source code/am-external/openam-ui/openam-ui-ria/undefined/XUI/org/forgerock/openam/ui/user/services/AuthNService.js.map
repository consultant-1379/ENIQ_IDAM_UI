{"version":3,"sources":["../../../../../../../XUI/org/forgerock/openam/ui/user/services/AuthNService.js"],"names":["define","$","_","Messages","AbstractDelegate","Configuration","EventManager","URIUtils","fetchUrl","Constants","AuthenticationToken","session","store","query","obj","host","context","requirementList","knownAuth","handleFragmentParameters","params","globalData","auth","urlParams","extend","addQueryStringToUrl","url","queryString","isEmpty","delimiter","indexOf","addRealmToStore","realm","default","dispatch","addRealm","createAuthenticateURL","parameters","parseParameters","getCurrentFragmentQueryString","getState","remote","info","urlParamsFromObject","begin","options","clone","serviceCall","type","headers","data","errorsHandlers","status","assign","then","requirements","jqXHR","errorBody","parseJSON","responseText","hasOwnProperty","submitRequirements","resetProcess","code","message","TYPE_DANGER","handleRequirements","callbackTracking","callback","find","output","name","value","isAuthenticated","push","currentStage","length","get","callbacks","set","authId","timeOutErrorCode","processSucceeded","processFailed","reason","failedStage","goToFailureUrl","detail","failureUrl","console","log","window","location","href","JSON","stringify","oldReqs","reasonThatWillNotBeDisplayed","sendEvent","EVENT_DISPLAY_MESSAGE_REQUEST","responseJSON","t","addMessage","Deferred","reject","promise","hasRealmChanged","subRealm","hasAuthIndexChanged","getRequirements","args","paramsWithAuthToken","remove","done","error","resolve"],"mappings":"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","file":"AuthNService.js","sourcesContent":["/*\n * The contents of this file are subject to the terms of the Common Development and\n * Distribution License (the License). You may not use this file except in compliance with the\n * License.\n *\n * You can obtain a copy of the License at legal/CDDLv1.0.txt. See the License for the\n * specific language governing permission and limitations under the License.\n *\n * When distributing Covered Software, include this CDDL Header Notice in each file and include\n * the License file at legal/CDDLv1.0.txt. If applicable, add the following below the CDDL\n * Header, with the fields enclosed by brackets [] replaced by your own identifying\n * information: \"Portions copyright [year] [name of copyright owner]\".\n *\n * Copyright 2011-2017 ForgeRock AS.\n */\ndefine([\n    \"jquery\",\n    \"lodash\",\n    \"org/forgerock/commons/ui/common/components/Messages\",\n    \"org/forgerock/commons/ui/common/main/AbstractDelegate\",\n    \"org/forgerock/commons/ui/common/main/Configuration\",\n    \"org/forgerock/commons/ui/common/main/EventManager\",\n    \"org/forgerock/commons/ui/common/util/URIUtils\",\n    \"org/forgerock/openam/ui/common/services/fetchUrl\",\n    \"org/forgerock/openam/ui/common/util/Constants\",\n    \"org/forgerock/openam/ui/user/login/tokens/AuthenticationToken\",\n    \"store/modules/local/session\",\n    \"store/index\",\n    \"org/forgerock/openam/ui/common/util/uri/query\"\n], ($, _, Messages, AbstractDelegate, Configuration, EventManager, URIUtils, fetchUrl, Constants, AuthenticationToken,\n    session, store, query) => {\n    const obj = new AbstractDelegate(`${Constants.host}${Constants.context}/json`);\n    let requirementList = [];\n    // to be used to keep track of the attributes associated with whatever requirementList contains\n    let knownAuth = {};\n\n    /**\n     * Merges the provided parameters with anything present in Configuration.globalData.auth.urlParams.\n     * This might be the query string or fragment query string depending on what's present on the client URL.\n     * @param   {Object} params parameters to merge into\n     * @returns {Object} Merge parameters\n     */\n    function handleFragmentParameters (params) {\n        if (Configuration.globalData.auth.urlParams) {\n            _.extend(params, Configuration.globalData.auth.urlParams);\n        }\n\n        return params;\n    }\n\n    function addQueryStringToUrl (url, queryString) {\n        if (_.isEmpty(queryString)) {\n            return url;\n        }\n\n        const delimiter = url.indexOf(\"?\") === -1 ? \"?\" : \"&\";\n        return `${url}${delimiter}${queryString}`;\n    }\n\n    function addRealmToStore (realm) {\n        store.default.dispatch(session.addRealm(realm));\n    }\n\n    /**\n     * Creates the URL for the authenticate end-point with parameters passed to the client appended.\n     * @returns {string} The authenticate end-point with query parameters appended\n     */\n    const createAuthenticateURL = () => {\n        const parameters = handleFragmentParameters(query.parseParameters(URIUtils.getCurrentFragmentQueryString()));\n        /**\n         * Explicity remove 'realm' to ensure the authenticate end-point is not called with it\n         * TODO Remove this with AME-11109\n         */\n        delete parameters.realm;\n        return addQueryStringToUrl(\n            fetchUrl.default(\"/authenticate\", { realm: store.default.getState().remote.info.realm }),\n            query.urlParamsFromObject(parameters)\n        );\n    };\n\n    obj.begin = function (options) {\n        knownAuth = _.clone(Configuration.globalData.auth);\n        const serviceCall = {\n            type: \"POST\",\n            headers: { \"Accept-API-Version\": \"protocol=1.0,resource=2.1\" },\n            data: \"\",\n            url: createAuthenticateURL(),\n            errorsHandlers: {\n                \"unauthorized\": { status: \"401\" },\n                \"bad request\": { status: \"400\" }\n            }\n        };\n        _.assign(serviceCall, options);\n        return obj.serviceCall(serviceCall).then((requirements) => requirements,\n            (jqXHR) => {\n                // some auth processes might throw an error fail immediately\n                const errorBody = $.parseJSON(jqXHR.responseText);\n                // if the error body contains an authId, then we might be able to\n                // continue on after this error to the next module in the chain\n                if (errorBody.hasOwnProperty(\"authId\")) {\n                    return obj.submitRequirements(errorBody)\n                        .then((requirements) => {\n                            obj.resetProcess();\n                            return requirements;\n                        }, () => errorBody\n                        );\n                } else if (errorBody.code && errorBody.code === 400) {\n                    return {\n                        message: errorBody.message,\n                        type: Messages.TYPE_DANGER\n                    };\n                }\n                return errorBody;\n            });\n    };\n    obj.handleRequirements = function (requirements) {\n        //callbackTracking allows us to determine if we're expecting to return having gone away\n        function callbackTracking (callback) {\n            return callback.type === \"RedirectCallback\" && _.find(callback.output, {\n                name: \"trackingCookie\",\n                value: true\n            });\n        }\n\n        const isAuthenticated = requirements.hasOwnProperty(\"tokenId\");\n\n        if (requirements.hasOwnProperty(\"authId\")) {\n            requirementList.push(requirements);\n            Configuration.globalData.auth.currentStage = requirementList.length;\n            if (!AuthenticationToken.get() && _.find(requirements.callbacks, callbackTracking)) {\n                AuthenticationToken.set(requirements.authId);\n            }\n        } else if (isAuthenticated) {\n            addRealmToStore(requirements.realm);\n        }\n    };\n    obj.submitRequirements = function (requirements, options) {\n        const timeOutErrorCode = \"110\";\n        const processSucceeded = (requirements) => {\n            obj.handleRequirements(requirements);\n            return requirements;\n        };\n        const processFailed = (reason) => {\n            const failedStage = requirementList.length;\n            obj.resetProcess();\n            return [failedStage, reason];\n        };\n        const goToFailureUrl = (errorBody) => {\n            if (errorBody.detail && errorBody.detail.failureUrl) {\n                console.log(errorBody.detail.failureUrl);\n                window.location.href = errorBody.detail.failureUrl;\n            }\n        };\n        const serviceCall = {\n            type: \"POST\",\n            headers: { \"Accept-API-Version\": \"protocol=1.0,resource=2.1\" },\n            data: JSON.stringify(requirements),\n            url: createAuthenticateURL(),\n            errorsHandlers: {\n                \"unauthorized\": { status: \"401\" },\n                \"Internal Server Error \": { status: \"500\" }\n            }\n        };\n        _.assign(serviceCall, options);\n        return obj.serviceCall(serviceCall).then(processSucceeded, (jqXHR) => {\n            let oldReqs;\n            let errorBody;\n            const currentStage = requirementList.length;\n            let message;\n            const reasonThatWillNotBeDisplayed = 1;\n\n            if (_.get(jqXHR, \"responseJSON.detail.errorCode\") === timeOutErrorCode) {\n                // we timed out, so let's try again with a fresh session\n                oldReqs = requirementList[0];\n                obj.resetProcess();\n                return obj.begin().then((requirements) => {\n                    obj.handleRequirements(requirements);\n                    if (requirements.hasOwnProperty(\"authId\")) {\n                        if (currentStage === 1) {\n                            /**\n                             * if we were at the first stage when the timeout occurred,\n                             * try to do it again immediately.\n                             */\n                            oldReqs.authId = requirements.authId;\n                            return obj.submitRequirements(oldReqs).then(processSucceeded, processFailed);\n                        } else {\n                            // restart the process at the beginning\n                            EventManager.sendEvent(Constants.EVENT_DISPLAY_MESSAGE_REQUEST, \"loginTimeout\");\n                            return requirements;\n                        }\n                    } else {\n                        return requirements;\n                    }\n                /**\n                 * this is very unlikely, since it would require a call to .begin() to fail\n                 * after having succeeded once before\n                 */\n                }, processFailed);\n            } else if (jqXHR.status === 500) {\n                if (jqXHR.responseJSON && jqXHR.responseJSON.message) {\n                    message = jqXHR.responseJSON.message;\n                } else {\n                    message = $.t(\"config.messages.CommonMessages.unknown\");\n                }\n                Messages.addMessage({ message, type: Messages.TYPE_DANGER });\n            } else { // we have a 401 unauthorized response\n                errorBody = $.parseJSON(jqXHR.responseText);\n                // if the error body has an authId property, then we may be\n                // able to advance beyond this error\n                if (errorBody.hasOwnProperty(\"authId\")) {\n                    return obj.submitRequirements(errorBody).then(processSucceeded, processFailed);\n                } else {\n                    obj.resetProcess();\n                    Messages.addMessage({\n                        message: errorBody.message,\n                        type: Messages.TYPE_DANGER\n                    });\n                    goToFailureUrl(errorBody);\n                    // The reason used here will not be translated into a common message and hence not displayed.\n                    // This is so that only the message above is displayed.\n                    return $.Deferred().reject(currentStage, reasonThatWillNotBeDisplayed).promise();\n                }\n            }\n        });\n    };\n    obj.resetProcess = function () {\n        requirementList = [];\n    };\n    function hasRealmChanged () {\n        const auth = Configuration.globalData.auth;\n        return auth.subRealm !== knownAuth.subRealm ||\n            _.get(auth, \"urlParams.realm\") !== _.get(knownAuth, \"urlParams.realm\");\n    }\n    function hasAuthIndexChanged () {\n        const auth = Configuration.globalData.auth;\n        return _.get(auth, \"urlParams.authIndexType\") !== _.get(knownAuth, \"urlParams.authIndexType\") ||\n            _.get(auth, \"urlParams.authIndexValue\") !== _.get(knownAuth, \"urlParams.authIndexValue\");\n    }\n    obj.getRequirements = function (args) {\n        if (AuthenticationToken.get()) {\n            const paramsWithAuthToken = _.extend({ authId: AuthenticationToken.get() },\n                Configuration.globalData.auth.urlParams);\n            AuthenticationToken.remove();\n            return obj.submitRequirements(paramsWithAuthToken).done(() => {\n                knownAuth = _.clone(Configuration.globalData.auth);\n            });\n        } else if (requirementList.length === 0 || hasRealmChanged() || hasAuthIndexChanged()) {\n            obj.resetProcess();\n            return obj.begin(args)\n                .then((requirements) => {\n                    obj.handleRequirements(requirements);\n                    return requirements;\n                }, (error) => error);\n        } else {\n            return $.Deferred().resolve(requirementList[requirementList.length - 1]);\n        }\n    };\n    return obj;\n});\n"]}