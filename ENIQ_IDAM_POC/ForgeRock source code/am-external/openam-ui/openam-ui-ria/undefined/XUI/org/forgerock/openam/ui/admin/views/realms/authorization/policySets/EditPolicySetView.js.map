{"version":3,"sources":["../../../../../../../../../../XUI/org/forgerock/openam/ui/admin/views/realms/authorization/policySets/EditPolicySetView.js"],"names":["define","$","_","PolicySetModel","StripedListView","PoliciesView","PoliciesService","FormHelper","Messages","AbstractView","EventManager","Router","Constants","UIUtils","extend","partials","APPLICATION_TYPE","validationFields","events","initialize","prototype","call","model","onModelSync","renderAfterSyncModel","render","args","callback","policySetName","realmPath","renderCallback","appTypePromise","getApplicationType","envConditionsPromise","getEnvironmentConditions","subjConditionsPromise","getSubjectConditions","decisionCombinersPromise","getDecisionCombiners","resourceTypesPromise","listResourceTypes","template","data","headerActions","actionPartial","title","icon","helpLink","name","listenTo","fetch","newEntity","entity","attributes","displayName","realm","renderApplication","self","parentRenderCallback","parentRender","policySetModel","$el","find","tabdrop","fillTemplateWithData","tpl","append","populateResourceTypes","setActiveTab","focus","populateAvailableResourceTypes","resourceTypes","options","allResourceTypes","availableResourceTypes","filter","item","contains","resourceTypeUuids","uuid","selectedResourceTypes","findByValues","selectedResourceTypesInitial","clone","id","done","result","when","appType","envConditions","subjConditions","decisionCombiners","applicationType","processConditions","entitlementCombiner","resTypesSelection","selectize","sortField","valueField","labelField","searchField","onChange","value","entityId","conditions","populateConditions","subjects","selected","available","each","cond","push","submitForm","e","preventDefault","savePromise","nonModifiedAttributes","updateFields","activeTabId","attr","save","routeTo","configuration","routes","realmsPolicySetEdit","map","encodeURIComponent","trigger","sendEvent","EVENT_DISPLAY_MESSAGE_REQUEST","validationError","onDeleteClick","showConfirmationBeforeDeleting","type","t","bind","deletePolicySet","onSuccess","realmsPolicySets","onError","response","addMessage","TYPE_DANGER","destroy","success","error","wait","dataFields","field","dataField","getAttribute","checked","trim"],"mappings":"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","file":"EditPolicySetView.js","sourcesContent":["/*\n * The contents of this file are subject to the terms of the Common Development and\n * Distribution License (the License). You may not use this file except in compliance with the\n * License.\n *\n * You can obtain a copy of the License at legal/CDDLv1.0.txt. See the License for the\n * specific language governing permission and limitations under the License.\n *\n * When distributing Covered Software, include this CDDL Header Notice in each file and include\n * the License file at legal/CDDLv1.0.txt. If applicable, add the following below the CDDL\n * Header, with the fields enclosed by brackets [] replaced by your own identifying\n * information: \"Portions copyright [year] [name of copyright owner]\".\n *\n * Copyright 2014-2017 ForgeRock AS.\n */\n\ndefine([\n    \"jquery\",\n    \"lodash\",\n    \"org/forgerock/openam/ui/admin/models/authorization/PolicySetModel\",\n    \"org/forgerock/openam/ui/admin/views/realms/authorization/common/StripedListView\",\n    \"org/forgerock/openam/ui/admin/views/realms/authorization/policies/PoliciesView\",\n    \"org/forgerock/openam/ui/admin/services/realm/PoliciesService\",\n    \"org/forgerock/openam/ui/admin/utils/FormHelper\",\n    \"org/forgerock/commons/ui/common/components/Messages\",\n    \"org/forgerock/commons/ui/common/main/AbstractView\",\n    \"org/forgerock/commons/ui/common/main/EventManager\",\n    \"org/forgerock/commons/ui/common/main/Router\",\n    \"org/forgerock/commons/ui/common/util/Constants\",\n    \"org/forgerock/commons/ui/common/util/UIUtils\",\n    \"bootstrap-tabdrop\",\n    \"selectize\"\n], function ($, _, PolicySetModel, StripedListView, PoliciesView, PoliciesService, FormHelper, Messages, AbstractView,\n             EventManager, Router, Constants, UIUtils) {\n    return AbstractView.extend({\n        partials: [\n            \"partials/util/_HelpLink.html\"\n        ],\n        APPLICATION_TYPE: \"iPlanetAMWebAgentService\",\n        validationFields: [\"name\", \"resourceTypeUuids\"],\n        events: {\n            \"click [data-save]\": \"submitForm\",\n            \"click [data-delete]\": \"onDeleteClick\"\n        },\n\n        initialize () {\n            AbstractView.prototype.initialize.call(this);\n            this.model = null;\n        },\n\n        onModelSync () {\n            this.renderAfterSyncModel();\n        },\n\n        render (args, callback) {\n            var policySetName = args[1];\n\n            this.realmPath = args[0];\n\n            if (callback) {\n                this.renderCallback = callback;\n            }\n\n            this.appTypePromise = PoliciesService.getApplicationType(this.APPLICATION_TYPE);\n            this.envConditionsPromise = PoliciesService.getEnvironmentConditions();\n            this.subjConditionsPromise = PoliciesService.getSubjectConditions();\n            this.decisionCombinersPromise = PoliciesService.getDecisionCombiners();\n            this.resourceTypesPromise = PoliciesService.listResourceTypes();\n\n            if (policySetName) {\n                this.template = \"templates/admin/views/realms/authorization/policySets/EditPolicySetTemplate.html\";\n                this.data.headerActions = [\n                    { actionPartial: \"form/_Button\", data:\"delete\", title:\"common.form.delete\", icon:\"fa-times\" },\n                    { actionPartial: \"util/_HelpLink\", helpLink: \"backstage.authz.policySets\" }\n                ];\n                this.model = new PolicySetModel({ name: policySetName });\n                this.listenTo(this.model, \"sync\", this.onModelSync);\n                this.model.fetch();\n            } else {\n                this.data.newEntity = true;\n                this.template = \"templates/admin/views/realms/authorization/policySets/NewPolicySetTemplate.html\";\n                this.model = new PolicySetModel();\n                this.data.headerActions = [{ actionPartial: \"util/_HelpLink\", helpLink: \"backstage.authz.policySets\" }];\n                this.listenTo(this.model, \"sync\", this.onModelSync);\n                this.renderAfterSyncModel();\n            }\n        },\n\n        renderAfterSyncModel () {\n            this.data.entity = this.model.attributes;\n            this.data.displayName = this.model.displayName;\n\n            if (!this.data.entity.realm) {\n                this.data.entity.realm = this.realmPath;\n            }\n\n            this.renderApplication();\n        },\n\n        renderApplication () {\n            var self = this,\n                parentRenderCallback = function () {\n                    self.parentRender(function () {\n                        PoliciesView.render({\n                            realmPath: self.realmPath,\n                            policySetModel: self.model\n                        }, function () {\n                            self.$el.find(\".tab-menu .nav-tabs\").tabdrop();\n                            UIUtils.fillTemplateWithData(\n                                \"templates/admin/views/realms/authorization/policySets/PolicySetSettingsTemplate.html\",\n                                self.data,\n                                function (tpl) {\n                                    self.$el.find(\"#policySetSettings\").append(tpl);\n                                    self.populateResourceTypes();\n                                    FormHelper.setActiveTab(self);\n                                    self.$el.find(\"#policySetSettings [autofocus]\").focus();\n                                    if (self.renderCallback) {\n                                        self.renderCallback();\n                                    }\n                                });\n                        });\n                    });\n                },\n                populateAvailableResourceTypes = function (resourceTypes) {\n                    var options = {};\n\n                    options.allResourceTypes = resourceTypes;\n                    options.availableResourceTypes = _.filter(resourceTypes, function (item) {\n                        return !_.contains(self.data.entity.resourceTypeUuids, item.uuid);\n                    });\n\n                    options.selectedResourceTypes = _.findByValues(options.allResourceTypes, \"uuid\",\n                        self.data.entity.resourceTypeUuids);\n\n                    options.selectedResourceTypesInitial = _.clone(options.selectedResourceTypes);\n\n                    return options;\n                };\n\n            if (this.model.id) {\n                this.resourceTypesPromise.done(function (resourceTypes) {\n                    _.extend(self.data, { options: populateAvailableResourceTypes(resourceTypes.result) });\n                    parentRenderCallback();\n                });\n            } else {\n                // Fill in the necessary information about application\n                $.when(this.appTypePromise, this.envConditionsPromise, this.subjConditionsPromise,\n                    this.decisionCombinersPromise, this.resourceTypesPromise)\n                    .done(function (appType, envConditions, subjConditions, decisionCombiners, resourceTypes) {\n                        self.data.entity.applicationType = self.APPLICATION_TYPE;\n                        self.processConditions(self.data, envConditions[0].result, subjConditions[0].result);\n                        self.data.entity.entitlementCombiner = decisionCombiners[0].result[0].title;\n                        _.extend(self.data, { options: populateAvailableResourceTypes(resourceTypes[0].result) });\n                        parentRenderCallback();\n                    });\n            }\n        },\n\n        populateResourceTypes () {\n            var self = this;\n\n            this.resTypesSelection = this.$el.find(\"#resTypesSelection\").selectize({\n                sortField: \"name\",\n                valueField: \"uuid\",\n                labelField: \"name\",\n                searchField: \"name\",\n                options: this.data.options.allResourceTypes,\n                onChange (value) {\n                    self.data.entity.resourceTypeUuids = value;\n                }\n            });\n        },\n\n        processConditions (data, envConditions, subjConditions) {\n            if (!data.entityId) {\n                data.entity.conditions = this.populateConditions(envConditions, envConditions);\n                data.entity.subjects = this.populateConditions(subjConditions, subjConditions);\n            }\n        },\n\n        populateConditions (selected, available) {\n            var result = [];\n            _.each(available, function (cond) {\n                result.push(cond.title);\n            });\n            return result;\n        },\n\n        submitForm (e) {\n            e.preventDefault();\n\n            var self = this,\n                savePromise,\n                nonModifiedAttributes = _.clone(this.model.attributes);\n\n            this.updateFields();\n            this.activeTabId = this.$el.find(\".tab-menu li.active a\").attr(\"href\");\n\n            _.extend(this.model.attributes, this.data.entity);\n            savePromise = this.model.save();\n\n            if (savePromise) {\n                savePromise\n                    .done(function () {\n                        if (self.data.newEntity) {\n                            Router.routeTo(Router.configuration.routes.realmsPolicySetEdit, {\n                                args: _.map([self.realmPath, self.model.id], encodeURIComponent),\n                                trigger: true\n                            });\n                        } else {\n                            EventManager.sendEvent(Constants.EVENT_DISPLAY_MESSAGE_REQUEST, \"changesSaved\");\n                        }\n                    });\n            } else {\n                _.extend(this.model.attributes, nonModifiedAttributes);\n                EventManager.sendEvent(Constants.EVENT_DISPLAY_MESSAGE_REQUEST, this.model.validationError);\n            }\n        },\n\n        onDeleteClick (e) {\n            e.preventDefault();\n\n            FormHelper.showConfirmationBeforeDeleting({ type: $.t(\"console.authorization.common.policySet\") },\n                _.bind(this.deletePolicySet, this));\n        },\n\n        deletePolicySet () {\n            var self = this,\n                onSuccess = function () {\n                    Router.routeTo(Router.configuration.routes.realmsPolicySets, {\n                        args: [encodeURIComponent(self.realmPath)],\n                        trigger: true\n                    });\n                    EventManager.sendEvent(Constants.EVENT_DISPLAY_MESSAGE_REQUEST, \"changesSaved\");\n                },\n                onError = function (model, response) {\n                    Messages.addMessage({\n                        response,\n                        type: Messages.TYPE_DANGER\n                    });\n                };\n\n            this.model.destroy({\n                success: onSuccess,\n                error: onError,\n                wait: true\n            });\n        },\n\n        updateFields () {\n            const dataFields = this.$el.find(\"[data-field]\");\n\n            _.each(dataFields, (field) => {\n                const dataField = field.getAttribute(\"data-field\");\n\n                if (field.type === \"checkbox\") {\n                    if (field.checked) {\n                        this.data.entity[dataField].push(field.value);\n                    }\n                } else {\n                    this.data.entity[dataField] = _.trim(field.value);\n                }\n            });\n        }\n    });\n});\n"]}