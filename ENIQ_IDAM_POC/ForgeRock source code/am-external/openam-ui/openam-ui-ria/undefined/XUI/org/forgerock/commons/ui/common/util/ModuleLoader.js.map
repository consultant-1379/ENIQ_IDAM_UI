{"version":3,"sources":["../../../../../../../XUI/org/forgerock/commons/ui/common/util/ModuleLoader.js"],"names":["define","$","load","libPath","promise","Deferred","require","resolve","e","reject","promiseWrapper","functionToCall","params","handler","response","undefined","when","success","apply","window","arguments","error","then"],"mappings":";;AAAA;;;;;;;;;;;;;;;AAeA;AACCA,OAAO,CACJ,QADI,CAAP,EAEE,UAAUC,CAAV,EAAa;;AAEZ,WAAO;AACHC,cAAM,cAAUC,OAAV,EAAmB;AACrB,gBAAIC,UAAUH,EAAEI,QAAF,EAAd;;AAEA,gBAAI;AACAC,wBAAQ,CAACH,OAAD,CAAR,EAAmBC,QAAQG,OAA3B;AACH,aAFD,CAEE,OAAOC,CAAP,EAAU;AACRJ,wBAAQK,MAAR,CAAeD,CAAf;AACH;;AAED,mBAAOJ,OAAP;AACH,SAXE;;AAaH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuCAM,wBAAgB,wBAAUC,cAAV,EAA0BC,MAA1B,EAAkC;AAC9C,gBAAIR,UAAUH,EAAEI,QAAF,EAAd;AAAA,gBACIQ,UAAU,SAAVA,OAAU,CAAUC,QAAV,EAAoB;AAC1B,uBAAOA,aAAaC,SAAb,GAAyBD,QAAzB,GAAoCV,OAA3C;AACH,aAHL;;AAKA;AACA;AACA,mBAAOH,EAAEe,IAAF,CAAOL,eAAe,YAAY;AACrC,oBAAIC,UAAUA,OAAOK,OAArB,EAA8B;AAC1BL,2BAAOK,OAAP,CAAeC,KAAf,CAAqBC,MAArB,EAA6BC,SAA7B;AACH;AACDhB,wBAAQG,OAAR,CAAgBW,KAAhB,CAAsBd,OAAtB,EAA+BgB,SAA/B;AACH,aALa,EAKX,YAAY;AACX,oBAAIR,UAAUA,OAAOS,KAArB,EAA4B;AACxBT,2BAAOS,KAAP,CAAaH,KAAb,CAAmBC,MAAnB,EAA2BC,SAA3B;AACH;AACDhB,wBAAQK,MAAR,CAAeS,KAAf,CAAqBd,OAArB,EAA8BgB,SAA9B;AACH,aAVa,CAAP,EAUHE,IAVG,CAUET,OAVF,EAUWA,OAVX,CAAP;AAWH;;AAvEE,KAAP;AA0EH,CA9EA","file":"ModuleLoader.js","sourcesContent":["/**\r\n * The contents of this file are subject to the terms of the Common Development and\r\n * Distribution License (the License). You may not use this file except in compliance with the\r\n * License.\r\n *\r\n * You can obtain a copy of the License at legal/CDDLv1.0.txt. See the License for the\r\n * specific language governing permission and limitations under the License.\r\n *\r\n * When distributing Covered Software, include this CDDL Header Notice in each file and include\r\n * the License file at legal/CDDLv1.0.txt. If applicable, add the following below the CDDL\r\n * Header, with the fields enclosed by brackets [] replaced by your own identifying\r\n * information: \"Portions copyright [year] [name of copyright owner]\".\r\n *\r\n * Copyright 2015-2016 ForgeRock AS.\r\n */\r\n/* eslint-disable */\r\n define([\r\n    \"jquery\"\r\n], function ($) {\r\n\r\n    return {\r\n        load: function (libPath) {\r\n            var promise = $.Deferred();\r\n\r\n            try {\r\n                require([libPath], promise.resolve);\r\n            } catch (e) {\r\n                promise.reject(e);\r\n            }\r\n\r\n            return promise;\r\n        },\r\n\r\n        /**\r\n        * Facility to assist migration from callback-based functions to promise-based ones\r\n        *\r\n        * Many legacy functions exist which are of the style func(successCallback, errorCallback).\r\n        * These functions do not return anything; instead they invoke the appropriate callback function\r\n        * and pass it whatever result they eventually have to provide.\r\n        *\r\n        * This style of function is not particularly easy to work with in the context of a promise.\r\n        * To make these functions easier to work with, this promiseWrapper function exists. It returns a\r\n        * promise which is only resolved or rejected when the success or error callback (respectively) is called.\r\n        *\r\n        * If the functionToCall does actually return something (presumably a promise but not necessarily) then\r\n        * whatever was returned will be used to resolve the promise returned from this function.\r\n        *\r\n        * The second argument to this function is \"params\" - it is an optional object which may contain\r\n        * \"success\" and \"error\" callbacks. This is to continue to provide the legact callback support, if it is desired.\r\n        *\r\n        * Example:\r\n\r\n            function login(credentials, successCallback, errorCallback) {\r\n                // try logging in\r\n                // if successful: successCallback(userDetails);\r\n                // else : errorCallback(failureDetails);\r\n            }\r\n\r\n            var creds = { \"userName\": \"foo\", \"password\": \"bar\" };\r\n\r\n            ModuleLoader.promiseWrapper(_.curry(login)(creds)).then(\r\n                function (user) {\r\n                    console.log(\"Successfully logged in with user\", user);\r\n                },\r\n                function (failureDetails) {\r\n                    console.log(\"Failed to login\", failureDetails);\r\n                }\r\n            );\r\n\r\n        * Note the use of _.curry above. This is necessary because the function that you may wish to invoke\r\n        * requires other arguments in addition to the two callbacks (such as the credentials in that sample).\r\n        */\r\n        promiseWrapper: function (functionToCall, params) {\r\n            var promise = $.Deferred(),\r\n                handler = function (response) {\r\n                    return response !== undefined ? response : promise;\r\n                };\r\n\r\n            // assumes the functionToCall has two remaining (non-curried) parameters to pass into it, the success and\r\n            // failure handlers\r\n            return $.when(functionToCall(function () {\r\n                if (params && params.success) {\r\n                    params.success.apply(window, arguments);\r\n                }\r\n                promise.resolve.apply(promise, arguments);\r\n            }, function () {\r\n                if (params && params.error) {\r\n                    params.error.apply(window, arguments);\r\n                }\r\n                promise.reject.apply(promise, arguments);\r\n            })).then(handler, handler);\r\n        }\r\n\r\n    };\r\n});"]}