{"version":3,"sources":["../../../../../../../XUI/org/forgerock/openam/ui/common/models/JSONValues.js"],"names":["define","_","groupTopLevelSimpleValues","raw","collectionProperties","pick","property","isObject","isArray","keys","value","simplePropertiesToGroup","omit","prop","key","startsWith","indexOf","isEmpty","values","global","ungroupCollectionProperties","groupKey","collectionPropertiesKeys","allPropertiesKeys","defaults","nonGroupedProperties","difference","console","warn","isCollection","schema","has","properties","hasDefaults","hasDynamic","Object","freeze","addInheritance","inheritance","valuesWithInheritance","mapValues","inherited","JSONValues","addValueForKey","path","clone","cloneDeep","extend","object","mapProperties","iteratee","parentValue","parentKey","getEmptyValueKeys","isNumber","isBoolean","forIn","push","predicate","removeInheritance","removeNullPasswords","jsonSchema","isNullPassword","isNull","get","omitNullPasswords","reduce","result","hasInheritance","nullifyEmptyPasswords","passwords","isEmptyPassword","revertFalseCollections","_defaultsCollectionProperties","falseCollections","forEach","length","assign","toJSON","json","wrapCollectionProperties","propertyKey","data","collectionPropertiesPresent","JSON","stringify"],"mappings":"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","file":"JSONValues.js","sourcesContent":["/*\n * The contents of this file are subject to the terms of the Common Development and\n * Distribution License (the License). You may not use this file except in compliance with the\n * License.\n *\n * You can obtain a copy of the License at legal/CDDLv1.0.txt. See the License for the\n * specific language governing permission and limitations under the License.\n *\n * When distributing Covered Software, include this CDDL Header Notice in each file and include\n * the License file at legal/CDDLv1.0.txt. If applicable, add the following below the CDDL\n * Header, with the fields enclosed by brackets [] replaced by your own identifying\n * information: \"Portions copyright [year] [name of copyright owner]\".\n *\n * Copyright 2016-2017 ForgeRock AS.\n */\n\n/**\n * Refer to the following naming convention, when adding new functions to this class:\n * <p/>\n * <h2>Function naming conventions</h2>\n * Refer to the following naming convention, when adding new functions to this class:\n * <ul>\n *   <li>For <strong>query</strong> functions, which do not return a new instance of <code>JSONSchema</code>, use <code>#get*</code></li>\n *   <li>For <strong>transform</strong> functions, which do not loose data, use <code>#to*</code> and <code>#from*</code></li>\n *   <li>For <strong>modification</strong> functions, which loose the data, use <code>add*</code> and <code>#remove*</code></li>\n *   <li>For functions, which <strong>check for presense</strong>, use <code>#has*</code> and <code>#is*</code></li>\n *   <li>For <strong>utility</strong> functions use simple verbs, e.g. <code>#omit</code>, <code>#pick</code>, etc.</li>\n * </ul>\n * @module\n * @example\n * // The structure of JSON Value documents emitted from OpenAM is expected to be the following:\n * {\n *   {\n *     globalProperty: true, // Global values (OpenAM wide) are listed at the top-level\n *     default: { ... }, // Default values are organisation (Realm) level values and are nested under \"default\"\n *     dynamic: { ... } // Dynamic values are user level values (OpenAM wide) and are nested under \"dynamic\"\n *   }\n * }\n */\ndefine([\n    \"lodash\"\n], (_) => {\n    function groupTopLevelSimpleValues (raw) {\n        const collectionProperties = _(raw)\n            .pick((property) => _.isObject(property) && !_.isArray(property))\n            .keys()\n            .value();\n\n        const simplePropertiesToGroup = _.omit(raw, (prop, key) => {\n            return _.startsWith(key, \"_\") || key === \"defaults\" || collectionProperties.indexOf(key) !== -1;\n        });\n\n        if (_.isEmpty(simplePropertiesToGroup)) {\n            return raw;\n        }\n\n        const values = {\n            ..._.omit(raw, _.keys(simplePropertiesToGroup)),\n            global: simplePropertiesToGroup\n        };\n\n        return values;\n    }\n\n    /**\n    * Ungroups collection properties, moving them one level up.\n    *\n    * @param   {Object} raw Values\n    * @param   {string} groupKey Group key of the property value object\n    * @returns {JSONValues} JSONValues object with new value set\n    */\n    function ungroupCollectionProperties (raw, groupKey) {\n        const collectionProperties = _.pick(raw[groupKey], (value) => {\n            return _.isObject(value) && !_.isArray(value);\n        });\n\n        if (_.isEmpty(collectionProperties)) {\n            return raw;\n        }\n\n        const collectionPropertiesKeys = _.keys(collectionProperties);\n        const allPropertiesKeys = _.keys(raw.defaults);\n        const nonGroupedProperties = _.difference(allPropertiesKeys, collectionPropertiesKeys);\n\n        if (!_.isEmpty(nonGroupedProperties)) {\n            console.warn(`Detected properties which do not belong to any group: [${nonGroupedProperties}]. ` +\n                \"They will be displayed under the 'Realm Defaults' tab\");\n        }\n\n        const values = { ...raw, ...collectionProperties };\n\n        values[`_${groupKey}CollectionProperties`] = collectionPropertiesKeys;\n        values[groupKey] = _.omit(values[groupKey], collectionPropertiesKeys);\n\n        if (_.isEmpty(values[groupKey])) {\n            delete values[groupKey];\n        }\n\n        return values;\n    }\n\n    function isCollection (schema, key) {\n        return _.has(schema.properties[key], \"properties\");\n    }\n\n    return class JSONValues {\n        constructor (values) {\n            const hasDefaults = _.has(values, \"defaults\");\n            const hasDynamic = _.has(values, \"dynamic\");\n\n            if (hasDefaults || hasDynamic) {\n                values = groupTopLevelSimpleValues(values);\n            }\n\n            if (hasDefaults) {\n                values = ungroupCollectionProperties(values, \"defaults\");\n            }\n\n            this.raw = Object.freeze(values);\n        }\n        addInheritance (inheritance) {\n            const valuesWithInheritance = _.mapValues(this.raw, (value, key) => {\n                return _.has(inheritance[key], \"inherited\")\n                    ? { value, inherited: inheritance[key].inherited }\n                    : value;\n            });\n\n            return new JSONValues(valuesWithInheritance);\n        }\n        /**\n         * Adds value for the property.\n         *\n         * @param   {string} path Property key\n         * @param   {string} key Key of the property value object\n         * @param   {string} value Value to be set\n         * @returns {JSONValues} JSONValues object with new value set\n         */\n        addValueForKey (path, key, value) {\n            const clone = _.cloneDeep(this.raw);\n            clone[path][key] = value;\n            return new JSONValues(clone);\n        }\n        extend (object) {\n            return new JSONValues(_.extend({}, this.raw, object));\n        }\n        /**\n         * Creates a JSONValues object with the same keys as this JSONValues object and values generated by running each property through iteratee.\n         * \"Properties\" are defined as the leafs of the object, for values without inheritance information this will be the raw primitive value, for\n         * values with inheritance information this will be an Object with value and inherited attributes.\n         * <p/>\n         * iteratee Function signiture is similar to #mapValues except the key is the full key within the JSONValues object. e.g.\n         * @param   {Function} iteratee The function invoked per property iteration.\n         * @returns {JSONValues} Returns the new mapped JSONValues.\n         * @example values.mapProperties((value, key) => { ... } => value = { ... } or primate, key = \"some.key\"\n         */\n        mapProperties (iteratee) {\n            return new JSONValues(_.mapValues(this.raw, (parentValue, parentKey) => {\n                if (_.startsWith(parentKey, \"_\")) {\n                    return parentValue;\n                } else {\n                    return _.mapValues(parentValue, (value, key, object) => {\n                        return iteratee(value, `${parentKey}.${key}`, object);\n                    });\n                }\n            }));\n        }\n        getEmptyValueKeys () {\n            function isEmpty (value) {\n                if (_.isNumber(value)) {\n                    return false;\n                } else if (_.isBoolean(value)) {\n                    return false;\n                }\n\n                return _.isEmpty(value);\n            }\n\n            const keys = [];\n\n            _.forIn(this.raw, (value, key) => {\n                if (isEmpty(value)) {\n                    keys.push(key);\n                }\n            });\n\n            return keys;\n        }\n        omit (predicate) {\n            return new JSONValues(_.omit(this.raw, predicate));\n        }\n        pick (predicate) {\n            return new JSONValues(_.pick(this.raw, predicate));\n        }\n        removeInheritance () {\n            return new JSONValues(_.mapValues(this.raw, (property) => {\n                return _.has(property, \"value\") ? property.value : property;\n            }));\n        }\n        /**\n         * Returns a new JSONValues object with any null password properties that have inheritance (either on or off)\n         * with the value removed, or any null password properties that do not have inheritance removed completely.\n         *\n         * @param   {JSONSchema} jsonSchema Corresponding JSONSchema object\n         * @returns {JSONValues} a new JSONValues Object\n         * @example\n         * const schema = new JSONSchema(...);\n         * const values = new JSONValues({\n         *      \"property.1\": \"test\",\n         *      \"password.2\": \"password\",\n         *      \"password.3\": null,\n         *      \"password.4\": { value: null, inherited: true },\n         *      \"password.5\": { value: null, inherited: false },\n         *      \"password.6\": { value: \"password\", inherited: false }\n         *      \"collection.prop.1\": {\n         *          \"property.1\": \"test\",\n         *          \"password.2\": \"password\",\n         *          \"password.3\": null,\n         *          \"password.4\": { value: null, inherited: true },\n         *          \"password.5\": { value: null, inherited: false },\n         *          \"password.6\": { value: \"password\", inherited: false }\n         *      },\n         *      \"not.in.schema.1\": \"value\"\n         *      \"not.in.schema.2\": {\n         *          \"password.1\": { value: \"password\", inherited: false },\n         *          \"password.2\": null, inherited: false\n         *      }\n         * });\n         *\n         * values.removeNullPasswords(schema); // => {\n         *      \"property.1\": \"test\",\n         *      \"password.2\": \"password\",\n         *      \"password.4\": { inherited: true },\n         *      \"password.5\": { inherited: false },\n         *      \"password.6\": { value: \"password\" }\n         *      \"collection.prop.1\": {\n         *          \"property.1\": \"test\",\n         *          \"password.2\": \"password\",\n         *          \"password.4\": { inherited: true },\n         *          \"password.5\": { inherited: false },\n         *          \"password.6\": { value: \"password\", inherited: false }\n         *      },\n         *      \"not.in.schema.1\": \"value\"\n         *      \"not.in.schema.2\": {\n         *          \"password.1\": { value: \"password\", inherited: false },\n         *          \"password.2\": null, inherited: false\n         *      }\n         * });\n         */\n        removeNullPasswords (jsonSchema) {\n            const isNullPassword = (value, schema, path) => _.isNull(value) && _.get(schema, path) === \"password\";\n            const omitNullPasswords = (values, schema) => {\n                return _.reduce(values, (result, value, key) => {\n                    if (jsonSchema.hasInheritance(schema.properties[key])) {\n                        result[key] = isNullPassword(value.value, schema.properties[key], \"properties.value.format\")\n                            ? { inherited: value.inherited } // return only the inheritance flag\n                            : value;\n                    } else if (isCollection(schema, key)) {\n                        result[key] = omitNullPasswords(value, schema.properties[key]);\n                    } else if (isNullPassword(value, schema.properties[key], \"format\")) {\n                        // We explicitly do not include null passwords\n                    } else {\n                        result[key] = value;\n                    }\n                    return result;\n                }, {});\n            };\n\n            return new JSONValues(omitNullPasswords(this.raw, jsonSchema.raw));\n        }\n        /**\n         * Returns a new JSONValues object with all it's empty passwords set to null.\n         *\n         * @param   {string[]} passwords An array of password property keys\n         * @returns {JSONValues} a new JSONValues Object with any empty passwords set to null\n         */\n        nullifyEmptyPasswords (passwords) {\n            return new JSONValues(_.mapValues(this.raw, (value, key) => {\n                const isEmptyPassword = passwords.indexOf(key) !== -1 && _.isEmpty(value);\n                return isEmptyPassword ? null : value;\n            }));\n        }\n        /**\n         * @see OPENAM-10769. The problem is in the initial transformation of the values object. The values are transformed\n         * in isolation with the corresponding schema. This might result in a problem, when field properties\n         * are recognised as collection properties and are transformed to display them as tabs on the UI. This method reverts false\n         * collection properties back into the field properties (initial pre-transformation state). This is a workaround\n         * that we are hoping to get rid of when we switch to a better json schema library.\n         * Note: JSONValues field properties and collection properties have the same structure, so there is no way\n         * to distinguish between them. Only JSONSchema has enough knowledge to distinguish these two.\n         * This is a mutating function.\n         *\n         * @param   {JSONSchema} schema Corresponding JSONSchema object\n         * @returns {JSONValues} JSONValues object (\"this\" mutated)\n         */\n        revertFalseCollections (schema) {\n            let raw = _.cloneDeep(this.raw);\n\n            if (raw._defaultsCollectionProperties) {\n                const falseCollections = [];\n\n                // generate a list of false collection properties based on schema\n                _.forEach(raw._defaultsCollectionProperties, (property) => {\n                    if (!isCollection(schema.raw, property)) {\n                        falseCollections.push(property);\n                    }\n                });\n\n                if (falseCollections.length) {\n                    // remove false collection properties from the list of collections keys\n                    raw._defaultsCollectionProperties =\n                        _.difference(raw._defaultsCollectionProperties, falseCollections);\n                    if (_.isEmpty(raw._defaultsCollectionProperties)) {\n                        delete raw._defaultsCollectionProperties;\n                    }\n\n                    // re-generate \"defaults\" property as it may have been removed if all its properties are field properies\n                    if (!_.has(raw, \"defaults\")) {\n                        raw.defaults = {};\n                    }\n\n                    // assign field properties back into the \"defaults\" property\n                    _.assign(raw.defaults, _.pick(raw, falseCollections));\n                    raw = _.omit(raw, falseCollections);\n                }\n            }\n\n            this.raw = Object.freeze(raw);\n\n            return this;\n        }\n        toJSON () {\n            let json = _.cloneDeep(this.raw);\n\n            const wrapCollectionProperties = (json, propertyKey) => {\n                let data = _.cloneDeep(json);\n\n                const collectionPropertiesKeys = data[`_${propertyKey}CollectionProperties`];\n                const collectionProperties = _.pick(data, collectionPropertiesKeys);\n                data[propertyKey] = { ...data[propertyKey], ...collectionProperties };\n                data = _.omit(data, collectionPropertiesKeys);\n\n                return data;\n            };\n\n            const collectionPropertiesPresent = (json, propertyKey) => {\n                const collectionPropertiesKeys = json[`_${propertyKey}CollectionProperties`];\n                return collectionPropertiesKeys && !_.isEmpty(collectionPropertiesKeys);\n            };\n\n            if (collectionPropertiesPresent(json, \"defaults\")) {\n                json = wrapCollectionProperties(json, \"defaults\");\n                delete json._defaultsCollectionProperties;\n            }\n\n            json = { ...json, ...json.global };\n            delete json.global;\n\n            return JSON.stringify(json);\n        }\n    };\n});\n"]}