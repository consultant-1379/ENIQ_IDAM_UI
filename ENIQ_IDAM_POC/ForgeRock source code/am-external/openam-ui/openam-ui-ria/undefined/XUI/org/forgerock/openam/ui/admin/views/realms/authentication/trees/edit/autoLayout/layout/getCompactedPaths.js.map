{"version":3,"sources":["../../../../../../../../../../../../../XUI/org/forgerock/openam/ui/admin/views/realms/authentication/trees/edit/autoLayout/layout/getCompactedPaths.jsm"],"names":["getCompactedPaths","paths","connectedNodes","map","row","compactedPath","node","push","length","compact","value"],"mappings":";;;;;;;;AAkBA;;;;;;;AAOA,QAAMA,oBAAoB,SAApBA,iBAAoB,CAACC,KAAD,EAAW;AACjC,YAAMC,iBAAiB,EAAvB;;AAEA,eAAO,mBAAMD,KAAN,EACFE,GADE,CACE,UAACC,GAAD,EAAS;AACV,gBAAMC,gBAAgB,iBAAID,GAAJ,EAAS,UAACE,IAAD,EAAU;AACrC,oBAAI,uBAAUJ,cAAV,EAA0BI,IAA1B,MAAoC,CAAC,CAAzC,EAA4C;AACxCJ,mCAAeK,IAAf,CAAoBD,IAApB;AACA,2BAAOA,IAAP;AACH,iBAHD,MAGO;AACH,2BAAO,IAAP;AACH;AACJ,aAPqB,CAAtB;;AASA,mBAAO,oBAAOD,aAAP,EAAsB,UAACC,IAAD;AAAA,uBAAU,CAAC,qBAAQA,IAAR,CAAX;AAAA,aAAtB,EAAgDE,MAAhD,GAAyD,CAAzD,GACDH,aADC,GAED,IAFN;AAGH,SAdE,EAeFI,OAfE,GAgBFC,KAhBE,EAAP;AAiBH,KApBD,C,CAzBA;;;;;;;;;;;;;;;;sBA+CeV,iB","file":"getCompactedPaths.js","sourcesContent":["/*\n * The contents of this file are subject to the terms of the Common Development and\n * Distribution License (the License). You may not use this file except in compliance with the\n * License.\n *\n * You can obtain a copy of the License at legal/CDDLv1.0.txt. See the License for the\n * specific language governing permission and limitations under the License.\n *\n * When distributing Covered Software, include this CDDL Header Notice in each file and include\n * the License file at legal/CDDLv1.0.txt. If applicable, add the following below the CDDL\n * Header, with the fields enclosed by brackets [] replaced by your own identifying\n * information: \"Portions copyright [year] [name of copyright owner]\".\n *\n * Copyright 2017 ForgeRock AS.\n */\n\nimport { chain, filter, findIndex, isEmpty, map } from \"lodash\";\n\n/**\n * Takes an array of all possible paths and removes repeating nodes, so they are not rendered several times. Returns\n * <code>null</code> in place of removed nodes.\n *\n * @param {Array[]} paths array of all possible paths\n * @returns {Array[]} array of compacted paths\n */\nconst getCompactedPaths = (paths) => {\n    const connectedNodes = [];\n\n    return chain(paths)\n        .map((row) => {\n            const compactedPath = map(row, (node) => {\n                if (findIndex(connectedNodes, node) === -1) {\n                    connectedNodes.push(node);\n                    return node;\n                } else {\n                    return null;\n                }\n            });\n\n            return filter(compactedPath, (node) => !isEmpty(node)).length > 0\n                ? compactedPath\n                : null;\n        })\n        .compact()\n        .value();\n};\n\nexport default getCompactedPaths;\n"]}