{"version":3,"sources":["../../../../../../../XUI/org/forgerock/commons/ui/common/main/EventManager.js"],"names":["define","$","_","obj","eventRegistry","subscriptions","sendEvent","eventId","event","when","apply","map","eventHandler","promise","Deferred","window","setTimeout","always","resolve","then","has","registerListener","callback","push","unregisterListener","callbackToRemove","undefined","omit","whenComplete"],"mappings":";;AAAA;;;;;;;;;;;;;;;AAeA;AACCA,OAAO,CAAC,QAAD,EAAW,YAAX,CAAP,EAAiC,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AAC7C,QAAIC,MAAM,EAAV;AAAA,QACIC,gBAAgB,EADpB;AAAA,QAEIC,gBAAgB,EAFpB;;AAIAF,QAAIG,SAAJ,GAAgB,UAAUC,OAAV,EAAmBC,KAAnB,EAA0B;AACtC,eAAOP,EAAEQ,IAAF,CACLC,KADK,CAEFT,CAFE,EAIFC,EAAES,GAAF,CAAMP,cAAcG,OAAd,CAAN,EAA8B,UAAUK,YAAV,EAAwB;AAClD,gBAAIC,UAAUZ,EAAEa,QAAF,EAAd;AACAC,mBAAOC,UAAP,CAAkB,YAAY;AAC1Bf,kBAAEQ,IAAF,CAAOG,aAAaJ,KAAb,CAAP,EAA4BS,MAA5B,CAAmCJ,QAAQK,OAA3C;AACH,aAFD;AAGA,mBAAOL,OAAP;AACH,SAND,CAJE,EAYLM,IAZK,CAYA,YAAY;AACd,gBAAIN,OAAJ;AACA,gBAAIX,EAAEkB,GAAF,CAAMf,aAAN,EAAqBE,OAArB,CAAJ,EAAmC;AAC/BM,0BAAUR,cAAcE,OAAd,CAAV;AACA,uBAAOF,cAAcE,OAAd,CAAP;AACAM,wBAAQK,OAAR;AACH;AACD;AACH,SApBK,CAAP;AAqBH,KAtBD;;AAwBAf,QAAIkB,gBAAJ,GAAuB,UAAUd,OAAV,EAAmBe,QAAnB,EAA6B;AAChD,YAAI,CAACpB,EAAEkB,GAAF,CAAMhB,aAAN,EAAqBG,OAArB,CAAL,EAAoC;AAChCH,0BAAcG,OAAd,IAAyB,CAACe,QAAD,CAAzB;AACH,SAFD,MAEO;AACHlB,0BAAcG,OAAd,EAAuBgB,IAAvB,CAA4BD,QAA5B;AACH;AACJ,KAND;;AAQAnB,QAAIqB,kBAAJ,GAAyB,UAAUjB,OAAV,EAAmBkB,gBAAnB,EAAqC;AAC1D,YAAIvB,EAAEkB,GAAF,CAAMhB,aAAN,EAAqBG,OAArB,CAAJ,EAAmC;AAC/B,gBAAIkB,qBAAqBC,SAAzB,EAAoC;AAChCtB,8BAAcG,OAAd,IAAyBL,EAAEyB,IAAF,CACrBvB,cAAcG,OAAd,CADqB,EAErB,UAAUe,QAAV,EAAoB;AAChB,2BAAOA,aAAaG,gBAApB;AACH,iBAJoB,CAAzB;AAMH,aAPD,MAOO;AACH,uBAAOrB,cAAcG,OAAd,CAAP;AACH;AACJ;AACJ,KAbD;;AAeH;;;AAGGJ,QAAIyB,YAAJ,GAAmB,UAAUrB,OAAV,EAAmB;AAClC,YAAI,CAACL,EAAEkB,GAAF,CAAMf,aAAN,EAAqBE,OAArB,CAAL,EAAoC;AAChCF,0BAAcE,OAAd,IAAyBN,EAAEa,QAAF,EAAzB;AACH;AACD,eAAOT,cAAcE,OAAd,CAAP;AACH,KALD;;AAOA,WAAOJ,GAAP;AACH,CA/DD","file":"EventManager.js","sourcesContent":["/**\r\n * The contents of this file are subject to the terms of the Common Development and\r\n * Distribution License (the License). You may not use this file except in compliance with the\r\n * License.\r\n *\r\n * You can obtain a copy of the License at legal/CDDLv1.0.txt. See the License for the\r\n * specific language governing permission and limitations under the License.\r\n *\r\n * When distributing Covered Software, include this CDDL Header Notice in each file and include\r\n * the License file at legal/CDDLv1.0.txt. If applicable, add the following below the CDDL\r\n * Header, with the fields enclosed by brackets [] replaced by your own identifying\r\n * information: \"Portions copyright [year] [name of copyright owner]\".\r\n *\r\n * Copyright 2011-2016 ForgeRock AS.\r\n */\r\n/* eslint-disable */\r\n define([\"jquery\", \"underscore\"], function ($, _) {\r\n     var obj = {},\r\n         eventRegistry = {},\r\n         subscriptions = {};\r\n\r\n     obj.sendEvent = function (eventId, event) {\r\n         return $.when\r\n          .apply(\r\n              $,\r\n\r\n              _.map(eventRegistry[eventId], function (eventHandler) {\r\n                  var promise = $.Deferred();\r\n                  window.setTimeout(function () {\r\n                      $.when(eventHandler(event)).always(promise.resolve);\r\n                  });\r\n                  return promise;\r\n              })\r\n          )\r\n          .then(function () {\r\n              var promise;\r\n              if (_.has(subscriptions, eventId)) {\r\n                  promise = subscriptions[eventId];\r\n                  delete subscriptions[eventId];\r\n                  promise.resolve();\r\n              }\r\n              return;\r\n          });\r\n     };\r\n\r\n     obj.registerListener = function (eventId, callback) {\r\n         if (!_.has(eventRegistry, eventId)) {\r\n             eventRegistry[eventId] = [callback];\r\n         } else {\r\n             eventRegistry[eventId].push(callback);\r\n         }\r\n     };\r\n\r\n     obj.unregisterListener = function (eventId, callbackToRemove) {\r\n         if (_.has(eventRegistry, eventId)) {\r\n             if (callbackToRemove !== undefined) {\r\n                 eventRegistry[eventId] = _.omit(\r\n                     eventRegistry[eventId],\r\n                     function (callback) {\r\n                         return callback === callbackToRemove;\r\n                     }\r\n                 );\r\n             } else {\r\n                 delete eventRegistry[eventId];\r\n             }\r\n         }\r\n     };\r\n\r\n  /**\r\n   * Returns a promise that will be resolved the next time the provided event_Id has completed processing.\r\n   */\r\n     obj.whenComplete = function (eventId) {\r\n         if (!_.has(subscriptions, eventId)) {\r\n             subscriptions[eventId] = $.Deferred();\r\n         }\r\n         return subscriptions[eventId];\r\n     };\r\n\r\n     return obj;\r\n });\r\n"]}