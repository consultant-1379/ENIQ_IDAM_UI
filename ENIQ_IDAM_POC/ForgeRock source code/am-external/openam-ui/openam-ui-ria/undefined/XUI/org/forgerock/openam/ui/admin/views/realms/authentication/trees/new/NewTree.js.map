{"version":3,"sources":["../../../../../../../../../../../XUI/org/forgerock/openam/ui/admin/views/realms/authentication/trees/new/NewTree.jsx"],"names":["NewTree","props","handleCreate","bind","setRef","jsonSchemaView","template","schema","values","showOnlyRequiredAndEmpty","jsonForm","appendChild","render","el","onCreate","getData","element","footer","isCreateAllowed","content","isFetching","onTreeNameChange","treeName","propTypes","bool","isRequired","func","objectOf","object","string"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;QA4BMA,O;;;AACF,yBAAaC,KAAb,EAAoB;AAAA;;AAAA,0HACVA,KADU;;AAEhB,kBAAKC,YAAL,GAAoB,MAAKA,YAAL,CAAkBC,IAAlB,OAApB;AACA,kBAAKC,MAAL,GAAc,MAAKA,MAAL,CAAYD,IAAZ,OAAd;AAHgB;AAInB;;;;iDAEqB;AAClB,oBAAI,CAAC,KAAKE,cAAN,IAAwB,KAAKJ,KAAL,CAAWK,QAAvC,EAAiD;AAC7C,yBAAKD,cAAL,GAAsB,iCAAuB;AACzCE,gCAAQ,yBAAe,KAAKN,KAAL,CAAWM,MAA1B,CADiC;AAEzCC,gCAAQ,yBAAe,KAAKP,KAAL,CAAWK,QAA1B,CAFiC;AAGzCG,kDAA0B;AAHe,qBAAvB,CAAtB;AAKA,yBAAKC,QAAL,CAAcC,WAAd,CAA0B,KAAKN,cAAL,CAAoBO,MAApB,GAA6BC,EAAvD;AACH;AACJ;;;2CAEe;AACZ,qBAAKZ,KAAL,CAAWa,QAAX,CAAoB,KAAKT,cAAL,CAAoBU,OAApB,EAApB;AACH;;;mCAEOC,O,EAAS;AACb,qBAAKN,QAAL,GAAgBM,OAAhB;AACH;;;qCAES;AACN,oBAAMC,SACF;AACI,mCAAgB,CAAC,KAAKhB,KAAL,CAAWiB,eADhC;AAEI,mCAAgB,KAAKhB;AAFzB,kBADJ;;AAOA,oBAAMiB,UAAU,KAAKlB,KAAL,CAAWmB,UAAX,GACV,sDADU,GAGR;AAAA;AAAA;AACI;AACI,0CAAmB,KAAKnB,KAAL,CAAWoB,gBADlC;AAEI,kCAAW,KAAKpB,KAAL,CAAWqB;AAF1B,sBADJ;AAKI,2DAAK,KAAM,KAAKlB,MAAhB;AALJ,iBAHR;;AAYA,uBACI;AAAA;AAAA;AACI,0EAAY,OAAQ,gBAAE,wCAAF,CAApB,GADJ;AAEI;AAAA;AAAA,0BAAO,QAASa,MAAhB;AACME;AADN;AAFJ,iBADJ;AAQH;;;;;;AAGLnB,YAAQuB,SAAR,GAAoB;AAChBL,yBAAiB,iBAAUM,IAAV,CAAeC,UADhB;AAEhBL,oBAAY,iBAAUI,IAAV,CAAeC,UAFX;AAGhBX,kBAAU,iBAAUY,IAAV,CAAeD,UAHT;AAIhBJ,0BAAkB,iBAAUK,IAAV,CAAeD,UAJjB;AAKhBlB,gBAAQ,iBAAUoB,QAAV,CAAmB,iBAAUC,MAA7B,EAAqCH,UAL7B;AAMhBnB,kBAAU,iBAAUqB,QAAV,CAAmB,iBAAUC,MAA7B,EAAqCH,UAN/B;AAOhBH,kBAAU,iBAAUO,MAAV,CAAiBJ;AAPX,KAApB;;sBAUezB,O","file":"NewTree.js","sourcesContent":["/*\n * The contents of this file are subject to the terms of the Common Development and\n * Distribution License (the License). You may not use this file except in compliance with the\n * License.\n *\n * You can obtain a copy of the License at legal/CDDLv1.0.txt. See the License for the\n * specific language governing permission and limitations under the License.\n *\n * When distributing Covered Software, include this CDDL Header Notice in each file and include\n * the License file at legal/CDDLv1.0.txt. If applicable, add the following below the CDDL\n * Header, with the fields enclosed by brackets [] replaced by your own identifying\n * information: \"Portions copyright [year] [name of copyright owner]\".\n *\n * Copyright 2017 ForgeRock AS.\n */\n\nimport { Panel } from \"react-bootstrap\";\nimport { t } from \"i18next\";\nimport React, { Component, PropTypes } from \"react\";\n\nimport FlatJSONSchemaView from \"org/forgerock/openam/ui/common/views/jsonSchema/FlatJSONSchemaView\";\nimport JSONSchema from \"org/forgerock/openam/ui/common/models/JSONSchema\";\nimport JSONValues from \"org/forgerock/openam/ui/common/models/JSONValues\";\nimport Loading from \"components/Loading\";\nimport NewTreeFooter from \"./NewTreeFooter\";\nimport NewTreeNameInput from \"./NewTreeNameInput\";\nimport PageHeader from \"components/PageHeader\";\n\nclass NewTree extends Component {\n    constructor (props) {\n        super(props);\n        this.handleCreate = this.handleCreate.bind(this);\n        this.setRef = this.setRef.bind(this);\n    }\n\n    componentDidUpdate () {\n        if (!this.jsonSchemaView && this.props.template) {\n            this.jsonSchemaView = new FlatJSONSchemaView({\n                schema: new JSONSchema(this.props.schema),\n                values: new JSONValues(this.props.template),\n                showOnlyRequiredAndEmpty: true\n            });\n            this.jsonForm.appendChild(this.jsonSchemaView.render().el);\n        }\n    }\n\n    handleCreate () {\n        this.props.onCreate(this.jsonSchemaView.getData());\n    }\n\n    setRef (element) {\n        this.jsonForm = element;\n    }\n\n    render () {\n        const footer = (\n            <NewTreeFooter\n                disableCreate={ !this.props.isCreateAllowed }\n                onCreateClick={ this.handleCreate }\n            />\n        );\n\n        const content = this.props.isFetching\n            ? <Loading />\n            : (\n                <div>\n                    <NewTreeNameInput\n                        onTreeNameChange={ this.props.onTreeNameChange }\n                        treeName={ this.props.treeName }\n                    />\n                    <div ref={ this.setRef } />\n                </div>\n            );\n\n        return (\n            <div>\n                <PageHeader title={ t(\"console.authentication.trees.new.title\") } />\n                <Panel footer={ footer }>\n                    { content }\n                </Panel>\n            </div>\n        );\n    }\n}\n\nNewTree.propTypes = {\n    isCreateAllowed: PropTypes.bool.isRequired,\n    isFetching: PropTypes.bool.isRequired,\n    onCreate: PropTypes.func.isRequired,\n    onTreeNameChange: PropTypes.func.isRequired,\n    schema: PropTypes.objectOf(PropTypes.object).isRequired,\n    template: PropTypes.objectOf(PropTypes.object).isRequired,\n    treeName: PropTypes.string.isRequired\n};\n\nexport default NewTree;\n"]}