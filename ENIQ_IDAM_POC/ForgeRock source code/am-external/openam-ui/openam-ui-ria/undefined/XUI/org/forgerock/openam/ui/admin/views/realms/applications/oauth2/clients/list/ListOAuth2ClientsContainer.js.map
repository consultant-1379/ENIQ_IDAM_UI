{"version":3,"sources":["../../../../../../../../../../../../XUI/org/forgerock/openam/ui/admin/views/realms/applications/oauth2/clients/list/ListOAuth2ClientsContainer.jsx"],"names":["ListOAuth2ClientsContainer","onDelete","bind","state","isFetching","realm","props","router","params","then","response","setState","setInstances","result","addMessage","type","TYPE_DANGER","ids","messages","displayMessageFromConfig","removeInstance","reason","newHref","getLink","configuration","routes","realmsApplicationsOAuth2ClientsNew","encodeURIComponent","handleEdit","id","routeTo","realmsApplicationsOAuth2ClientsEdit","args","trigger","handleDelete","message","count","length","clients","propTypes","arrayOf","object","func","isRequired","remote","oauth2","instances","dispatch"],"mappings":"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","file":"ListOAuth2ClientsContainer.js","sourcesContent":["/*\n * The contents of this file are subject to the terms of the Common Development and\n * Distribution License (the License). You may not use this file except in compliance with the\n * License.\n *\n * You can obtain a copy of the License at legal/CDDLv1.0.txt. See the License for the\n * specific language governing permission and limitations under the License.\n *\n * When distributing Covered Software, include this CDDL Header Notice in each file and include\n * the License file at legal/CDDLv1.0.txt. If applicable, add the following below the CDDL\n * Header, with the fields enclosed by brackets [] replaced by your own identifying\n * information: \"Portions copyright [year] [name of copyright owner]\".\n *\n * Copyright 2017 ForgeRock AS.\n */\nimport { bindActionCreators } from \"redux\";\nimport { first, forEach, map, values } from \"lodash\";\nimport { t } from \"i18next\";\nimport React, { Component, PropTypes } from \"react\";\n\nimport { getAll, remove } from \"org/forgerock/openam/ui/admin/services/realm/AgentsService\";\nimport { OAUTH2_CLIENT } from \"org/forgerock/openam/ui/admin/services/realm/AgentTypes\";\nimport { removeInstance, setInstances } from \"store/modules/remote/oauth2/clients/instances\";\nimport connectWithStore from \"components/redux/connectWithStore\";\nimport ListOAuth2Clients from \"./ListOAuth2Clients\";\nimport Messages from \"org/forgerock/commons/ui/common/components/Messages\";\nimport Router from \"org/forgerock/commons/ui/common/main/Router\";\nimport showConfirmationBeforeAction from \"org/forgerock/openam/ui/admin/utils/form/showConfirmationBeforeAction\";\nimport withRouter from \"org/forgerock/commons/ui/common/components/hoc/withRouter\";\nimport withRouterPropType from \"org/forgerock/commons/ui/common/components/hoc/withRouterPropType\";\n\nclass ListOAuth2ClientsContainer extends Component {\n    constructor () {\n        super();\n        this.onDelete = this.onDelete.bind(this);\n        this.state = { isFetching: true };\n    }\n\n    componentDidMount () {\n        const realm = this.props.router.params[0];\n\n        getAll(realm, OAUTH2_CLIENT).then((response) => {\n            this.setState({ isFetching: false });\n            this.props.setInstances(response.result);\n        }, (response) => {\n            this.setState({ isFetching: false });\n            Messages.addMessage({ response, type: Messages.TYPE_DANGER });\n        });\n    }\n\n    onDelete (ids) {\n        const realm = this.props.router.params[0];\n\n        remove(realm, OAUTH2_CLIENT, ids)\n            .then((response) => map(response, first))\n            .then((response) => {\n                Messages.messages.displayMessageFromConfig(\"changesSaved\");\n\n                forEach(response, this.props.removeInstance);\n            }, (reason) => {\n                Messages.addMessage({ reason, type: Messages.TYPE_DANGER });\n            });\n    }\n\n    render () {\n        const realm = this.props.router.params[0];\n        const newHref = Router.getLink(Router.configuration.routes.realmsApplicationsOAuth2ClientsNew, [\n            encodeURIComponent(realm)\n        ]);\n        const handleEdit = (id) => Router.routeTo(Router.configuration.routes.realmsApplicationsOAuth2ClientsEdit, {\n            args: map([realm, id], encodeURIComponent),\n            trigger: true\n        });\n        const handleDelete = (ids) => {\n            showConfirmationBeforeAction({\n                message: t(\"console.applications.oauth2.clients.confirmDeleteSelected\", {\n                    count: ids.length\n                })\n            }, () => {\n                remove(realm, OAUTH2_CLIENT, ids)\n                    .then((response) => map(response, first))\n                    .then((response) => {\n                        Messages.messages.displayMessageFromConfig(\"changesSaved\");\n\n                        forEach(response, this.props.removeInstance);\n                    }, (reason) => {\n                        Messages.addMessage({ reason, type: Messages.TYPE_DANGER });\n                    });\n            });\n        };\n        return (\n            <ListOAuth2Clients\n                clients={ this.props.clients }\n                isFetching={ this.state.isFetching }\n                newHref={ `#${newHref}` }\n                onDelete={ handleDelete }\n                onEdit={ handleEdit }\n            />\n        );\n    }\n}\n\nListOAuth2ClientsContainer.propTypes = {\n    clients: PropTypes.arrayOf(PropTypes.object),\n    removeInstance: PropTypes.func.isRequired,\n    router: withRouterPropType,\n    setInstances: PropTypes.func.isRequired\n};\n\nListOAuth2ClientsContainer = connectWithStore(ListOAuth2ClientsContainer,\n    (state) => ({\n        clients: values(state.remote.oauth2.clients.instances)\n    }),\n    (dispatch) => ({\n        removeInstance: bindActionCreators(removeInstance, dispatch),\n        setInstances: bindActionCreators(setInstances, dispatch)\n    })\n);\nListOAuth2ClientsContainer = withRouter(ListOAuth2ClientsContainer);\n\nexport default ListOAuth2ClientsContainer;\n"]}