{"version":3,"sources":["../../../../../../../XUI/org/forgerock/commons/ui/common/main-s/ProcessConfiguration.js"],"names":["define","$","_","constants","eventManager","configuration","AbstractConfigurationAware","ModuleLoader","obj","em","registerListener","EVENT_CONFIGURATION_CHANGED","event","callService","moduleClass","EVENT_DEPENDENCIES_LOADED","callRegisterListenerFromConfig","config","startEvent","when","apply","map","dependencies","dep","load","then","processDescription","concat","toArray","arguments","updateConfigurationCallback","prototype","call","processConfigurationFiles","processArray","flatten","overrideArray","filter","process","override","reject","find","sendEvent","EVENT_READ_CONFIGURATION_REQUEST","serviceId","methodName","params","service","exception","JSON","stringify","console","warn"],"mappings":"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","file":"ProcessConfiguration.js","sourcesContent":["/**\r\n * The contents of this file are subject to the terms of the Common Development and\r\n * Distribution License (the License). You may not use this file except in compliance with the\r\n * License.\r\n *\r\n * You can obtain a copy of the License at legal/CDDLv1.0.txt. See the License for the\r\n * specific language governing permission and limitations under the License.\r\n *\r\n * When distributing Covered Software, include this CDDL Header Notice in each file and include\r\n * the License file at legal/CDDLv1.0.txt. If applicable, add the following below the CDDL\r\n * Header, with the fields enclosed by brackets [] replaced by your own identifying\r\n * information: \"Portions copyright [year] [name of copyright owner]\".\r\n *\r\n * Copyright 2011-2016 ForgeRock AS.\r\n */\r\n/* eslint-disable */\r\n define([\r\n    \"jquery\",\r\n    \"underscore\",\r\n    \"org/forgerock/commons/ui/common/util/Constants\",\r\n    \"org/forgerock/commons/ui/common/main/EventManager\",\r\n    \"org/forgerock/commons/ui/common/main/Configuration\",\r\n    \"org/forgerock/commons/ui/common/main/AbstractConfigurationAware\",\r\n    \"org/forgerock/commons/ui/common/util/ModuleLoader\"\r\n], function($, _, constants, eventManager, configuration, AbstractConfigurationAware, ModuleLoader) {\r\n\r\n    var obj = new AbstractConfigurationAware();\r\n    obj.em = eventManager;\r\n\r\n    eventManager.registerListener(constants.EVENT_CONFIGURATION_CHANGED, function(event) {\r\n        obj.callService(event.moduleClass, \"updateConfigurationCallback\", [event.configuration]);\r\n    });\r\n\r\n    eventManager.registerListener(constants.EVENT_DEPENDENCIES_LOADED, function() {\r\n        obj.callService(\"org/forgerock/commons/ui/common/main/Configuration\",\"sendConfigurationChangeInfo\");\r\n    });\r\n\r\n    obj.callRegisterListenerFromConfig = function (config) {\r\n        eventManager.registerListener(config.startEvent, function (event) {\r\n            return $.when.apply($, _.map(config.dependencies, function (dep) {\r\n                return ModuleLoader.load(dep);\r\n            })).then(function () {\r\n                return config.processDescription.apply(this, [event].concat(_.toArray(arguments)));\r\n            });\r\n        });\r\n    };\r\n\r\n    obj.updateConfigurationCallback = function(configuration) {\r\n        AbstractConfigurationAware.prototype.updateConfigurationCallback\r\n            .call(this, configuration)\r\n            .then(function () {\r\n\r\n                $.when.apply($, _.map(obj.configuration.processConfigurationFiles, ModuleLoader.load))\r\n                .then(function () {\r\n\r\n                    var // all processes\r\n                        processArray = _.flatten(_.toArray(arguments)),\r\n                        // processes which override the default of the same name\r\n                        overrideArray = _.filter(processArray, function (process) {\r\n                            return !!process.override;\r\n                        });\r\n\r\n                    // remove those processes which have been overridden\r\n                    processArray = _.reject(processArray, function (process) {\r\n                        return !process.override && _.find(overrideArray, function (override) {\r\n                            return override.startEvent === process.startEvent && !!override.override;\r\n                        });\r\n                    });\r\n\r\n                    _.map(processArray, obj.callRegisterListenerFromConfig);\r\n\r\n                    eventManager.sendEvent(constants.EVENT_READ_CONFIGURATION_REQUEST);\r\n                });\r\n\r\n            });\r\n    };\r\n\r\n    obj.callService = function(serviceId, methodName, params) {\r\n        ModuleLoader.load(serviceId).then(\r\n            function (service) {\r\n                if(service) {\r\n                    service[methodName].apply(service, params || []);\r\n                }\r\n            }, function (exception) {\r\n                if(params) {\r\n                    params = JSON.stringify(params);\r\n                }\r\n                console.warn(\"Unable to invoke serviceId=\" + serviceId + \" method=\" + methodName\r\n                    + \" params=\" + params + \" exception=\" + exception);\r\n            }\r\n        );\r\n    };\r\n\r\n    return obj;\r\n});"]}