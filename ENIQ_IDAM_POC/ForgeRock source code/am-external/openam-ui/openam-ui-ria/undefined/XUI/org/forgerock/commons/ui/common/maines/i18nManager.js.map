{"version":3,"sources":["../../../../../../../XUI/org/forgerock/commons/ui/common/maines/i18nManager.js"],"names":["define","$","_","require","Handlebars","i18next","Module","CookieHelper","obj","init","options","locales","opts","overrideLang","nameSpace","locale","paramLang","getCookie","split","serverLang","shift","defaultLang","push","lang","Deferred","resolve","fallbackLng","detectLngQS","getAsync","useCookie","lng","load","config","i18nLoad","ns","nsseparator","resGetPath","toUrl","registerHelper","key","get","hash","SafeString","t","map","fallback","has","find"],"mappings":"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","file":"i18nManager.js","sourcesContent":["/**\r\n * The contents of this file are subject to the terms of the Common Development and\r\n * Distribution License (the License). You may not use this file except in compliance with the\r\n * License.\r\n *\r\n * You can obtain a copy of the License at legal/CDDLv1.0.txt. See the License for the\r\n * specific language governing permission and limitations under the License.\r\n *\r\n * When distributing Covered Software, include this CDDL Header Notice in each file and include\r\n * the License file at legal/CDDLv1.0.txt. If applicable, add the following below the CDDL\r\n * Header, with the fields enclosed by brackets [] replaced by your own identifying\r\n * information: \"Portions copyright [year] [name of copyright owner]\".\r\n *\r\n * Copyright 2014-2016 ForgeRock AS.\r\n */\r\n/* eslint-disable */\r\n define( \"org/forgerock/commons/ui/common/main/i18nManager\", [\r\n    \"jquery\",\r\n    \"lodash\",\r\n    \"require\",\r\n    \"handlebars\",\r\n    \"i18next\",\r\n    \"module\",\r\n    \"org/forgerock/commons/ui/common/util/CookieHelper\"\r\n], function($, _, require, Handlebars, i18next, Module, CookieHelper) {\r\n\r\n    var obj = {};\r\n\r\n    /**\r\n     * Initialises the i18next module.\r\n     *\r\n     * Takes the following options: serverLang, paramLang, defaultLang, and nameSpace.\r\n     * i18nManger with i18next will try to detect the user language and load the corresponding translation in the\r\n     * following order:\r\n     * 1) paramLang which is a query string parameter (&locale=fr).\r\n     * 2) serverLang, a 2-5 character long language or locale code passed in from server. The value can be \"en\" or\r\n     * \"en-US\" for example.\r\n     * 3) defaultLang will be the default language set inside the Constants.DEFAULT_LANGUAGE.\r\n     *\r\n     * Note that the \"load\" field controls how the localization files are resolved:\r\n     * 1) current: always use the value that was passed in as \"lang\" (may be just \"en\", or \"en-US\")\r\n     * 2) unspecific: always use the non country-specific locale (so \"en\" in case lang was \"en-US\")\r\n     * 3) not set/other value: country-specific first, then non-country specific\r\n     *\r\n     * @param {object} options\r\n     * @param {string} options.paramLang which is a query string parameter, optionally space separated, (&locale=zh fr).\r\n     * @param {string} options.serverLang, a 2 digit language code passed in from server.\r\n     * @param {string} options.defaultLang will be the default language set inside the Constants.DEFAULT_LANGUAGE.\r\n     * @param {string} [options.nameSpace] The nameSpace is optional and will default to \"translation\"\r\n     */\r\n    obj.init = function(options) {\r\n\r\n        var locales = [],\r\n            opts = {},\r\n            overrideLang = {},\r\n            nameSpace = options.nameSpace ? options.nameSpace : \"translation\";\r\n\r\n        overrideLang.locale = options.paramLang.locale || CookieHelper.getCookie(\"i18next\");\r\n\r\n        if (overrideLang.locale) {\r\n            locales = overrideLang.locale.split(\" \");\r\n            options.serverLang = locales.shift();\r\n        }\r\n        if (options.defaultLang) {\r\n            locales.push(options.defaultLang);\r\n        }\r\n\r\n        // return if the stored lang matches the new one.\r\n        if (obj.lang && obj.lang === options.serverLang) {\r\n            return $.Deferred().resolve();\r\n        }\r\n        obj.lang = options.serverLang;\r\n\r\n        opts = {\r\n            fallbackLng: locales,\r\n            detectLngQS: \"locale\",\r\n            getAsync: false,\r\n            useCookie : true,\r\n            lng: options.serverLang,\r\n            load: Module.config().i18nLoad || \"current\",\r\n            ns: nameSpace,\r\n            nsseparator: \":::\",\r\n            resGetPath: require.toUrl(\"locales/__lng__/__ns__.json\")\r\n        };\r\n\r\n        /**\r\n         * Handlebars parameterized translation helper\r\n         * @param {Object|String} [options] Object or String to pass to this function.\r\n         * @param {Boolean} [options.hash.safeString] If set to false the returned string will be html character encoded\r\n         * @returns {Object|String} returns a translation object or string if safeString was set to false.\r\n         * @example\r\n         * 1) In translation file define a value under \"key.to.my.translation.string\" key,\r\n         *    e.g. \"Display __foo__ and __bar__\"\r\n         * 2) call helper function with key value pairs: {{t \"key.to.my.translation.string\" foo=\"test1\" bar=\"test2\"}}\r\n         * 3) Resulting string will be \"Display test1 and test2\"\r\n         */\r\n        Handlebars.registerHelper(\"t\", function (key, options) {\r\n            options = options || {};\r\n            if (_.get(options.hash, \"safeString\") !== false) {\r\n                return new Handlebars.SafeString(i18next.t(key, options.hash));\r\n            } else {\r\n                // TODO: OPENAM-9618 The safeString check must remain until we use\r\n                // triple handlebars syntax for safe strings.\r\n                return i18next.t(key, options.hash);\r\n            }\r\n        });\r\n\r\n        /**\r\n         * @param {object} map Each key in the map is a locale, each value is a string in that locale\r\n         * @example\r\n            {{mapTranslate map}} where map is an object like so:\r\n            {\r\n                \"en_GB\": \"What's your favorite colour?\",\r\n                \"fr\": \"Quelle est votre couleur préférée?\",\r\n                \"en\": \"What's your favorite color?\"\r\n            }\r\n        */\r\n        Handlebars.registerHelper(\"mapTranslate\", function(map) {\r\n            var fallback;\r\n            if (_.has(map, i18next.options.lng)) {\r\n                return new Handlebars.SafeString(map[i18next.options.lng]);\r\n            } else {\r\n                fallback = _.find(i18next.options.fallbackLng, function (lng) {\r\n                    return _.has(map, lng);\r\n                });\r\n                return new Handlebars.SafeString(map[fallback]);\r\n            }\r\n        });\r\n\r\n        return i18next.init(opts);\r\n\r\n    };\r\n\r\n    return obj;\r\n});"]}