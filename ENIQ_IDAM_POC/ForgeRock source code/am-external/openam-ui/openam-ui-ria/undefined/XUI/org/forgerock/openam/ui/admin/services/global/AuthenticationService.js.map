{"version":3,"sources":["../../../../../../../../XUI/org/forgerock/openam/ui/admin/services/global/AuthenticationService.js"],"names":["define","_","AbstractDelegate","Constants","JSONSchema","JSONValues","fetchUrl","Promise","obj","host","context","getModuleUrl","id","authentication","getAll","serviceCall","url","default","realm","headers","type","then","data","sortBy","result","schema","action","all","response","values","get","moduleUrl","getSchema","getValues","name","raw","_type","update"],"mappings":"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","file":"AuthenticationService.js","sourcesContent":["/*\n * The contents of this file are subject to the terms of the Common Development and\n * Distribution License (the License). You may not use this file except in compliance with the\n * License.\n *\n * You can obtain a copy of the License at legal/CDDLv1.0.txt. See the License for the\n * specific language governing permission and limitations under the License.\n *\n * When distributing Covered Software, include this CDDL Header Notice in each file and include\n * the License file at legal/CDDLv1.0.txt. If applicable, add the following below the CDDL\n * Header, with the fields enclosed by brackets [] replaced by your own identifying\n * information: \"Portions copyright [year] [name of copyright owner]\".\n *\n * Copyright 2016-2017 ForgeRock AS.\n */\n\n/**\n * @module org/forgerock/openam/ui/admin/services/global/AuthenticationService\n */\ndefine([\n    \"lodash\",\n    \"org/forgerock/commons/ui/common/main/AbstractDelegate\",\n    \"org/forgerock/commons/ui/common/util/Constants\",\n    \"org/forgerock/openam/ui/common/models/JSONSchema\",\n    \"org/forgerock/openam/ui/common/models/JSONValues\",\n    \"org/forgerock/openam/ui/common/services/fetchUrl\",\n    \"org/forgerock/openam/ui/common/util/Promise\"\n], (_, AbstractDelegate, Constants, JSONSchema, JSONValues, fetchUrl, Promise) => {\n    const obj = new AbstractDelegate(`${Constants.host}${Constants.context}/json`);\n\n    function getModuleUrl (id) {\n        return id === \"core\" ? \"\" : `/modules/${id}`;\n    }\n\n    obj.authentication = {\n        getAll () {\n            return obj.serviceCall({\n                url: fetchUrl.default(\"/global-config/authentication/modules?_action=getAllTypes\", { realm: false }),\n                headers: { \"Accept-API-Version\": \"protocol=1.0,resource=1.0\" },\n                type: \"POST\"\n            }).then((data) => _.sortBy(data.result, \"name\"));\n        },\n        schema () {\n            const serviceCall = (action) => obj.serviceCall({\n                url: fetchUrl.default(`/global-config/authentication?_action=${action}`, { realm: false }),\n                headers: { \"Accept-API-Version\": \"protocol=1.0,resource=1.0\" },\n                type: \"POST\"\n            });\n\n            return Promise.all([serviceCall(\"schema\"), serviceCall(\"template\")]).then((response) => ({\n                schema: response[0][0],\n                values: response[1][0]\n            }));\n        },\n        get: (id) => {\n            const moduleUrl = getModuleUrl(id);\n\n            const getSchema = () => obj.serviceCall({\n                url: fetchUrl.default(`/global-config/authentication${moduleUrl}?_action=schema`, { realm: false }),\n                headers: { \"Accept-API-Version\": \"protocol=1.0,resource=1.0\" },\n                type: \"POST\"\n            }).then((response) => new JSONSchema(response));\n\n            const getValues = () => obj.serviceCall({\n                url: fetchUrl.default(`/global-config/authentication${moduleUrl}`, { realm: false }),\n                headers: { \"Accept-API-Version\": \"protocol=1.0,resource=1.0\" }\n            }).then((response) => new JSONValues(response));\n\n            return Promise.all([getSchema(), getValues()]).then((response) => ({\n                schema: response[0],\n                values: response[1],\n                name: response[1].raw._type.name\n            }));\n        },\n        update (id, data) {\n            return obj.serviceCall({\n                url: fetchUrl.default(`/global-config/authentication${getModuleUrl(id)}`, { realm: false }),\n                headers: { \"Accept-API-Version\": \"protocol=1.0,resource=1.0\" },\n                type: \"PUT\",\n                data\n            });\n        }\n    };\n    return obj;\n});\n"]}