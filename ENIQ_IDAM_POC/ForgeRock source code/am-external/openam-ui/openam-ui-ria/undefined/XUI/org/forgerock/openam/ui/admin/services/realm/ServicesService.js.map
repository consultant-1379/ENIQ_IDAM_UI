{"version":3,"sources":["../../../../../../../../XUI/org/forgerock/openam/ui/admin/services/realm/ServicesService.js"],"names":["define","$","_","AbstractDelegate","Constants","JSONSchema","JSONValues","fetchUrl","arrayify","Promise","obj","host","context","getServiceSchema","realm","type","serviceCall","url","default","headers","then","response","getServiceSubSchema","serviceType","subSchemaType","instance","getAll","sortBy","result","get","getInstance","all","name","_type","schema","values","getInitialState","getTemplate","remove","types","promises","map","update","data","create","toJSON","getCreatables","subSchema","subSchemaInstance","JSON","stringify"],"mappings":"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","file":"ServicesService.js","sourcesContent":["/*\n * The contents of this file are subject to the terms of the Common Development and\n * Distribution License (the License). You may not use this file except in compliance with the\n * License.\n *\n * You can obtain a copy of the License at legal/CDDLv1.0.txt. See the License for the\n * specific language governing permission and limitations under the License.\n *\n * When distributing Covered Software, include this CDDL Header Notice in each file and include\n * the License file at legal/CDDLv1.0.txt. If applicable, add the following below the CDDL\n * Header, with the fields enclosed by brackets [] replaced by your own identifying\n * information: \"Portions copyright [year] [name of copyright owner]\".\n *\n * Copyright 2016-2017 ForgeRock AS.\n */\n\ndefine([\n    \"jquery\",\n    \"lodash\",\n    \"org/forgerock/commons/ui/common/main/AbstractDelegate\",\n    \"org/forgerock/commons/ui/common/util/Constants\",\n    \"org/forgerock/openam/ui/common/models/JSONSchema\",\n    \"org/forgerock/openam/ui/common/models/JSONValues\",\n    \"org/forgerock/openam/ui/common/services/fetchUrl\",\n    \"org/forgerock/openam/ui/common/util/array/arrayify\",\n    \"org/forgerock/openam/ui/common/util/Promise\"\n], ($, _, AbstractDelegate, Constants, JSONSchema, JSONValues, fetchUrl, arrayify, Promise) => {\n    /**\n     * @exports org/forgerock/openam/ui/admin/services/realm/ServicesService\n     */\n    const obj = new AbstractDelegate(`${Constants.host}${Constants.context}/json`);\n\n    const getServiceSchema = function (realm, type) {\n        return obj.serviceCall({\n            url: fetchUrl.default(`/realm-config/services/${type}?_action=schema`, { realm }),\n            headers: { \"Accept-API-Version\": \"protocol=1.0,resource=1.0\" },\n            type: \"POST\"\n        }).then((response) => new JSONSchema(response));\n    };\n    const getServiceSubSchema = function (realm, serviceType, subSchemaType) {\n        return obj.serviceCall({\n            url: fetchUrl.default(`/realm-config/services/${serviceType}/${subSchemaType}?_action=schema`, { realm }),\n            headers: { \"Accept-API-Version\": \"protocol=1.0,resource=1.0\" },\n            type: \"POST\"\n        }).then((response) => new JSONSchema(response));\n    };\n\n    obj.instance = {\n        getAll (realm) {\n            return obj.serviceCall({\n                url: fetchUrl.default(\"/realm-config/services?_queryFilter=true\", { realm }),\n                headers: { \"Accept-API-Version\": \"protocol=1.0,resource=1.0\" }\n            }).then((response) => _.sortBy(response.result, \"name\"));\n        },\n        get (realm, type) {\n            function getInstance () {\n                return obj.serviceCall({\n                    url: fetchUrl.default(`/realm-config/services/${type}`, { realm }),\n                    headers: { \"Accept-API-Version\": \"protocol=1.0,resource=1.0\" }\n                });\n            }\n\n            return Promise.all([getServiceSchema(realm, type), getInstance()]).then((response) => ({\n                name: response[1][0]._type.name,\n                schema: response[0],\n                values: new JSONValues(response[1][0])\n            }));\n        },\n        getInitialState (realm, type) {\n            function getTemplate () {\n                return obj.serviceCall({\n                    url: fetchUrl.default(`/realm-config/services/${type}?_action=template`, { realm }),\n                    headers: { \"Accept-API-Version\": \"protocol=1.0,resource=1.0\" },\n                    type: \"POST\"\n                }).then((response) => new JSONValues(response));\n            }\n\n            return Promise.all([getServiceSchema(realm, type), getTemplate()]).then((response) => ({\n                schema: response[0],\n                values: response[1]\n            }));\n        },\n        remove (realm, types) {\n            const promises = _.map(arrayify(types), (type) => obj.serviceCall({\n                url: fetchUrl.default(`/realm-config/services/${type}`, { realm }),\n                headers: { \"Accept-API-Version\": \"protocol=1.0,resource=1.0\" },\n                type: \"DELETE\"\n            }));\n\n            return Promise.all(promises);\n        },\n        update (realm, type, data) {\n            return obj.serviceCall({\n                url: fetchUrl.default(`/realm-config/services/${type}`, { realm }),\n                headers: { \"Accept-API-Version\": \"protocol=1.0,resource=1.0\" },\n                type: \"PUT\",\n                data\n            }).then((response) => new JSONValues(response));\n        },\n        create (realm, type, data) {\n            return obj.serviceCall({\n                url: fetchUrl.default(`/realm-config/services/${type}?_action=create`, { realm }),\n                headers: { \"Accept-API-Version\": \"protocol=1.0,resource=1.0\" },\n                type: \"POST\",\n                data: new JSONValues(data).toJSON()\n            });\n        }\n    };\n\n    obj.type = {\n        getCreatables (realm) {\n            return obj.serviceCall({\n                url: fetchUrl.default(\"/realm-config/services?_action=getCreatableTypes&forUI=true\", { realm }),\n                headers: { \"Accept-API-Version\": \"protocol=1.0,resource=1.0\" },\n                type: \"POST\"\n            }).then((response) => _.sortBy(response.result, \"name\"));\n        },\n        subSchema: {\n            type: {\n                getAll (realm, serviceType) {\n                    return obj.serviceCall({\n                        url: fetchUrl.default(`/realm-config/services/${serviceType}?_action=getAllTypes`, { realm }),\n                        headers: { \"Accept-API-Version\": \"protocol=1.0,resource=1.0\" },\n                        type: \"POST\"\n                    }).then((response) => response.result);\n                },\n                getCreatables (realm, serviceType) {\n                    return obj.serviceCall({\n                        url: fetchUrl.default(\n                            `/realm-config/services/${serviceType}?_action=getCreatableTypes`, { realm }),\n                        headers: { \"Accept-API-Version\": \"protocol=1.0,resource=1.0\" },\n                        type: \"POST\"\n                    }).then((response) => _.sortBy(response.result, \"name\"));\n                }\n            },\n            instance: {\n                getAll (realm, serviceType) {\n                    return obj.serviceCall({\n                        url: fetchUrl.default(\n                            `/realm-config/services/${serviceType}?_action=nextdescendents`, { realm }),\n                        headers: { \"Accept-API-Version\": \"protocol=1.0,resource=1.0\" },\n                        type: \"POST\"\n                    }).then((response) => _.sortBy(response.result, \"_id\"));\n                },\n                get (realm, serviceType, subSchemaType, subSchemaInstance) {\n                    function getInstance () {\n                        return obj.serviceCall({\n                            url: fetchUrl.default(\n                                `/realm-config/services/${serviceType}/${subSchemaType}/${subSchemaInstance}`, { realm }\n                            ),\n                            headers: { \"Accept-API-Version\": \"protocol=1.0,resource=1.0\" }\n                        }).then((response) => new JSONValues(response));\n                    }\n\n                    return Promise.all([getServiceSubSchema(realm, serviceType, subSchemaType), getInstance()])\n                        .then((response) => ({\n                            schema: response[0],\n                            values: response[1]\n                        }));\n                },\n\n                getInitialState (realm, serviceType, subSchemaType) {\n                    function getTemplate (serviceType, subSchemaType) {\n                        return obj.serviceCall({\n                            url: fetchUrl.default(\n                                `/realm-config/services/${serviceType}/${subSchemaType}?_action=template`, { realm }),\n                            headers: { \"Accept-API-Version\": \"protocol=1.0,resource=1.0\" },\n                            type: \"POST\"\n                        }).then((response) => new JSONValues(response));\n                    }\n\n                    return Promise.all([\n                        getServiceSubSchema(realm, serviceType, subSchemaType),\n                        getTemplate(serviceType, subSchemaType)\n                    ]).then((response) => ({\n                        schema: response[0],\n                        values: response[1]\n                    }));\n                },\n\n                remove (realm, serviceType, subSchemaType, subSchemaInstance) {\n                    return obj.serviceCall({\n                        url: fetchUrl.default(\n                            `/realm-config/services/${serviceType}/${subSchemaType}/${subSchemaInstance}`, { realm }),\n                        headers: { \"Accept-API-Version\": \"protocol=1.0,resource=1.0\" },\n                        type: \"DELETE\"\n                    });\n                },\n\n                update (realm, serviceType, subSchemaType, subSchemaInstance, data) {\n                    return obj.serviceCall({\n                        url: fetchUrl.default(\n                            `/realm-config/services/${serviceType}/${subSchemaType}/${subSchemaInstance}`, { realm }),\n                        headers: { \"Accept-API-Version\": \"protocol=1.0,resource=1.0\" },\n                        type: \"PUT\",\n                        data\n                    });\n                },\n\n                create (realm, serviceType, subSchemaType, data) {\n                    return obj.serviceCall({\n                        url: fetchUrl.default(\n                            `/realm-config/services/${serviceType}/${subSchemaType}?_action=create`, { realm }),\n                        headers: { \"Accept-API-Version\": \"protocol=1.0,resource=1.0\" },\n                        type: \"POST\",\n                        data: JSON.stringify(data)\n                    });\n                }\n            }\n        }\n    };\n\n    return obj;\n});\n"]}