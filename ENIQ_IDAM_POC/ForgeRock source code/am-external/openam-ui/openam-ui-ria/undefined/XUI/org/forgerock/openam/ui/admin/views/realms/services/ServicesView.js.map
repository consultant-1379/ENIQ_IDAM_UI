{"version":3,"sources":["../../../../../../../../../XUI/org/forgerock/openam/ui/admin/views/realms/services/ServicesView.js"],"names":["define","$","_","Messages","AbstractView","ServicesService","Router","FormHelper","Promise","getServiceIdFromElement","element","closest","data","getServices","realmPath","instance","getAll","getCreatables","type","deleteServices","ids","showConfirmationBeforeDeleting","message","t","count","length","remove","then","rerender","response","addMessage","TYPE_DANGER","HEADER_ACTIONS","actionPartial","helpLink","ServicesView","extend","template","partials","events","serviceSelected","event","anyServicesSelected","$el","find","is","row","currentTarget","toggleClass","prop","onAddService","preventDefault","routeTo","configuration","routes","realmsServiceNew","args","encodeURIComponent","trigger","onDeleteSingle","id","bind","onDeleteMultiple","toArray","map","value","validateAddButton","creatables","isEmpty","addClass","popover","container","placement","content","render","callback","headerActions","all","services","parentRender"],"mappings":"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","file":"ServicesView.js","sourcesContent":["/*\n * The contents of this file are subject to the terms of the Common Development and\n * Distribution License (the License). You may not use this file except in compliance with the\n * License.\n *\n * You can obtain a copy of the License at legal/CDDLv1.0.txt. See the License for the\n * specific language governing permission and limitations under the License.\n *\n * When distributing Covered Software, include this CDDL Header Notice in each file and include\n * the License file at legal/CDDLv1.0.txt. If applicable, add the following below the CDDL\n * Header, with the fields enclosed by brackets [] replaced by your own identifying\n * information: \"Portions copyright [year] [name of copyright owner]\".\n *\n * Copyright 2016-2017 ForgeRock AS.\n */\n\ndefine([\n    \"jquery\",\n    \"lodash\",\n    \"org/forgerock/commons/ui/common/components/Messages\",\n    \"org/forgerock/commons/ui/common/main/AbstractView\",\n    \"org/forgerock/openam/ui/admin/services/realm/ServicesService\",\n    \"org/forgerock/commons/ui/common/main/Router\",\n    \"org/forgerock/openam/ui/admin/utils/FormHelper\",\n    \"org/forgerock/openam/ui/common/util/Promise\"\n], ($, _, Messages, AbstractView, ServicesService, Router, FormHelper, Promise) => {\n    function getServiceIdFromElement (element) {\n        return $(element).closest(\"tr\").data(\"serviceId\");\n    }\n    function getServices (realmPath) {\n        return ServicesService.instance.getAll(realmPath);\n    }\n    function getCreatables (realmPath) {\n        return ServicesService.type.getCreatables(realmPath);\n    }\n    function deleteServices (ids) {\n        FormHelper.showConfirmationBeforeDeleting({\n            message: $.t(\"console.services.list.confirmDeleteSelected\", { count: ids.length })\n        }, () => {\n            ServicesService.instance.remove(this.data.realmPath, ids).then(() => {\n                this.rerender();\n            }, (response) => {\n                Messages.addMessage({ type: Messages.TYPE_DANGER, response });\n                this.rerender();\n            });\n        });\n    }\n    const HEADER_ACTIONS = [\n        { actionPartial: \"util/_HelpLink\", helpLink: \"backstage.config.services\" }\n    ];\n    const ServicesView = AbstractView.extend({\n        template: \"templates/admin/views/realms/services/ServicesTemplate.html\",\n        partials: [\n            \"partials/util/_HelpLink.html\"\n        ],\n        events: {\n            \"change [data-select-service]\": \"serviceSelected\",\n            \"click [data-delete-service]\":  \"onDeleteSingle\",\n            \"click [data-delete-services]\": \"onDeleteMultiple\",\n            \"click [data-add-service]\":     \"onAddService\"\n        },\n        serviceSelected (event) {\n            const anyServicesSelected = this.$el.find(\"input[type=checkbox]\").is(\":checked\");\n            const row = $(event.currentTarget).closest(\"tr\");\n\n            row.toggleClass(\"selected\");\n            this.$el.find(\"[data-delete-services]\").prop(\"disabled\", !anyServicesSelected);\n        },\n        onAddService (event) {\n            event.preventDefault();\n            Router.routeTo(Router.configuration.routes.realmsServiceNew, {\n                args: [encodeURIComponent(this.data.realmPath)],\n                trigger: true\n            });\n        },\n        onDeleteSingle (event) {\n            event.preventDefault();\n            const id = getServiceIdFromElement(event.currentTarget);\n            _.bind(deleteServices, this)([id]);\n        },\n        onDeleteMultiple (event) {\n            event.preventDefault();\n\n            const ids = _(this.$el.find(\"input[type=checkbox]:checked\")).toArray().map(getServiceIdFromElement).value();\n\n            _.bind(deleteServices, this)(ids);\n        },\n        validateAddButton (creatables) {\n            if (!_.isEmpty(creatables)) {\n                return;\n            }\n            this.$el.find(\"[data-add-service]\").addClass(\"disabled\").popover({\n                trigger : \"hover\",\n                container : \"body\",\n                placement : \"top\",\n                content: $.t(\"console.services.edit.unavaliable\")\n            });\n        },\n        render (args, callback) {\n            this.data.args = args;\n            this.data.realmPath = args[0];\n            this.data.headerActions = HEADER_ACTIONS;\n\n            Promise.all([getServices(this.data.realmPath), getCreatables(this.data.realmPath)]).then((data) => {\n                const services = data[0];\n                const creatables = data[1];\n\n                this.data.services = services;\n                this.parentRender(() => {\n                    this.validateAddButton(creatables);\n                    if (callback) {\n                        callback();\n                    }\n                });\n            });\n        },\n        rerender () {\n            this.render(this.data.args);\n        }\n    });\n\n    return ServicesView;\n});\n"]}