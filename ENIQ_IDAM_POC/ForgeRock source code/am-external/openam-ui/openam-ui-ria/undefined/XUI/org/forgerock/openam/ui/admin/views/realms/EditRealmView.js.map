{"version":3,"sources":["../../../../../../../../XUI/org/forgerock/openam/ui/admin/views/realms/EditRealmView.js"],"names":["define","i18next","$","_","Handlebars","Messages","AbstractView","EventManager","Router","Constants","RealmsService","GlobalAuthenticationService","RealmAuthenticationService","FormHelper","Backlink","JSONSchema","JSONValues","FlatJSONSchemaView","Promise","updateDefaultServerAdvancedFqdnMap","default","setAutofocus","prop","checkPattern","string","specialChars","i","length","indexOf","separateRealmAndDnsAliasProperties","schemaProperties","copySchemaProperty","original","title","description","assign","_id","uniqueId","t","dnsAliases","aliases","realmAliases","replaceRequiredAliasWithRealmAndDns","required","index","splice","getDnsAliases","filter","item","getRealmAliases","isTopLevelRealm","name","validateRealmName","valid","realmName","val","alert","compile","html","EditRealmView","extend","template","partials","events","render","args","realmPromise","authenticationPromise","realmPath","data","split","pop","newEntity","headerActions","actionPartial","icon","disabled","canRealmBeDeleted","realms","schema","authentication","get","parentRender","all","then","response","allRealmPaths","map","result","properties","parentPath","options","pattern","readonly","values","active","toggleSubmitButton","originalDnsAliases","generalPropertyPath","addDefaultProperties","subviews","$el","appendTo","find","subview","jsonEditor","addMessage","type","TYPE_DANGER","returnBack","routeTo","configuration","routes","trigger","realmDefault","encodeURIComponent","onDataChange","handleSave","event","preventDefault","displayError","formValues","getData","cloneDeep","union","statelessSessionsValues","savePromise","create","update","realm","isRootRealm","hasRootRealmAsParent","fqdnPromise","message","statelessPromise","fail","onComplete","sendEvent","EVENT_DISPLAY_MESSAGE_REQUEST","always","onDeleteClick","showConfirmationBeforeDeleting","bind","deleteRealm","onDeleteRealmComplete","onUpdateFqdnMapFailure","remove","status","flag"],"mappings":"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","file":"EditRealmView.js","sourcesContent":["/*\n * The contents of this file are subject to the terms of the Common Development and\n * Distribution License (the License). You may not use this file except in compliance with the\n * License.\n *\n * You can obtain a copy of the License at legal/CDDLv1.0.txt. See the License for the\n * specific language governing permission and limitations under the License.\n *\n * When distributing Covered Software, include this CDDL Header Notice in each file and include\n * the License file at legal/CDDLv1.0.txt. If applicable, add the following below the CDDL\n * Header, with the fields enclosed by brackets [] replaced by your own identifying\n * information: \"Portions copyright [year] [name of copyright owner]\".\n *\n * Copyright 2016-2017 ForgeRock AS.\n */\n\ndefine([\n    \"i18next\",\n    \"jquery\",\n    \"lodash\",\n    \"handlebars\",\n    \"org/forgerock/commons/ui/common/components/Messages\",\n    \"org/forgerock/commons/ui/common/main/AbstractView\",\n    \"org/forgerock/commons/ui/common/main/EventManager\",\n    \"org/forgerock/commons/ui/common/main/Router\",\n    \"org/forgerock/commons/ui/common/util/Constants\",\n    \"org/forgerock/openam/ui/admin/services/global/RealmsService\",\n    \"org/forgerock/openam/ui/admin/services/global/AuthenticationService\",\n    \"org/forgerock/openam/ui/admin/services/realm/AuthenticationService\",\n    \"org/forgerock/openam/ui/admin/utils/FormHelper\",\n    \"org/forgerock/openam/ui/admin/views/common/Backlink\",\n    \"org/forgerock/openam/ui/common/models/JSONSchema\",\n    \"org/forgerock/openam/ui/common/models/JSONValues\",\n    \"org/forgerock/openam/ui/common/views/jsonSchema/FlatJSONSchemaView\",\n    \"org/forgerock/openam/ui/common/util/Promise\",\n    \"org/forgerock/openam/ui/admin/views/realms/updateDefaultServerAdvancedFqdnMap\",\n\n    \"bootstrap-tabdrop\",\n    \"popoverclickaway\",\n    \"selectize\"\n], (i18next, $, _, Handlebars, Messages, AbstractView, EventManager, Router, Constants, RealmsService,\n    GlobalAuthenticationService, RealmAuthenticationService, FormHelper, Backlink, JSONSchema, JSONValues,\n    FlatJSONSchemaView, Promise, updateDefaultServerAdvancedFqdnMap) => { // eslint-disable-line padded-blocks\n\n    updateDefaultServerAdvancedFqdnMap = updateDefaultServerAdvancedFqdnMap.default;\n\n    function setAutofocus () {\n        $(\"input[type=\\\"text\\\"]:not(:disabled):first\").prop(\"autofocus\", true);\n    }\n\n    function checkPattern (string) {\n        // \"Characters $, &, +, \\, \", comma, /, :, ;, =, ?, @, space, #, %, <, > are not allowed in a realm's name.\"\n        const specialChars = \" @#$%&+?:;,/=\\\\<>\\\"\";\n        for (let i = 0; i < specialChars.length; i++) {\n            if (string.indexOf(specialChars[i]) > -1) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    // We are taking a copy for the aliases property from which we are creating dns and realm alias propertie.\n    function separateRealmAndDnsAliasProperties (schemaProperties) {\n        const copySchemaProperty = (original, title, description) => _.assign({}, original, {\n            \"_id\" : original._id + _.uniqueId(),\n            \"title\" : i18next.t(title),\n            \"description\" : i18next.t(description)\n        });\n\n        schemaProperties.dnsAliases = copySchemaProperty(\n            schemaProperties.aliases,\n            \"console.realms.edit.dnsAliases.title\",\n            \"console.realms.edit.dnsAliases.description\"\n        );\n\n        schemaProperties.realmAliases = copySchemaProperty(\n            schemaProperties.aliases,\n            \"console.realms.edit.realmAliases.title\",\n            \"console.realms.edit.realmAliases.description\"\n        );\n\n        return schemaProperties;\n    }\n\n    // The required properties need to be overridden to stop the jsoneditor validation on the required aliases field.\n    function replaceRequiredAliasWithRealmAndDns (required) {\n        const index = _.indexOf(required, \"aliases\");\n        if (index > 0) {\n            required.splice(index, 1, \"realmAliases\", \"dnsAliases\");\n        }\n        return required;\n    }\n\n    function getDnsAliases (aliases) {\n        return _.filter(aliases, (item) => item.indexOf(\".\") > -1);\n    }\n\n    function getRealmAliases (aliases) {\n        return _.filter(aliases, (item) => item.indexOf(\".\") === -1);\n    }\n\n    function isTopLevelRealm (name) {\n        return name === \"/\";\n    }\n\n    function validateRealmName () {\n        let valid = false;\n        const realmName = $(\"input[name=\\\"root[name]\\\"]\").val();\n        let alert = \"\";\n\n        if (realmName.length > 0) {\n            if (checkPattern(realmName)) {\n                alert = Handlebars.compile(\"{{> alerts/_Alert type='warning' \" +\n                                    \"text='console.realms.realmNameValidationError'}}\");\n            } else {\n                valid = true;\n            }\n        }\n\n        $(\"[data-realm-alert]\").html(alert);\n        return valid;\n    }\n\n    const EditRealmView = AbstractView.extend({\n        template: \"templates/admin/views/realms/EditRealmTemplate.html\",\n        partials: [\n            \"partials/alerts/_Alert.html\"\n        ],\n        events: {\n            \"click [data-save]\": \"handleSave\",\n            \"click [data-cancel]\": \"returnBack\",\n            \"click [data-delete]\": \"onDeleteClick\",\n            \"keyup input[name=\\\"root[name]\\\"]\": \"onDataChange\",\n            \"change input[name=\\\"root[name]\\\"]\": \"onDataChange\"\n        },\n\n        render (args) {\n            let realmPromise;\n            let authenticationPromise;\n\n            this.realmPath = args[0];\n\n            if (args[0]) {\n                this.data.realmPath = args[0];\n                this.data.realmName = args[0] === \"/\" ? $.t(\"console.common.topLevelRealm\") : args[0].split(\"/\").pop();\n                this.data.newEntity = false;\n                this.data.headerActions = [{\n                    actionPartial: \"form/_Button\",\n                    data:\"delete\",\n                    title:\"common.form.delete\",\n                    icon:\"fa-times\",\n                    disabled: !this.canRealmBeDeleted(this.data.realmPath)\n                }];\n            } else {\n                this.data.newEntity = true;\n                this.data.headerActions = null;\n            }\n\n            if (this.data.newEntity) {\n                realmPromise = RealmsService.realms.schema();\n                authenticationPromise = GlobalAuthenticationService.authentication.schema();\n            } else {\n                realmPromise = RealmsService.realms.get(this.data.realmPath);\n                authenticationPromise = RealmAuthenticationService.authentication.get(this.data.realmPath);\n            }\n\n            this.parentRender(function () {\n                Promise.all([realmPromise, RealmsService.realms.all(), authenticationPromise]).then((response) => {\n                    const data = response[0];\n                    const allRealmPaths = _.map(response[1][0].result, \"path\");\n                    if (this.data.newEntity) {\n                        if (allRealmPaths.length > 1) {\n                            // Only create dropdowns if the field is editable\n                            data.schema.properties.parentPath[\"enum\"] = allRealmPaths;\n                            data.schema.properties.parentPath.options = { \"enum_titles\": allRealmPaths };\n                            data.schema.properties.name.pattern = \"^[^ @#$%&+?:;,/=\\\\<>\\\"]+$\";\n                        } else {\n                            // No need to create dropdown if there is only one option\n                            data.schema.properties.parentPath.readonly = true;\n                        }\n                    } else {\n                        // Once created, it should not be possible to edit a realm's name or who it's parent is.\n                        data.schema.properties.name.readonly = true;\n                        data.schema.properties.parentPath.readonly = true;\n                        if (isTopLevelRealm(data.values.name)) {\n                            data.schema.properties.active.readonly = true;\n                        }\n\n                        this.toggleSubmitButton(true);\n                    }\n\n                    data.schema.required = replaceRequiredAliasWithRealmAndDns(data.schema.required);\n                    data.schema.properties = separateRealmAndDnsAliasProperties(data.schema.properties);\n                    data.values.dnsAliases = getDnsAliases(data.values.aliases);\n                    data.values.realmAliases = getRealmAliases(data.values.aliases);\n                    this.originalDnsAliases = data.values.dnsAliases;\n\n                    const generalPropertyPath = this.data.newEntity\n                        ? \"schema.properties.defaults.properties.general\"\n                        : \"schema.properties.general\";\n\n                    const schema = new JSONSchema(data.schema).addDefaultProperties(data.schema.required);\n\n                    this.subviews = [\n                        new FlatJSONSchemaView({ schema, values: new JSONValues(data.values) }),\n                        new FlatJSONSchemaView({\n                            schema: new JSONSchema(_.get(response[2], generalPropertyPath))\n                                .addDefaultProperties([\"statelessSessionsEnabled\"]),\n                            values: new JSONValues(_.get(response[2], \"values.general\", {}))\n                        })\n                    ];\n\n                    this.subviews[0].render().$el.appendTo(this.$el.find(\"[data-realm-form]\"));\n                    // Turn off inline error messages as we display our own help on errors on this page\n                    this.subviews[0].subview.jsonEditor.options[\"show_errors\"] = \"never\";\n\n                    this.subviews[1].render().$el.appendTo(this.$el.find(\"[data-realm-stateless-session-form]\"));\n\n                    new Backlink().render(0);\n                    setAutofocus();\n                }, (response) => {\n                    Messages.addMessage({ type: Messages.TYPE_DANGER, response });\n                });\n            });\n        },\n        returnBack () {\n            if (this.data.newEntity) {\n                Router.routeTo(Router.configuration.routes.realms, { args: [], trigger: true });\n            } else {\n                Router.routeTo(Router.configuration.routes.realmDefault, {\n                    args: [encodeURIComponent(this.data.realmPath)],\n                    trigger: true\n                });\n            }\n        },\n        onDataChange () {\n            this.toggleSubmitButton(validateRealmName());\n        },\n        handleSave (event) {\n            event.preventDefault();\n            this.toggleSubmitButton(false);\n\n            const displayError = (response) => { Messages.addMessage({ type: Messages.TYPE_DANGER, response }); };\n\n            const formValues = this.subviews[0].getData();\n            const values = _.cloneDeep(formValues);\n\n            values.aliases = _.union(values.realmAliases, values.dnsAliases);\n            delete values.realmAliases;\n            delete values.dnsAliases;\n\n            const statelessSessionsValues = this.subviews[1].getData();\n            const savePromise = this.data.newEntity ? RealmsService.realms.create(values)\n                : RealmsService.realms.update(values);\n\n            savePromise.then((realm) => {\n                const isRootRealm = realm.name === \"/\";\n                const hasRootRealmAsParent = realm.parentPath === \"/\";\n                let realmPath;\n\n                if (isRootRealm) {\n                    realmPath = \"/\";\n                } else if (hasRootRealmAsParent) {\n                    realmPath = `/${realm.name}`;\n                } else {\n                    realmPath = `${realm.parentPath}/${realm.name}`;\n                }\n\n                const fqdnPromise = updateDefaultServerAdvancedFqdnMap (\n                    realm, formValues.dnsAliases, this.originalDnsAliases\n                ).then(() => {\n                    this.originalDnsAliases = getDnsAliases(realm.aliases);\n                }, () => {\n                    Messages.addMessage(\n                        { type: Messages.TYPE_DANGER, message: $.t(\"console.realms.edit.errors.fqdnMap\") }\n                    );\n                });\n\n                const statelessPromise = RealmAuthenticationService.authentication.update(\n                    realmPath, statelessSessionsValues\n                ).fail(() => {\n                    Messages.addMessage({\n                        type: Messages.TYPE_DANGER,\n                        message: $.t(\"console.realms.edit.errors.statelessSessions\")\n                    });\n                });\n\n                const onComplete = () => {\n                    if (this.data.newEntity) {\n                        this.data.newEntity = false;\n                        Router.routeTo(Router.configuration.routes.realmDefault, {\n                            args: [encodeURIComponent(realmPath)],\n                            trigger: true\n                        });\n                    } else {\n                        EventManager.sendEvent(Constants.EVENT_DISPLAY_MESSAGE_REQUEST, \"changesSaved\");\n                    }\n                };\n\n                Promise.all([fqdnPromise, statelessPromise]).then(onComplete, onComplete);\n            }, displayError).always(() => {\n                this.toggleSubmitButton(true);\n            });\n        },\n\n        onDeleteClick (event) {\n            event.preventDefault();\n            FormHelper.showConfirmationBeforeDeleting({ type: $.t(\"console.realms.edit.realm\") },\n                _.bind(this.deleteRealm, this));\n        },\n\n        deleteRealm () {\n            const onDeleteRealmComplete = () => {\n                Router.routeTo(Router.configuration.routes.realms, { args: [], trigger: true });\n                EventManager.sendEvent(Constants.EVENT_DISPLAY_MESSAGE_REQUEST, \"changesSaved\");\n            };\n\n            const onUpdateFqdnMapFailure = () => {\n                Messages.addMessage({ type: Messages.TYPE_DANGER, message: $.t(\"console.realms.edit.errors.fqdnMap\") });\n            };\n\n            RealmsService.realms.remove(this.realmPath).then(() => {\n                updateDefaultServerAdvancedFqdnMap (this.realmPath, [], this.originalDnsAliases)\n                    .then(onDeleteRealmComplete,\n                        () => {\n                            onUpdateFqdnMapFailure();\n                            onDeleteRealmComplete();\n                        });\n            }, (response) => {\n                if (response && response.status === 409) {\n                    Messages.addMessage({\n                        message: $.t(\"console.realms.parentRealmCannotDeleted\"),\n                        type: Messages.TYPE_DANGER\n                    });\n                } else {\n                    Messages.addMessage({ response, type: Messages.TYPE_DANGER });\n                }\n            });\n        },\n\n        canRealmBeDeleted (realmPath) {\n            return realmPath !== \"/\";\n        },\n\n        toggleSubmitButton (flag) {\n            this.$el.find(\"[data-save]\").prop(\"disabled\", !flag);\n        }\n    });\n\n    return new EditRealmView();\n});\n"]}