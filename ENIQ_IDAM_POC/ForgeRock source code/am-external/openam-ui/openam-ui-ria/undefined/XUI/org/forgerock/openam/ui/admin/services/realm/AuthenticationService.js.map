{"version":3,"sources":["../../../../../../../../XUI/org/forgerock/openam/ui/admin/services/realm/AuthenticationService.js"],"names":["define","$","_","AbstractDelegate","Constants","SMSServiceUtils","JSONSchema","JSONValues","fetchUrl","Promise","obj","host","context","authentication","get","realm","schemaWithValues","default","update","data","serviceCall","url","headers","type","JSON","stringify","chains","all","then","response","chainsData","authenticationData","each","result","chainData","_id","adminAuthModule","defaultConfig","orgConfig","values","create","name","moduleName","modulesData","authChainConfiguration","chainLink","find","module","sortBy","remove","modules","done","sortResultBy","getInstance","schema","types","exists","promise","Deferred","request","resolve","length","findWhere"],"mappings":"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","file":"AuthenticationService.js","sourcesContent":["/*\n * The contents of this file are subject to the terms of the Common Development and\n * Distribution License (the License). You may not use this file except in compliance with the\n * License.\n *\n * You can obtain a copy of the License at legal/CDDLv1.0.txt. See the License for the\n * specific language governing permission and limitations under the License.\n *\n * When distributing Covered Software, include this CDDL Header Notice in each file and include\n * the License file at legal/CDDLv1.0.txt. If applicable, add the following below the CDDL\n * Header, with the fields enclosed by brackets [] replaced by your own identifying\n * information: \"Portions copyright [year] [name of copyright owner]\".\n *\n * Copyright 2015-2017 ForgeRock AS.\n */\n\n/**\n * @module org/forgerock/openam/ui/admin/services/realm/AuthenticationService\n */\ndefine([\n    \"jquery\",\n    \"lodash\",\n    \"org/forgerock/commons/ui/common/main/AbstractDelegate\",\n    \"org/forgerock/commons/ui/common/util/Constants\",\n    \"org/forgerock/openam/ui/admin/services/SMSServiceUtils\",\n    \"org/forgerock/openam/ui/common/models/JSONSchema\",\n    \"org/forgerock/openam/ui/common/models/JSONValues\",\n    \"org/forgerock/openam/ui/common/services/fetchUrl\",\n    \"org/forgerock/openam/ui/common/util/Promise\"\n], ($, _, AbstractDelegate, Constants, SMSServiceUtils, JSONSchema, JSONValues, fetchUrl, Promise) => {\n    const obj = new AbstractDelegate(`${Constants.host}${Constants.context}/json`);\n\n    obj.authentication = {\n        get (realm) {\n            return SMSServiceUtils.schemaWithValues(obj, fetchUrl.default(\"/realm-config/authentication\", { realm }));\n        },\n        update (realm, data) {\n            return obj.serviceCall({\n                url: fetchUrl.default(\"/realm-config/authentication\", { realm }),\n                headers: { \"Accept-API-Version\": \"protocol=1.0,resource=1.0\" },\n                type: \"PUT\",\n                data: JSON.stringify(data)\n            });\n        },\n        chains: {\n            all (realm) {\n                return Promise.all([\n                    obj.serviceCall({\n                        url: fetchUrl.default(\"/realm-config/authentication/chains?_queryFilter=true\", { realm }),\n                        headers: { \"Accept-API-Version\": \"protocol=1.0,resource=1.0\" }\n                    }),\n                    obj.serviceCall({\n                        url: fetchUrl.default(\"/realm-config/authentication\", { realm }),\n                        headers: { \"Accept-API-Version\": \"protocol=1.0,resource=1.0\" }\n                    })\n                ]).then((response) => {\n                    const chainsData = response[0];\n                    const authenticationData = response[1];\n\n                    _.each(chainsData[0].result, function (chainData) {\n                        if (chainData._id === authenticationData[0].adminAuthModule) {\n                            chainData.defaultConfig = chainData.defaultConfig || {};\n                            chainData.defaultConfig.adminAuthModule = true;\n                        }\n\n                        if (chainData._id === authenticationData[0].orgConfig) {\n                            chainData.defaultConfig = chainData.defaultConfig || {};\n                            chainData.defaultConfig.orgConfig = true;\n                        }\n                    });\n\n                    return {\n                        values: chainsData[0]\n                    };\n                });\n            },\n            create (realm, data) {\n                return obj.serviceCall({\n                    url: fetchUrl.default(\"/realm-config/authentication/chains?_action=create\", { realm }),\n                    headers: { \"Accept-API-Version\": \"protocol=1.0,resource=1.0\" },\n                    type: \"POST\",\n                    data: JSON.stringify(data)\n                });\n            },\n            get (realm, name) {\n                var moduleName;\n\n                return Promise.all([\n                    obj.serviceCall({\n                        url: fetchUrl.default(\"/realm-config/authentication\", { realm }),\n                        headers: { \"Accept-API-Version\": \"protocol=1.0,resource=1.0\" }\n                    }),\n                    obj.serviceCall({\n                        url: fetchUrl.default(`/realm-config/authentication/chains/${name}`, { realm }),\n                        headers: { \"Accept-API-Version\": \"protocol=1.0,resource=1.0\" }\n                    }),\n                    obj.serviceCall({\n                        url: fetchUrl.default(\"/realm-config/authentication/modules?_queryFilter=true\", { realm }),\n                        headers: { \"Accept-API-Version\": \"protocol=1.0,resource=1.0\" }\n                    })\n                ]).then((response) => {\n                    const authenticationData = response[0];\n                    const chainData = response[1];\n                    const modulesData = response[2];\n\n                    if (chainData[0]._id === authenticationData[0].adminAuthModule) {\n                        chainData[0].adminAuthModule = true;\n                    }\n\n                    if (chainData[0]._id === authenticationData[0].orgConfig) {\n                        chainData[0].orgConfig = true;\n                    }\n\n                    _.each(chainData[0].authChainConfiguration, function (chainLink) {\n                        moduleName = _.find(modulesData[0].result, { _id: chainLink.module });\n                        // The server allows for deletion of modules that are in use within a chain. The chain itself\n                        // will still have a reference to the deleted module.\n                        // Below we are checking if the module is present. If it isn't the type is left undefined\n                        if (moduleName) {\n                            chainLink.type = moduleName.type;\n                        }\n                    });\n\n                    return {\n                        chainData: chainData[0],\n                        modulesData: _.sortBy(modulesData[0].result, \"_id\")\n                    };\n                });\n            },\n            remove (realm, name) {\n                return obj.serviceCall({\n                    url: fetchUrl.default(`/realm-config/authentication/chains/${name}`, { realm }),\n                    headers: { \"Accept-API-Version\": \"protocol=1.0,resource=1.0\" },\n                    type: \"DELETE\"\n                });\n            },\n            update (realm, name, data) {\n                return obj.serviceCall({\n                    url: fetchUrl.default(`/realm-config/authentication/chains/${name}`, { realm }),\n                    headers: { \"Accept-API-Version\": \"protocol=1.0,resource=1.0\" },\n                    type: \"PUT\",\n                    data: JSON.stringify(data)\n                });\n            }\n        },\n        modules: {\n            all (realm) {\n                return obj.serviceCall({\n                    url: fetchUrl.default(\"/realm-config/authentication/modules?_queryFilter=true\", { realm }),\n                    headers: { \"Accept-API-Version\": \"protocol=1.0,resource=1.0\" }\n                }).done(SMSServiceUtils.sortResultBy(\"_id\"));\n            },\n            create (realm, data, type) {\n                return obj.serviceCall({\n                    url: fetchUrl.default(`/realm-config/authentication/modules/${type}?_action=create`, { realm }),\n                    headers: { \"Accept-API-Version\": \"protocol=1.0,resource=1.0\" },\n                    type: \"POST\",\n                    data: JSON.stringify(data)\n                });\n            },\n            get (realm, name, type) {\n                function getInstance () {\n                    return obj.serviceCall({\n                        url: fetchUrl.default(`/realm-config/authentication/modules/${type}/${name}`, { realm }),\n                        headers: { \"Accept-API-Version\": \"protocol=1.0,resource=1.0\" }\n                    });\n                }\n\n                return Promise.all([\n                    this.schema(realm, type),\n                    getInstance(),\n                    this.types.get(realm, type)\n                ]).then((response) => {\n                    return {\n                        name: response[2].name,\n                        schema: response[0],\n                        values: new JSONValues(response[1][0])\n                    };\n                });\n            },\n            exists (realm, name) {\n                var promise = $.Deferred(),\n                    request = obj.serviceCall({\n                        url: fetchUrl.default(\n                            `/realm-config/authentication/modules?_queryFilter=_id eq \"${name}\"&_fields=_id`, { realm }\n                        ),\n                        headers: { \"Accept-API-Version\": \"protocol=1.0,resource=1.0\" }\n                    });\n\n                request.done(function (data) {\n                    promise.resolve(data.result.length > 0);\n                });\n                return promise;\n            },\n            remove (realm, name, type) {\n                return obj.serviceCall({\n                    url: fetchUrl.default(`/realm-config/authentication/modules/${type}/${name}`, { realm }),\n                    headers: { \"Accept-API-Version\": \"protocol=1.0,resource=1.0\" },\n                    type: \"DELETE\"\n                });\n            },\n            update (realm, name, type, data) {\n                return obj.serviceCall({\n                    url: fetchUrl.default(`/realm-config/authentication/modules/${type}/${name}`, { realm }),\n                    headers: { \"Accept-API-Version\": \"protocol=1.0,resource=1.0\" },\n                    type: \"PUT\",\n                    data\n                }).then((response) => new JSONValues(response));\n            },\n            types: {\n                all (realm) {\n                    return obj.serviceCall({\n                        url: fetchUrl.default(\"/realm-config/authentication/modules?_action=getAllTypes\", { realm }),\n                        headers: { \"Accept-API-Version\": \"protocol=1.0,resource=1.0\" },\n                        type: \"POST\"\n                    }).done(SMSServiceUtils.sortResultBy(\"name\"));\n                },\n                get (realm, type) {\n                    // TODO: change this to a proper server-side call when OPENAM-7242 is implemented\n                    return obj.authentication.modules.types.all(realm).then(function (data) {\n                        return _.findWhere(data.result, { \"_id\": type });\n                    });\n                }\n            },\n            schema (realm, type) {\n                return obj.serviceCall({\n                    url: fetchUrl.default(`/realm-config/authentication/modules/${type}?_action=schema`, { realm }),\n                    headers: { \"Accept-API-Version\": \"protocol=1.0,resource=1.0\" },\n                    type: \"POST\"\n                }).then((response) => new JSONSchema(response));\n            }\n        }\n    };\n\n    return obj;\n});\n"]}