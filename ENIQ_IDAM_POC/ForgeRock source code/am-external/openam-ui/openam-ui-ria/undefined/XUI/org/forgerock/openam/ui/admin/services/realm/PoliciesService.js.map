{"version":3,"sources":["../../../../../../../../XUI/org/forgerock/openam/ui/admin/services/realm/PoliciesService.js"],"names":["define","_","AbstractDelegate","Constants","AdministeredRealmsHelper","fetchUrl","RealmHelper","obj","host","context","getCurrentAdministeredRealm","realm","getCurrentRealm","encodeRealm","getApplicationType","type","serviceCall","url","default","headers","getDecisionCombiners","getEnvironmentConditions","getSubjectConditions","getAllUserAttributes","queryIdentities","name","query","getUniversalId","getDataByType","getScriptById","id","getAllRealms","importPolicies","data","serviceUrl","listResourceTypes","encodeURIComponent"],"mappings":"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","file":"PoliciesService.js","sourcesContent":["/*\n * The contents of this file are subject to the terms of the Common Development and\n * Distribution License (the License). You may not use this file except in compliance with the\n * License.\n *\n * You can obtain a copy of the License at legal/CDDLv1.0.txt. See the License for the\n * specific language governing permission and limitations under the License.\n *\n * When distributing Covered Software, include this CDDL Header Notice in each file and include\n * the License file at legal/CDDLv1.0.txt. If applicable, add the following below the CDDL\n * Header, with the fields enclosed by brackets [] replaced by your own identifying\n * information: \"Portions copyright [year] [name of copyright owner]\".\n *\n * Copyright 2014-2017 ForgeRock AS.\n */\n\n/**\n* @module org/forgerock/openam/ui/admin/services/realm/PoliciesService\n*/\ndefine([\n    \"lodash\",\n    \"org/forgerock/commons/ui/common/main/AbstractDelegate\",\n    \"org/forgerock/commons/ui/common/util/Constants\",\n    \"org/forgerock/openam/ui/admin/utils/AdministeredRealmsHelper\",\n    \"org/forgerock/openam/ui/common/services/fetchUrl\",\n    \"org/forgerock/openam/ui/common/util/RealmHelper\"\n], function (_, AbstractDelegate, Constants, AdministeredRealmsHelper, fetchUrl, RealmHelper) {\n    var obj = new AbstractDelegate(`${Constants.host}${Constants.context}/json`),\n        getCurrentAdministeredRealm = function () {\n            var realm = AdministeredRealmsHelper.getCurrentRealm();\n            return realm === \"/\" ? \"\" : RealmHelper.encodeRealm(realm);\n        };\n\n    obj.getApplicationType = function (type) {\n        return obj.serviceCall({\n            url: fetchUrl.default(`/applicationtypes/${type}`, { realm: false }),\n            headers: { \"Accept-API-Version\": \"protocol=1.0,resource=1.0\" }\n        });\n    };\n\n    obj.getDecisionCombiners = function () {\n        return obj.serviceCall({\n            url: fetchUrl.default(\"/decisioncombiners/?_queryId=&_fields=title\", { realm: false }),\n            headers: { \"Accept-API-Version\": \"protocol=1.0,resource=1.0\" }\n        });\n    };\n\n    obj.getEnvironmentConditions = function () {\n        return obj.serviceCall({\n            url: fetchUrl.default(\"/conditiontypes?_queryId=&_fields=title,logical,config\", { realm: false }),\n            headers: { \"Accept-API-Version\": \"protocol=1.0,resource=1.0\" }\n        });\n    };\n\n    obj.getSubjectConditions = function () {\n        return obj.serviceCall({\n            url: fetchUrl.default(\"/subjecttypes?_queryId=&_fields=title,logical,config\", { realm: false }),\n            headers: { \"Accept-API-Version\": \"protocol=1.0,resource=1.0\" }\n        });\n    };\n\n    obj.getAllUserAttributes = function () {\n        return obj.serviceCall({\n            url: fetchUrl.default(\"/subjectattributes?_queryFilter=true\", { realm: getCurrentAdministeredRealm() }),\n            headers: { \"Accept-API-Version\": \"protocol=1.0,resource=1.0\" }\n        });\n    };\n\n    obj.queryIdentities = function (name, query) {\n        return obj.serviceCall({\n            url: fetchUrl.default(`/${name}?_queryId=${query}*`, { realm: getCurrentAdministeredRealm() }),\n            headers: { \"Accept-API-Version\": \"protocol=1.0,resource=1.0\" }\n        });\n    };\n\n    obj.getUniversalId = function (name, type) {\n        return obj.serviceCall({\n            url: fetchUrl.default(`/${type}/${name}?_fields=universalid`, { realm: getCurrentAdministeredRealm() }),\n            headers: { \"Cache-Control\": \"no-cache\", \"Accept-API-Version\": \"protocol=1.0,resource=2.0\" }\n        });\n    };\n\n    obj.getDataByType = function (type) {\n        return obj.serviceCall({\n            url: fetchUrl.default(`/${type}?_queryFilter=true`, { realm: getCurrentAdministeredRealm() }),\n            headers: { \"Accept-API-Version\": \"protocol=1.0,resource=1.0\" }\n        });\n    };\n\n    obj.getScriptById = function (id) {\n        return obj.serviceCall({\n            url: fetchUrl.default(`/scripts/${id}`, { realm: getCurrentAdministeredRealm() }),\n            headers: { \"Accept-API-Version\": \"protocol=1.0,resource=1.0\" }\n        });\n    };\n\n    obj.getAllRealms = function () {\n        return obj.serviceCall({\n            url: fetchUrl.default(\"/realms?_queryFilter=true\", { realm: false }),\n            headers: { \"Accept-API-Version\": \"protocol=1.0,resource=1.0\" }\n        });\n    };\n\n    obj.importPolicies = function (data) {\n        return obj.serviceCall({\n            serviceUrl: `${Constants.host}${Constants.context}`,\n            url: fetchUrl.default(`/xacml${getCurrentAdministeredRealm()}/policies`, { realm: false }),\n            headers: { \"Accept-API-Version\": \"protocol=1.0,resource=1.0\" },\n            type: \"POST\",\n            data\n        });\n    };\n\n    obj.listResourceTypes = function () {\n        return obj.serviceCall({\n            url: fetchUrl.default(\n                `/resourcetypes?_queryFilter=name+eq+${encodeURIComponent('\"^(?!Delegation Service$).*\"')}`,\n                { realm: getCurrentAdministeredRealm() }),\n            headers: { \"Accept-API-Version\": \"protocol=1.0,resource=1.0\" }\n        });\n    };\n\n    return obj;\n});\n"]}