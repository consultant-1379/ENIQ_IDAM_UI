{"version":3,"sources":["../../../../../../../XUI/org/forgerock/commons/ui/common/maines/ServiceInvoker.js"],"names":["define","$","_","AbstractConfigurationAware","Constants","ErrorsHandler","EventManager","obj","restCall","options","successCallback","success","errorCallback","error","hasDataType","hasOwnProperty","isJSONRequest","dataType","promise","Deferred","resolveHandler","rejectHandler","resolve","apply","arguments","jqXHR","textStatus","errorThrown","suppressEvents","status","matchError","errorsHandlers","sendEvent","EVENT_SHOW_LOGIN_DIALOG","authenticatedCallback","ajax","then","EVENT_REST_CALL_ERROR","data","extend","type","reject","contentType","applyDefaultHeadersIfNecessary","configuration","defaultHeaders","EVENT_START_REST_CALL","suppressSpinner","EVENT_END_REST_CALL","xhrFields","withCredentials","headers","has","oneHeaderName","undefined"],"mappings":"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","file":"ServiceInvoker.js","sourcesContent":["/**\r\n * The contents of this file are subject to the terms of the Common Development and\r\n * Distribution License (the License). You may not use this file except in compliance with the\r\n * License.\r\n *\r\n * You can obtain a copy of the License at legal/CDDLv1.0.txt. See the License for the\r\n * specific language governing permission and limitations under the License.\r\n *\r\n * When distributing Covered Software, include this CDDL Header Notice in each file and include\r\n * the License file at legal/CDDLv1.0.txt. If applicable, add the following below the CDDL\r\n * Header, with the fields enclosed by brackets [] replaced by your own identifying\r\n * information: \"Portions copyright [year] [name of copyright owner]\".\r\n *\r\n * Copyright 2011-2016 ForgeRock AS.\r\n */\r\n/* eslint-disable */\r\n define([\r\n    \"jquery\",\r\n    \"underscore\",\r\n    \"org/forgerock/commons/ui/common/main/AbstractConfigurationAware\",\r\n    \"org/forgerock/commons/ui/common/util/Constants\",\r\n    \"org/forgerock/commons/ui/common/main/ErrorsHandler\",\r\n    \"org/forgerock/commons/ui/common/main/EventManager\"\r\n], function($, _, AbstractConfigurationAware, Constants, ErrorsHandler, EventManager) {\r\n    /**\r\n     * @exports org/forgerock/commons/ui/common/main/ServiceInvoker\r\n     */\r\n    var obj = new AbstractConfigurationAware();\r\n\r\n    /**\r\n     * Performs a REST service call.\r\n     * <p>\r\n     * If a <tt>dataType</tt> of <tt>\"json\"</tt> is set on the options, the request has it's <tt>contentType</tt> set to\r\n     * be <tt>\"application/json\"</tt> automatically.\r\n     * <p>\r\n     * Additional options can also be passed to control behaviour beyond what\r\n     * {@link http://api.jquery.com/jquery.ajax|$.ajax()} is aware of:\r\n     * <code><pre>\r\n     * {\r\n     *     suppressEvents: true // Default \"false\". Suppresses dispatching of EVENT_START_REST_CALL,\r\n     *                             EVENT_REST_CALL_ERROR and EVENT_END_REST_CALL events.\r\n     * }\r\n     * </code></pre>\r\n     * @param  {Object} options Options that will be passed to {@link http://api.jquery.com/jquery.ajax|$.ajax()}\r\n     * @return {@link http://api.jquery.com/Types/#jqXHR|jqXHR} Return value from call to\r\n     *                          {@link http://api.jquery.com/jquery.ajax|$.ajax()}\r\n     */\r\n    obj.restCall = function(options) {\r\n        var successCallback = options.success,\r\n            errorCallback = options.error,\r\n            hasDataType = options.hasOwnProperty(\"dataType\"),\r\n            isJSONRequest = hasDataType && options.dataType === \"json\",\r\n            promise = $.Deferred(),\r\n            resolveHandler,\r\n            rejectHandler;\r\n\r\n        resolveHandler = function () {\r\n            promise.resolve.apply(promise, arguments);\r\n        };\r\n\r\n        rejectHandler = function (jqXHR, textStatus, errorThrown) {\r\n            if (!options.suppressEvents) {\r\n                // attempt to handle session timeout errors (indicated by a 401)\r\n                // gracefully, by deferring the failure until after the user has\r\n                // had a chance to reauthenticate. After they have successfully\r\n                // logged-in, resubmit their original request. Only do this if there\r\n                // isn't an errorsHandler for 401 included in the request.\r\n                if (jqXHR.status === 401 && !ErrorsHandler.matchError({status:401},options.errorsHandlers)) {\r\n                    EventManager.sendEvent(Constants.EVENT_SHOW_LOGIN_DIALOG, {\r\n                        authenticatedCallback : function () {\r\n                            $.ajax(options).then(resolveHandler,rejectHandler);\r\n                        }\r\n                    });\r\n                } else {\r\n                    EventManager.sendEvent(Constants.EVENT_REST_CALL_ERROR, {\r\n                        data: $.extend({}, jqXHR, { type: this.type }),\r\n                        textStatus: textStatus,\r\n                        errorThrown: errorThrown,\r\n                        errorsHandlers: options.errorsHandlers\r\n                    });\r\n                    if(errorCallback) { errorCallback(jqXHR); }\r\n                    promise.reject.apply(promise, arguments);\r\n                }\r\n            } else {\r\n                if(errorCallback) { errorCallback(jqXHR); }\r\n                promise.reject.apply(promise, arguments);\r\n            }\r\n\r\n        };\r\n\r\n        /**\r\n         * Logic to cover two scenarios:\r\n         * 1. If we don't have a dataType we default to JSON\r\n         * 2. If the dataType is \"json\" we ensure the correct value for contentType has been set\r\n         */\r\n        if (!hasDataType || isJSONRequest) {\r\n            options.dataType = \"json\";\r\n            options.contentType = \"application/json\";\r\n        }\r\n\r\n        obj.applyDefaultHeadersIfNecessary(options, obj.configuration.defaultHeaders);\r\n\r\n        if (!options.suppressEvents) {\r\n            EventManager.sendEvent(Constants.EVENT_START_REST_CALL, {\r\n                suppressSpinner: options.suppressSpinner\r\n            });\r\n        }\r\n\r\n        options.success = function (data, textStatus, jqXHR) {\r\n            if(data && data.error) {\r\n                if (!options.suppressEvents) {\r\n                    EventManager.sendEvent(Constants.EVENT_REST_CALL_ERROR, {\r\n                        data: $.extend({}, data, {type: this.type}),\r\n                        textStatus: textStatus,\r\n                        jqXHR: jqXHR,\r\n                        errorsHandlers: options.errorsHandlers\r\n                    });\r\n                }\r\n\r\n                if(errorCallback) { errorCallback(data); }\r\n            } else {\r\n                if (!options.suppressEvents) {\r\n                    EventManager.sendEvent(Constants.EVENT_END_REST_CALL, {\r\n                        data: data,\r\n                        textStatus: textStatus,\r\n                        jqXHR: jqXHR\r\n                    });\r\n                }\r\n\r\n                if(successCallback) { successCallback(data, jqXHR); }\r\n            }\r\n        };\r\n\r\n        // The error handling function passed into restCall will be executed\r\n        // (if defined) as part of the rejectHandler above. A provided success\r\n        // handler will execute as normal, because there is no special logic\r\n        // needed around handling successful requests.\r\n        delete options.error;\r\n\r\n        options.xhrFields = {\r\n            /**\r\n             * Useful for CORS requests, should we be accessing a remote endpoint.\r\n             * @see http://www.html5rocks.com/en/tutorials/cors/#toc-withcredentials\r\n             */\r\n            withCredentials: true\r\n        };\r\n\r\n        /**\r\n         * This is the jQuery default value for this header, but unless manually specified (like so) it won't be\r\n         * included in CORS requests.\r\n         */\r\n        options.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\r\n\r\n        /**\r\n         * Default to disabled caching for all AJAX requests. Can be overriden in the rare cases when caching AJAX is\r\n         * needed\r\n         */\r\n        if (!_.has(options.headers, \"Cache-Control\")) {\r\n            options.headers[\"Cache-Control\"] = \"no-cache\";\r\n        }\r\n\r\n        $.ajax(options).then(resolveHandler,rejectHandler);\r\n\r\n        return promise;\r\n    };\r\n\r\n    /**\r\n     * Test TODO create test using below formula\r\n     * var x = {headers:{\"a\": \"a\"},b:\"b\"};\r\n     * require(\"org/forgerock/commons/ui/common/main/ServiceInvoker\").applyDefaultHeadersIfNecessary(x, {a:\"x\",b:\"b\"});\r\n     * y ={};\r\n     * require(\"org/forgerock/commons/ui/common/main/ServiceInvoker\").applyDefaultHeadersIfNecessary(y, {a:\"c\",d:\"c\"});\r\n     */\r\n    obj.applyDefaultHeadersIfNecessary = function(options, defaultHeaders) {\r\n        var oneHeaderName;\r\n\r\n        if(!defaultHeaders) { return; }\r\n\r\n        if(!options.headers) {\r\n            options.headers = defaultHeaders;\r\n        } else {\r\n            for(oneHeaderName in defaultHeaders) {\r\n                if(options.headers[oneHeaderName] === undefined) {\r\n                    options.headers[oneHeaderName] = defaultHeaders[oneHeaderName];\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    return obj;\r\n});"]}