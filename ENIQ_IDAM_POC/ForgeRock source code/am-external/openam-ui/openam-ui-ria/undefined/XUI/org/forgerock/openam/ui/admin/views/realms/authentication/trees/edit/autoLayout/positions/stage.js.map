{"version":3,"sources":["../../../../../../../../../../../../../XUI/org/forgerock/openam/ui/admin/views/realms/authentication/trees/edit/autoLayout/positions/stage.jsm"],"names":["VERTICAL_NODE_MARGIN","HORIZONTAL_NODE_MARGIN","getColumnHeights","columns","dimensions","column","result","node","height","getColumnMaxWidths","width","getColumnYPosition","columnIndex","columnHeights","getNodeXPosition","columnsToLeft","slice","columnWidths","totalWidthOfColumnsToLeft","getNodeYPosition","rowIndex","allNodesInTheColumn","allNodesAbove","heightOfTheNodesAbove","columnY"],"mappings":";;;;;;;;AAiBA;;;;AAIO,MAAMA,sDAAuB,EAA7B,C,CArBP;;;;;;;;;;;;;;;;AAsBO,MAAMC,0DAAyB,EAA/B;;AAEP;;;;;;;AAOO,MAAMC,8CAAmB,SAAnBA,gBAAmB,CAACC,OAAD,EAAUC,UAAV;AAAA,WAC5B,iBAAID,OAAJ,EAAa,UAACE,MAAD;AAAA,aAAY,oBAAOA,MAAP,EAAe,UAACC,MAAD,EAASC,IAAT;AAAA,eACpCD,SAASF,WAAW,qBAAQG,IAAR,CAAX,EAA0BC,MAAnC,GAA4CR,oBADR;AAAA,OAAf,EAC6CA,oBAD7C,CAAZ;AAAA,KAAb,CAD4B;AAAA,GAAzB;;AAIP;;;;;;;AAOA,MAAMS,qBAAqB,SAArBA,kBAAqB,CAACN,OAAD,EAAUC,UAAV;AAAA,WACvB,iBAAID,OAAJ,EAAa,UAACE,MAAD;AAAA,aAAY,oBAAOA,MAAP,EAAe,UAACC,MAAD,EAASC,IAAT,EAAkB;AACtD,eAAOH,WAAW,qBAAQG,IAAR,CAAX,EAA0BG,KAA1B,GAAkCT,sBAAlC,GAA2DK,MAA3D,GACDF,WAAW,qBAAQG,IAAR,CAAX,EAA0BG,KAA1B,GAAkCT,sBADjC,GAC0DK,MADjE;AAEH,OAHwB,EAGtBL,sBAHsB,CAAZ;AAAA,KAAb,CADuB;AAAA,GAA3B;;AAMA;;;;;;;;;AASA,MAAMU,qBAAqB,SAArBA,kBAAqB,CAACR,OAAD,EAAUS,WAAV,EAAuBR,UAAvB,EAAsC;AAC7D,QAAMS,gBAAgBX,iBAAiBC,OAAjB,EAA0BC,UAA1B,CAAtB;AACA,WAAO,CAAC,iBAAIS,aAAJ,IAAqBA,cAAcD,WAAd,CAAtB,IAAoD,CAA3D;AACH,GAHD;;AAKA;;;;;;;;;AASO,MAAME,8CAAmB,SAAnBA,gBAAmB,CAACX,OAAD,EAAUS,WAAV,EAAuBR,UAAvB,EAAsC;AAClE,QAAMW,gBAAgBZ,QAAQa,KAAR,CAAc,CAAd,EAAiBJ,WAAjB,CAAtB;AACA,QAAMK,eAAeR,mBAAmBM,aAAnB,EAAkCX,UAAlC,CAArB;AACA,QAAMc,4BAA4B,oBAAOD,YAAP,EAAqB,UAACX,MAAD,EAASI,KAAT;AAAA,aAAmBJ,SAASI,KAA5B;AAAA,KAArB,EAAwDT,sBAAxD,CAAlC;AACA,WAAOiB,yBAAP;AACH,GALM;;AAOP;;;;;;;;;;AAUO,MAAMC,8CAAmB,SAAnBA,gBAAmB,CAAChB,OAAD,EAAUS,WAAV,EAAuBQ,QAAvB,EAAiChB,UAAjC,EAAgD;AAC5E,QAAMiB,sBAAsBlB,QAAQS,WAAR,CAA5B;AACA,QAAMU,gBAAgBD,oBAAoBL,KAApB,CAA0B,CAA1B,EAA6BI,QAA7B,CAAtB;AACA,QAAMG,wBAAwB,oBAAOD,aAAP,EAAsB,UAAChB,MAAD,EAASC,IAAT;AAAA,aAChDD,SAASF,WAAW,qBAAQG,IAAR,CAAX,EAA0BC,MAAnC,GAA4CR,oBADI;AAAA,KAAtB,EACwCA,oBADxC,CAA9B;AAEA,QAAMwB,UAAUb,mBAAmBR,OAAnB,EAA4BS,WAA5B,EAAyCR,UAAzC,CAAhB;AACA,WAAOoB,UAAUD,qBAAjB;AACH,GAPM","file":"stage.js","sourcesContent":["/*\n * The contents of this file are subject to the terms of the Common Development and\n * Distribution License (the License). You may not use this file except in compliance with the\n * License.\n *\n * You can obtain a copy of the License at legal/CDDLv1.0.txt. See the License for the\n * specific language governing permission and limitations under the License.\n *\n * When distributing Covered Software, include this CDDL Header Notice in each file and include\n * the License file at legal/CDDLv1.0.txt. If applicable, add the following below the CDDL\n * Header, with the fields enclosed by brackets [] replaced by your own identifying\n * information: \"Portions copyright [year] [name of copyright owner]\".\n *\n * Copyright 2017 ForgeRock AS.\n */\n\nimport { findKey, map, max, reduce } from \"lodash\";\n/**\n * The margins are used to space the nodes apart from one another and are\n * included within the widths and heights of the columns.\n **/\nexport const VERTICAL_NODE_MARGIN = 25;\nexport const HORIZONTAL_NODE_MARGIN = 50;\n\n/**\n * Given columns and heights of all nodes, this function returns an array of all column heights.\n *\n * @param {Array[]} columns array of columns\n * @param {Object} dimensions heights and widths of the nodes, indexed by node id\n * @returns {number[]} array of all column heights\n */\nexport const getColumnHeights = (columns, dimensions) =>\n    map(columns, (column) => reduce(column, (result, node) =>\n        result + dimensions[findKey(node)].height + VERTICAL_NODE_MARGIN, VERTICAL_NODE_MARGIN));\n\n/**\n * Given columns and widths of all nodes, this function returns an array of all column widths.\n *\n * @param {Array[]} columns array of columns\n * @param {Object} dimensions heights and widths of the nodes, indexed by node id\n * @returns {number[]} array of all column widths\n */\nconst getColumnMaxWidths = (columns, dimensions) =>\n    map(columns, (column) => reduce(column, (result, node) => {\n        return dimensions[findKey(node)].width + HORIZONTAL_NODE_MARGIN > result\n            ? dimensions[findKey(node)].width + HORIZONTAL_NODE_MARGIN : result;\n    }, HORIZONTAL_NODE_MARGIN));\n\n/**\n * Given columns, column index and heights of all nodes, this function returns a top margin for the column\n * (Y position of the first node in the column).\n *\n * @param {Array[]} columns array of columns\n * @param {number} columnIndex column index\n * @param {Object} dimensions heights and widths of the nodes, indexed by node id\n * @returns {number[]} array of all column heights\n */\nconst getColumnYPosition = (columns, columnIndex, dimensions) => {\n    const columnHeights = getColumnHeights(columns, dimensions);\n    return (max(columnHeights) - columnHeights[columnIndex]) / 2;\n};\n\n/**\n * Given columns, column index, row index and widths of all nodes,\n * this function returns a X position for the given node.\n *\n * @param {Array[]} columns array of columns\n * @param {number} columnIndex column index\n * @param {Object} dimensions heights and widths of the nodes, indexed by node id\n * @returns {number} X position\n */\nexport const getNodeXPosition = (columns, columnIndex, dimensions) => {\n    const columnsToLeft = columns.slice(0, columnIndex);\n    const columnWidths = getColumnMaxWidths(columnsToLeft, dimensions);\n    const totalWidthOfColumnsToLeft = reduce(columnWidths, (result, width) => result + width, HORIZONTAL_NODE_MARGIN);\n    return totalWidthOfColumnsToLeft;\n};\n\n/**\n * Given columns, column index, row index and heights of all nodes,\n * this function returns a Y position for the given node\n *\n * @param {Array[]} columns array of columns\n * @param {number} columnIndex column index\n * @param {number} rowIndex row index\n * @param {Object} dimensions heights and widths of the nodes, indexed by node id\n * @returns {number} Y position\n */\nexport const getNodeYPosition = (columns, columnIndex, rowIndex, dimensions) => {\n    const allNodesInTheColumn = columns[columnIndex];\n    const allNodesAbove = allNodesInTheColumn.slice(0, rowIndex);\n    const heightOfTheNodesAbove = reduce(allNodesAbove, (result, node) =>\n        result + dimensions[findKey(node)].height + VERTICAL_NODE_MARGIN, VERTICAL_NODE_MARGIN);\n    const columnY = getColumnYPosition(columns, columnIndex, dimensions);\n    return columnY + heightOfTheNodesAbove;\n};\n"]}