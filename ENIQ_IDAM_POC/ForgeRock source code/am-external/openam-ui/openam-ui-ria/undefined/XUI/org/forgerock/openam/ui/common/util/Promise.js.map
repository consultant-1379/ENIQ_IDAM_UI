{"version":3,"sources":["../../../../../../../XUI/org/forgerock/openam/ui/common/util/Promise.js"],"names":["define","$","_","all","promises","isArray","length","when","then","args","Array","prototype","slice","call","arguments","Deferred","resolve","promise","reject","TypeError"],"mappings":";;;;AAAA;;;;;;;;;;;;;;;;AAgBA;;;AAGAA,OAAO,CACH,QADG,EAEH,QAFG,CAAP,EAGG,UAACC,CAAD,EAAIC,CAAJ;AAAA,WAAW;AACV;;;;;;;AAOAC,WARU,eAQLC,QARK,EAQK;AACX,gBAAIF,EAAEG,OAAF,CAAUD,QAAV,CAAJ,EAAyB;AACrB,oBAAIA,SAASE,MAAb,EAAqB;AACjB,2BAAOL,EAAEM,IAAF,6BAAUH,QAAV,GAAoBI,IAApB,CAAyB,YAAY;AACxC,4BAAMC,OAAOC,MAAMC,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BC,SAA3B,CAAb;;AAEA,4BAAIL,KAAKH,MAAL,KAAgB,CAAhB,IAAqBF,SAASE,MAAT,KAAoB,CAA7C,EAAgD;AAC5C,mCAAOG,IAAP;AACH;;AAED,+BAAO,CAACA,IAAD,CAAP;AACH,qBARM,CAAP;AASH,iBAVD,MAUO;AACH,2BAAOR,EAAEc,QAAF,GAAaC,OAAb,CAAqB,EAArB,EAAyBC,OAAzB,EAAP;AACH;AACJ,aAdD,MAcO;AACH,uBAAOhB,EAAEc,QAAF,GAAaG,MAAb,CAAoB,IAAIC,SAAJ,CAAc,+BAAd,CAApB,EAAoEF,OAApE,EAAP;AACH;AACJ;AA1BS,KAAX;AAAA,CAHH","file":"Promise.js","sourcesContent":["/*\n * The contents of this file are subject to the terms of the Common Development and\n * Distribution License (the License). You may not use this file except in compliance with the\n * License.\n *\n * You can obtain a copy of the License at legal/CDDLv1.0.txt. See the License for the\n * specific language governing permission and limitations under the License.\n *\n * When distributing Covered Software, include this CDDL Header Notice in each file and include\n * the License file at legal/CDDLv1.0.txt. If applicable, add the following below the CDDL\n * Header, with the fields enclosed by brackets [] replaced by your own identifying\n * information: \"Portions copyright [year] [name of copyright owner]\".\n *\n * Copyright 2015-2017 ForgeRock AS.\n */\n\n/**\n  * @module org/forgerock/openam/ui/common/util/Promise\n  */\ndefine([\n    \"jquery\",\n    \"lodash\"\n], ($, _) => ({\n    /**\n     * Returns a promise that resolves when all of the promises in the iterable argument have resolved, or rejects\n     * with the reason of the first passed promise that rejects.\n     * @param {Array} promises An array of promises\n     * @returns {Promise} A promise that represents all of the specified promises\n     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all\n     */\n    all (promises) {\n        if (_.isArray(promises)) {\n            if (promises.length) {\n                return $.when(...promises).then(function () {\n                    const args = Array.prototype.slice.call(arguments);\n\n                    if (args.length === 1 || promises.length !== 1) {\n                        return args;\n                    }\n\n                    return [args];\n                });\n            } else {\n                return $.Deferred().resolve([]).promise();\n            }\n        } else {\n            return $.Deferred().reject(new TypeError(\"Expected an array of promises\")).promise();\n        }\n    }\n}));\n"]}