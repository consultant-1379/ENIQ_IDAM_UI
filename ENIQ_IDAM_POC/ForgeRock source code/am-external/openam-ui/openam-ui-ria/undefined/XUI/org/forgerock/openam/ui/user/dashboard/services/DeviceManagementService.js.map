{"version":3,"sources":["../../../../../../../../XUI/org/forgerock/openam/ui/user/dashboard/services/DeviceManagementService.js"],"names":["define","$","AbstractDelegate","Configuration","Constants","fetchUrl","obj","host","context","remove","uuid","loggedUserUid","loggedUser","get","serviceCall","url","default","headers","suppressEvents","method","setDevicesOathSkippable","skip","skipOption","value","data","JSON","stringify","checkDevicesOathSkippable","then","statusData","result","getAll"],"mappings":";;AAAA;;;;;;;;;;;;;;;;AAgBA;;;AAGAA,OAAO,CACH,QADG,EAEH,uDAFG,EAGH,oDAHG,EAIH,gDAJG,EAKH,kDALG,CAAP,EAMG,UAAUC,CAAV,EAAaC,gBAAb,EAA+BC,aAA/B,EAA8CC,SAA9C,EAAyDC,QAAzD,EAAmE;AAClE,QAAMC,MAAM,IAAIJ,gBAAJ,MAAwBE,UAAUG,IAAlC,GAAyCH,UAAUI,OAAnD,WAAZ;;AAEA;;;;;AAKAF,QAAIG,MAAJ,GAAa,UAAUC,IAAV,EAAgB;AACzB,YAAMC,gBAAgBR,cAAcS,UAAd,CAAyBC,GAAzB,CAA6B,KAA7B,CAAtB;AACA,eAAOP,IAAIQ,WAAJ,CAAgB;AACnBC,iBAAKV,SAASW,OAAT,aAA2BL,aAA3B,0BAA6DD,IAA7D,CADc;AAEnBO,qBAAS,EAAE,sBAAsB,2BAAxB,EAFU;AAGnBC,4BAAgB,IAHG;AAInBC,oBAAQ;AAJW,SAAhB,CAAP;AAMH,KARD;;AAUA;;;;;AAKAb,QAAIc,uBAAJ,GAA8B,UAAUC,IAAV,EAAgB;AAC1C,YAAMV,gBAAgBR,cAAcS,UAAd,CAAyBC,GAAzB,CAA6B,KAA7B,CAAtB;AACA,YAAMS,aAAa,EAAEC,OAAOF,IAAT,EAAnB;AACA,eAAOf,IAAIQ,WAAJ,CAAgB;AACnBC,iBAAKV,SAASW,OAAT,aAA2BL,aAA3B,oCADc;AAEnBM,qBAAS,EAAE,sBAAsB,2BAAxB,EAFU;AAGnBO,kBAAMC,KAAKC,SAAL,CAAeJ,UAAf,CAHa;AAInBJ,4BAAgB,IAJG;AAKnBC,oBAAQ;AALW,SAAhB,CAAP;AAOH,KAVD;;AAYA;;;;AAIAb,QAAIqB,yBAAJ,GAAgC,YAAY;AACxC,YAAMhB,gBAAgBR,cAAcS,UAAd,CAAyBC,GAAzB,CAA6B,KAA7B,CAAtB;AACA,eAAOP,IAAIQ,WAAJ,CAAgB;AACnBC,iBAAKV,SAASW,OAAT,aAA2BL,aAA3B,qCADc;AAEnBM,qBAAS,EAAE,sBAAsB,2BAAxB,EAFU;AAGnBC,4BAAgB,IAHG;AAInBC,oBAAQ;AAJW,SAAhB,EAKJS,IALI,CAKC,UAAUC,UAAV,EAAsB;AAC1B,mBAAOA,WAAWC,MAAlB;AACH,SAPM,CAAP;AAQH,KAVD;;AAYA;;;;AAIAxB,QAAIyB,MAAJ,GAAa,YAAY;AACrB,YAAMpB,gBAAgBR,cAAcS,UAAd,CAAyBC,GAAzB,CAA6B,KAA7B,CAAtB;AACA,eAAOP,IAAIQ,WAAJ,CAAgB;AACnBC,iBAAKV,SAASW,OAAT,aAA2BL,aAA3B,yCADc;AAEnBM,qBAAS,EAAE,sBAAsB,2BAAxB,EAFU;AAGnBC,4BAAgB;AAHG,SAAhB,EAIJU,IAJI,CAIC,UAACL,KAAD;AAAA,mBAAWA,MAAMO,MAAjB;AAAA,SAJD,CAAP;AAKH,KAPD;;AASA,WAAOxB,GAAP;AACH,CAvED","file":"DeviceManagementService.js","sourcesContent":["/*\n * The contents of this file are subject to the terms of the Common Development and\n * Distribution License (the License). You may not use this file except in compliance with the\n * License.\n *\n * You can obtain a copy of the License at legal/CDDLv1.0.txt. See the License for the\n * specific language governing permission and limitations under the License.\n *\n * When distributing Covered Software, include this CDDL Header Notice in each file and include\n * the License file at legal/CDDLv1.0.txt. If applicable, add the following below the CDDL\n * Header, with the fields enclosed by brackets [] replaced by your own identifying\n * information: \"Portions copyright [year] [name of copyright owner]\".\n *\n * Copyright 2015-2017 ForgeRock AS.\n */\n\n/**\n * @module org/forgerock/openam/ui/user/dashboard/services/DeviceManagementService\n */\ndefine([\n    \"jquery\",\n    \"org/forgerock/commons/ui/common/main/AbstractDelegate\",\n    \"org/forgerock/commons/ui/common/main/Configuration\",\n    \"org/forgerock/commons/ui/common/util/Constants\",\n    \"org/forgerock/openam/ui/common/services/fetchUrl\"\n], function ($, AbstractDelegate, Configuration, Constants, fetchUrl) {\n    const obj = new AbstractDelegate(`${Constants.host}${Constants.context}/json`);\n\n    /**\n     * Delete oath device by uuid\n     * @param {String} uuid The unique device id\n     * @returns {Promise} promise that will contain the response\n     */\n    obj.remove = function (uuid) {\n        const loggedUserUid = Configuration.loggedUser.get(\"uid\");\n        return obj.serviceCall({\n            url: fetchUrl.default(`/users/${loggedUserUid}/devices/2fa/oath/${uuid}`),\n            headers: { \"Accept-API-Version\": \"protocol=1.0,resource=1.0\" },\n            suppressEvents: true,\n            method: \"DELETE\"\n        });\n    };\n\n    /**\n     * Set status of the oath skip flag for devices\n     * @param {Boolean} skip The flag value\n     * @returns {Promise} promise that will contain the response\n     */\n    obj.setDevicesOathSkippable = function (skip) {\n        const loggedUserUid = Configuration.loggedUser.get(\"uid\");\n        const skipOption = { value: skip };\n        return obj.serviceCall({\n            url: fetchUrl.default(`/users/${loggedUserUid}/devices/2fa/oath?_action=skip`),\n            headers: { \"Accept-API-Version\": \"protocol=1.0,resource=1.0\" },\n            data: JSON.stringify(skipOption),\n            suppressEvents: true,\n            method: \"POST\"\n        });\n    };\n\n    /**\n     * Check status of the oath skip flag for devices\n     * @returns {Promise} promise that will contain the response\n     */\n    obj.checkDevicesOathSkippable = function () {\n        const loggedUserUid = Configuration.loggedUser.get(\"uid\");\n        return obj.serviceCall({\n            url: fetchUrl.default(`/users/${loggedUserUid}/devices/2fa/oath?_action=check`),\n            headers: { \"Accept-API-Version\": \"protocol=1.0,resource=1.0\" },\n            suppressEvents: true,\n            method: \"POST\"\n        }).then(function (statusData) {\n            return statusData.result;\n        });\n    };\n\n    /**\n     * Get array of oath devices\n     * @returns {Promise} promise that will contain the response\n     */\n    obj.getAll = function () {\n        const loggedUserUid = Configuration.loggedUser.get(\"uid\");\n        return obj.serviceCall({\n            url: fetchUrl.default(`/users/${loggedUserUid}/devices/2fa/oath?_queryFilter=true`),\n            headers: { \"Accept-API-Version\": \"protocol=1.0,resource=1.0\" },\n            suppressEvents: true\n        }).then((value) => value.result);\n    };\n\n    return obj;\n});\n"]}