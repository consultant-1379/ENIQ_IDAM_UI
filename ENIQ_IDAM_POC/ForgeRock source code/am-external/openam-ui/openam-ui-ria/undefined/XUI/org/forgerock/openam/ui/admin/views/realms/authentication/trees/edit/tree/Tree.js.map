{"version":3,"sources":["../../../../../../../../../../../../XUI/org/forgerock/openam/ui/admin/views/realms/authentication/trees/edit/tree/Tree.jsx"],"names":["INPUT_Y_OFFSET","SINGLE_OUTCOME_Y_OFFSET","OUTCOME_Y_SPACING","MULTI_OUTCOME_Y_OFFSET","computeInputPosition","measurements","x","y","computeOutcomePosition","outcomes","outcomeId","width","outcomeIndex","id","yOffset","getNewConnectionEnd","event","node","rect","getBoundingClientRect","clientX","scrollLeft","left","clientY","scrollTop","top","Tree","props","state","newConnectionFromNodeId","handleConnectionFinish","bind","handleConnectionStart","handleNewConnectionFinish","handleNewConnectionMove","setRef","ownerDocument","domNode","removeEventListener","nodeId","outcome","newConnectionEnd","addEventListener","setState","newConnectionFromOutcome","newConnectionEndX","newConnectionEndY","onNewConnection","element","handleDrag","draggingNodeId","draggingNodeX","draggingNodeY","handleDragStop","onNodeMove","handleNodeMeasure","dimensions","onNodeDimensionsChange","height","measurement","nodesWithConnectedInputs","nodes","result","connections","nodeComponents","selectedNodeId","onNodeSelect","connectionComponents","map","_outcomes","components","destinationNodeId","fromNodeMeasurements","toNodeMeasurements","start","end","flatten","value","fromNodeOutcomes","push","length","handleSvgClick","onNodeDeselect","connectDropTarget","containerHeight","canvasHeight","canvasWidth","propTypes","number","isRequired","func","objectOf","shape","_id","string","arrayOf","displayName","dropTarget","drop","monitor","component","authtreeEditorClientRect","iconRadius","mousePositionRelativeToElement","getInitialClientOffset","getInitialSourceClientOffset","position","getClientOffset","onNewNodeCreate","getItem","collect","connect"],"mappings":"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","file":"Tree.js","sourcesContent":["/*\n * The contents of this file are subject to the terms of the Common Development and\n * Distribution License (the License). You may not use this file except in compliance with the\n * License.\n *\n * You can obtain a copy of the License at legal/CDDLv1.0.txt. See the License for the\n * specific language governing permission and limitations under the License.\n *\n * When distributing Covered Software, include this CDDL Header Notice in each file and include\n * the License file at legal/CDDLv1.0.txt. If applicable, add the following below the CDDL\n * Header, with the fields enclosed by brackets [] replaced by your own identifying\n * information: \"Portions copyright [year] [name of copyright owner]\".\n *\n * Copyright 2017 ForgeRock AS.\n */\nimport { chain, contains, findIndex, map, mapValues, max, pluck, reduce, round, size, union, values } from \"lodash\";\nimport { DropTarget } from \"react-dnd\";\nimport classNames from \"classnames\";\nimport React, { Component, PropTypes } from \"react\";\n\nimport Connection from \"./Connection\";\nimport Node from \"./Node\";\nimport { NODE_TYPE } from \"org/forgerock/openam/ui/admin/views/realms/authentication/trees/edit/EditTreeDragItemTypes\";\nimport { TREE_PADDING } from \"./TreePadding\";\n\nconst INPUT_Y_OFFSET = 22;\nconst SINGLE_OUTCOME_Y_OFFSET = 22;\nconst OUTCOME_Y_SPACING = 17;\nconst MULTI_OUTCOME_Y_OFFSET = 55;\n\nconst computeInputPosition = (measurements) => ({\n    x: measurements.x,\n    y: measurements.y + INPUT_Y_OFFSET\n});\nconst computeOutcomePosition = (measurements, outcomes, outcomeId) => {\n    const width = measurements.width || 0;\n    const outcomeIndex = findIndex(outcomes, { id: outcomeId });\n    const yOffset = size(outcomes) > 1\n        ? MULTI_OUTCOME_Y_OFFSET + OUTCOME_Y_SPACING * outcomeIndex : SINGLE_OUTCOME_Y_OFFSET;\n    return {\n        x: measurements.x + width,\n        y: measurements.y + yOffset\n    };\n};\nconst getNewConnectionEnd = (event, node) => {\n    const rect = node.getBoundingClientRect();\n    return {\n        x: event.clientX + node.scrollLeft - rect.left,\n        y: event.clientY + node.scrollTop - rect.top\n    };\n};\n\nclass Tree extends Component {\n    constructor (props) {\n        super(props);\n        this.state = { newConnectionFromNodeId: null };\n        this.handleConnectionFinish = this.handleConnectionFinish.bind(this);\n        this.handleConnectionStart = this.handleConnectionStart.bind(this);\n        this.handleNewConnectionFinish = this.handleNewConnectionFinish.bind(this);\n        this.handleNewConnectionMove = this.handleNewConnectionMove.bind(this);\n        this.setRef = this.setRef.bind(this);\n    }\n\n    componentWillUnmount () {\n        const { ownerDocument } = this.domNode;\n        ownerDocument.removeEventListener(\"mousemove\", this.handleNewConnectionMove);\n        ownerDocument.removeEventListener(\"mouseup\", this.handleNewConnectionFinish);\n    }\n\n    handleConnectionStart (nodeId, event, outcome) {\n        const node = this.domNode;\n        const newConnectionEnd = getNewConnectionEnd(event, node);\n\n        const { ownerDocument } = node;\n        ownerDocument.addEventListener(\"mousemove\", this.handleNewConnectionMove);\n        ownerDocument.addEventListener(\"mouseup\", this.handleNewConnectionFinish);\n\n        this.setState({\n            newConnectionFromNodeId: nodeId,\n            newConnectionFromOutcome: outcome,\n            newConnectionEndX: newConnectionEnd.x,\n            newConnectionEndY: newConnectionEnd.y\n        });\n    }\n\n    handleNewConnectionMove (event) {\n        const newConnectionEnd = getNewConnectionEnd(event, this.domNode);\n        this.setState({\n            newConnectionEndX: newConnectionEnd.x,\n            newConnectionEndY: newConnectionEnd.y\n        });\n    }\n\n    handleNewConnectionFinish () {\n        const { ownerDocument } = this.domNode;\n        ownerDocument.removeEventListener(\"mousemove\", this.handleNewConnectionMove);\n        ownerDocument.removeEventListener(\"mouseup\", this.handleNewConnectionFinish);\n        this.setState({\n            newConnectionFromNodeId: null\n        });\n    }\n\n    handleConnectionFinish (nodeId) {\n        if (this.state.newConnectionFromNodeId !== null) {\n            this.props.onNewConnection(\n                this.state.newConnectionFromNodeId,\n                this.state.newConnectionFromOutcome,\n                nodeId\n            );\n        }\n    }\n\n    setRef (element) {\n        this.domNode = element;\n    }\n\n    render () {\n        const handleDrag = (id, x, y) => {\n            this.setState({\n                draggingNodeId: id,\n                draggingNodeX: x,\n                draggingNodeY: y\n            });\n        };\n        const handleDragStop = (id, x, y) => {\n            this.setState({ draggingNodeId: null });\n            this.props.onNodeMove(id, round(x), round(y));\n        };\n        const handleNodeMeasure = (id, dimensions) =>\n            this.props.onNodeDimensionsChange(id, dimensions.height, dimensions.width);\n\n        const measurements = mapValues(this.props.measurements, (measurement) => {\n            return measurement.id === this.state.draggingNodeId\n                ? { ...measurement, x: this.state.draggingNodeX, y: this.state.draggingNodeY }\n                : measurement;\n        });\n\n        const nodesWithConnectedInputs = reduce(pluck(this.props.nodes, \"connections\"),\n            (result, connections) => union(result, values(connections)), []);\n\n        const nodeComponents = map(this.props.nodes, (node, nodeId) => {\n            const measurement = measurements[nodeId];\n            const x = measurement ? measurement.x : 0;\n            const y = measurement ? measurement.y : 0;\n            return (\n                <Node\n                    id={ nodeId }\n                    isInputConnected={ contains(nodesWithConnectedInputs, nodeId) }\n                    isSelected={ nodeId === this.props.selectedNodeId }\n                    key={ nodeId }\n                    node={ node }\n                    onConnectionFinish={ this.handleConnectionFinish }\n                    onConnectionStart={ this.handleConnectionStart }\n                    onDrag={ handleDrag }\n                    onDragStop={ handleDragStop }\n                    onMeasure={ handleNodeMeasure }\n                    onSelect={ this.props.onNodeSelect }\n                    x={ x }\n                    y={ y }\n                />\n            );\n        });\n\n        const connectionComponents = chain(this.props.nodes)\n            .map((node, nodeId) => {\n                const connections = this.props.nodes[nodeId].connections;\n                const outcomes = this.props.nodes[nodeId]._outcomes;\n                const components = map(connections, (destinationNodeId, outcomeId) => {\n                    const fromNodeMeasurements = measurements[nodeId];\n                    const toNodeMeasurements = measurements[destinationNodeId];\n                    if (fromNodeMeasurements && toNodeMeasurements) {\n                        const start = {\n                            id: nodeId,\n                            width: fromNodeMeasurements.width,\n                            height: fromNodeMeasurements.height,\n                            ...computeOutcomePosition(fromNodeMeasurements, outcomes, outcomeId)\n                        };\n                        const end = {\n                            id: destinationNodeId,\n                            ...computeInputPosition(toNodeMeasurements)\n                        };\n                        return (\n                            <Connection\n                                end={ end }\n                                isInputForSelectedNode={ this.props.selectedNodeId === destinationNodeId }\n                                isOutputForSelectedNode={ this.props.selectedNodeId === nodeId }\n                                start={ start }\n                            />\n                        );\n                    } else {\n                        return null;\n                    }\n                });\n                return components;\n            })\n            .flatten()\n            .value();\n\n        if (this.state.newConnectionFromNodeId !== null) {\n            const fromNodeMeasurements = this.props.measurements[this.state.newConnectionFromNodeId];\n            const fromNodeOutcomes = this.props.nodes[this.state.newConnectionFromNodeId]._outcomes;\n            const start = {\n                id: this.state.newConnectionFromNodeId,\n                width: fromNodeMeasurements.width,\n                height: fromNodeMeasurements.height,\n                ...computeOutcomePosition(fromNodeMeasurements, fromNodeOutcomes, this.state.newConnectionFromOutcome)\n            };\n            const end = {\n                x: this.state.newConnectionEndX,\n                y: this.state.newConnectionEndY\n            };\n\n            connectionComponents.push(\n                <Connection end={ end } isNew key={ connectionComponents.length + 1 } start={ start } />\n            );\n        }\n\n        const handleSvgClick = () => this.props.onNodeDeselect();\n\n        return this.props.connectDropTarget(\n            <div\n                className={ classNames({\n                    \"authtree-editor-container\": true,\n                    \"authtree-editor-container-dragging-connector\": this.state.newConnectionFromNodeId !== null\n                }) }\n                style={ { height: this.props.containerHeight } }\n            >\n                <div className=\"authtree-editor\" ref={ this.setRef } >\n                    { nodeComponents }\n                    <svg\n                        className=\"authtree-editor-svg\"\n                        onClick={ handleSvgClick }\n                        style={ {\n                            height: this.props.canvasHeight,\n                            width: this.props.canvasWidth\n                        } }\n                    >\n                        { connectionComponents }\n                    </svg>\n                </div>\n            </div>\n        );\n    }\n}\n\nTree.propTypes = {\n    canvasHeight: PropTypes.number.isRequired,\n    canvasWidth: PropTypes.number.isRequired,\n    connectDropTarget: PropTypes.func.isRequired,\n    containerHeight: PropTypes.number.isRequired,\n    measurements: PropTypes.objectOf(PropTypes.shape({\n        _id: PropTypes.string.isRequired,\n        height: PropTypes.number.isRequired,\n        width: PropTypes.number.isRequired,\n        x: PropTypes.number.isRequired,\n        y: PropTypes.number.isRequired\n    })),\n    nodes: PropTypes.objectOf(PropTypes.shape({\n        _outcomes: PropTypes.arrayOf(PropTypes.shape({\n            id: PropTypes.string.isRequired,\n            displayName: PropTypes.string.isRequired\n        })).isRequired,\n        connections: PropTypes.objectOf(PropTypes.objectOf(PropTypes.string)).isRequired\n    })).isRequired,\n    onNewConnection: PropTypes.func.isRequired,\n    onNodeDeselect: PropTypes.func.isRequired,\n    onNodeDimensionsChange: PropTypes.func.isRequired,\n    onNodeMove: PropTypes.func.isRequired,\n    onNodeSelect: PropTypes.func.isRequired,\n    selectedNodeId: PropTypes.string.isRequired\n};\n\nconst dropTarget = {\n    drop (props, monitor, component) {\n        const authtreeEditorClientRect = component.domNode.getBoundingClientRect();\n        const iconRadius = 15;\n        const mousePositionRelativeToElement = {\n            x: monitor.getInitialClientOffset().x - monitor.getInitialSourceClientOffset().x,\n            y: monitor.getInitialClientOffset().y - monitor.getInitialSourceClientOffset().y\n        };\n        const position = {\n            x: monitor.getClientOffset().x -\n                authtreeEditorClientRect.left -\n                mousePositionRelativeToElement.x +\n                iconRadius,\n            y: monitor.getClientOffset().y -\n                authtreeEditorClientRect.top -\n                mousePositionRelativeToElement.y\n        };\n\n        position.x = max([position.x, TREE_PADDING]);\n        position.y = max([position.y, TREE_PADDING]);\n        props.onNewNodeCreate(monitor.getItem(), position);\n    }\n};\n\nfunction collect (connect) {\n    return {\n        connectDropTarget: connect.dropTarget()\n    };\n}\n\nexport default DropTarget(NODE_TYPE, dropTarget, collect)(Tree);\n"]}