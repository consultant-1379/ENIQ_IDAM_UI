{"version":3,"sources":["../../../../../../../../../XUI/org/forgerock/openam/ui/admin/views/common/navigation/createBreadcrumbs.js"],"names":["define","$","_","URIUtils","getAllfragments","compact","getCurrentFragment","split","getBaseURI","allFragments","take","join","getLastFragmentPattern","pattern","last","getPathFragments","droppedFragments","drop","getTitle","fragment","index","title","t","decodeURIComponent","createPath","base","shiftStartPosition","fragmentPaths","lastFragmentPattern","throwOnNoPattern","Error","fragmentTypes","FIRST_CRUMB","LAST_CRUMB","length","breadcrumbs","count","forEachRight","crumb","path","unshift"],"mappings":"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","file":"createBreadcrumbs.js","sourcesContent":["/*\n * The contents of this file are subject to the terms of the Common Development and\n * Distribution License (the License). You may not use this file except in compliance with the\n * License.\n *\n * You can obtain a copy of the License at legal/CDDLv1.0.txt. See the License for the\n * specific language governing permission and limitations under the License.\n *\n * When distributing Covered Software, include this CDDL Header Notice in each file and include\n * the License file at legal/CDDLv1.0.txt. If applicable, add the following below the CDDL\n * Header, with the fields enclosed by brackets [] replaced by your own identifying\n * information: \"Portions copyright [year] [name of copyright owner]\".\n *\n * Copyright 2016-2017 ForgeRock AS.\n */\n\ndefine([\n    \"jquery\",\n    \"lodash\",\n    \"org/forgerock/commons/ui/common/util/URIUtils\"\n], ($, _, URIUtils) => {\n    function getAllfragments () {\n        return _.compact(URIUtils.getCurrentFragment().split(\"/\"));\n    }\n\n    function getBaseURI (allFragments) {\n        return _.take(allFragments, 2).join(\"/\");\n    }\n\n    function getLastFragmentPattern (pattern) {\n        return _.last(pattern.split(\"/\"));\n    }\n\n    function getPathFragments (allFragments, droppedFragments) {\n        return _.drop(allFragments, droppedFragments);\n    }\n\n    function getTitle (fragment, index) {\n        const title = index === 0 ? $.t(`console.common.navigation.${fragment}`) : fragment;\n        return decodeURIComponent(title);\n    }\n\n    function createPath (allFragments, index, base) {\n        return `#${base}/${_.take(allFragments, index + 1).join(\"/\")}`;\n    }\n\n    function shiftStartPosition (fragmentPaths, lastFragmentPattern) {\n        return lastFragmentPattern === \"?\" ? 0 : 1;\n    }\n\n    function throwOnNoPattern (pattern) {\n        if (!pattern) {\n            throw new Error(\"[createBreadcrumbs] No \\\"pattern\\\" found.\");\n        }\n    }\n\n    return (pattern, droppedFragments = 2) => {\n        throwOnNoPattern(pattern);\n\n        /* Under Realms all routes will follow a repeating pattern of -\n         * COLLECTION, ACTION, INSTANCE, COLLECTION, ACTION, INSTANCE etc. Some examples of this might be\n         * PolicySet/  EDIT/   mySet/    Policies/   NEW\n         * Services/   EDIT/   audit/    CSV/        EDIT/   csv1\n         * Within the breadcrumb we use the following rules:\n         * 1: The last crumb (the current page) is just a title and never a link.\n         * 2: The first crumb will always be a link - unless its also the last crumb.\n         * 3: Instances are links.\n         * 4: Collections are not links, just titles.\n         * 5: Actions are not displayed - unless its also the last crumb.\n         * */\n\n        const allFragments = getAllfragments();\n        const base = getBaseURI(allFragments);\n        const fragmentPaths = getPathFragments(allFragments, droppedFragments);\n        const fragmentTypes = [\"INSTANCE\", \"ACTION\", \"COLLECTION\"];\n        const FIRST_CRUMB = 0;\n        const LAST_CRUMB = fragmentPaths.length - 1;\n        const breadcrumbs = [];\n        const lastFragmentPattern = getLastFragmentPattern(pattern);\n\n        /* We work this out in reverse because while the beginings of the routes vary, they all end in either an\n         * INSTANCE or the NEW-action. So the reversed pattern we look for becomes:\n         * INSTANCE, ACTION, COLLECTION, INSTANCE, ACTION, COLLECTION...\n         * NEW, COLLECTION, INSTANCE, ACTION, COLLECTION...\n         * */\n        let count = shiftStartPosition(fragmentPaths, lastFragmentPattern);\n        _.forEachRight(fragmentPaths, (crumb, index) => {\n            const title = getTitle(crumb, index);\n            const path = createPath(fragmentPaths, index, base);\n\n            if (index === LAST_CRUMB) {\n                breadcrumbs.unshift({ title });\n            } else if (fragmentTypes[count] === \"INSTANCE\" || index === FIRST_CRUMB) {\n                breadcrumbs.unshift({ title, path });\n            } else if (fragmentTypes[count] === \"COLLECTION\") {\n                breadcrumbs.unshift({ title });\n            }\n            count = count < fragmentTypes.length - 1 ? count + 1 : 0;\n        });\n\n        return breadcrumbs;\n    };\n});\n"]}