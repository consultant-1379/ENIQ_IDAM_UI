{"version":3,"sources":["../../../../../../../../XUI/org/forgerock/openam/ui/common/views/jsonSchema/FlatJSONSchemaView.js"],"names":["define","$","_","Backbone","JSONSchema","JSONValues","JSONEditorView","invokeOnRenderedAfterTimeout","callback","setTimeout","FlatJSONSchemaView","View","extend","initialize","options","schema","TypeError","values","defaults","showOnlyRequiredAndEmpty","render","requiredSchemaKeys","getRequiredPropertyKeys","emptyValueKeys","getEmptyValueKeys","requiredAndEmptyKeys","intersection","removeUnrequiredNonDefaultProperties","addDefaultProperties","subview","hideInheritance","displayTitle","el","$el","onRendered","isValid","getData","setData","data","watch","path"],"mappings":";;AAAA;;;;;;;;;;;;;;;;AAgBA;;;;;;;;;;;;;;;;AAgBAA,OAAO,CACH,QADG,EAEH,QAFG,EAGH,UAHG,EAIH,kDAJG,EAKH,kDALG,EAMH,wEANG,CAAP,EAOG,UAACC,CAAD,EAAIC,CAAJ,EAAOC,QAAP,EAAiBC,UAAjB,EAA6BC,UAA7B,EAAyCC,cAAzC,EAA4D;AAC3D;;;;;;;AAOA,aAASC,4BAAT,CAAuCC,QAAvC,EAAiD;AAC7C,YAAIA,QAAJ,EAAc;AACVC,uBAAWD,QAAX,EAAqB,CAArB;AACH;AACJ;;AAED,QAAME,qBAAqBP,SAASQ,IAAT,CAAcC,MAAd,CAAqB;AAC5CC,kBAD4C,sBAChCC,OADgC,EACvB;AACjB,gBAAI,EAAEA,QAAQC,MAAR,YAA0BX,UAA5B,CAAJ,EAA6C;AACzC,sBAAM,IAAIY,SAAJ,CAAc,4EAAd,CAAN;AACH;AACD,gBAAI,EAAEF,QAAQG,MAAR,YAA0BZ,UAA5B,CAAJ,EAA6C;AACzC,sBAAM,IAAIW,SAAJ,CAAc,4EAAd,CAAN;AACH;;AAED,iBAAKF,OAAL,GAAeZ,EAAEgB,QAAF,CAAWJ,OAAX,EAAoB;AAC/BK,0CAA0B;AADK,aAApB,CAAf;AAGH,SAZ2C;AAa5CC,cAb4C,oBAalC;AACN,gBAAIL,SAAS,KAAKD,OAAL,CAAaC,MAA1B;;AAEA,gBAAI,KAAKD,OAAL,CAAaK,wBAAjB,EAA2C;AACvC,oBAAME,qBAAqB,KAAKP,OAAL,CAAaC,MAAb,CAAoBO,uBAApB,EAA3B;AACA,oBAAMC,iBAAiB,KAAKT,OAAL,CAAaG,MAAb,CAAoBO,iBAApB,EAAvB;AACA,oBAAMC,uBAAuBvB,EAAEwB,YAAF,CAAeL,kBAAf,EAAmCE,cAAnC,CAA7B;AACAR,yBAASA,OAAOY,oCAAP,GAA8CC,oBAA9C,CAAmEH,oBAAnE,CAAT;AACH;;AAED,iBAAKI,OAAL,GAAe,IAAIvB,cAAJ,CAAmB;AAC9BwB,iCAAiB,KAAKhB,OAAL,CAAagB,eADA;AAE9BC,8BAAc,KAFgB;AAG9BC,oBAAI,KAAKC,GAHqB;AAI9BlB,8BAJ8B;AAK9BE,wBAAQ,KAAKH,OAAL,CAAaG;AALS,aAAnB,EAMZG,MANY,EAAf;;AAQAb,yCAA6B,KAAKO,OAAL,CAAaoB,UAA1C;;AAEA,mBAAO,IAAP;AACH,SAlC2C;AAmC5CC,eAnC4C,qBAmCjC;AACP,mBAAO,CAAC,KAAKN,OAAN,IAAiB,KAAKA,OAAL,CAAaM,OAAb,EAAxB;AACH,SArC2C;AAsC5CC,eAtC4C,qBAsC1B;AACd,gBAAI,KAAKP,OAAT,EAAkB;AAAA;;AACd,uBAAO,iBAAKA,OAAL,EAAaO,OAAb,2BAAP;AACH;AACJ,SA1C2C;AA2C5CC,eA3C4C,mBA2CnCC,IA3CmC,EA2C7B;AACX,gBAAI,KAAKT,OAAT,EAAkB;AACd;AACA,qBAAKf,OAAL,CAAaG,MAAb,GAAsB,KAAKH,OAAL,CAAaG,MAAb,CAAoBL,MAApB,CAA2B0B,IAA3B,CAAtB;AACA,uBAAO,KAAKT,OAAL,CAAaQ,OAAb,CAAqBC,IAArB,CAAP;AACH;AACJ,SAjD2C;AAkD5CC,aAlD4C,iBAkDrCC,IAlDqC,EAkD/BhC,QAlD+B,EAkDrB;AACnB,gBAAI,KAAKqB,OAAT,EAAkB;AACd,qBAAKA,OAAL,CAAaU,KAAb,CAAmBC,IAAnB,EAAyBhC,QAAzB;AACH;AACJ;AAtD2C,KAArB,CAA3B;;AAyDA,WAAOE,kBAAP;AACH,CA/ED","file":"FlatJSONSchemaView.js","sourcesContent":["/*\n * The contents of this file are subject to the terms of the Common Development and\n * Distribution License (the License). You may not use this file except in compliance with the\n * License.\n *\n * You can obtain a copy of the License at legal/CDDLv1.0.txt. See the License for the\n * specific language governing permission and limitations under the License.\n *\n * When distributing Covered Software, include this CDDL Header Notice in each file and include\n * the License file at legal/CDDLv1.0.txt. If applicable, add the following below the CDDL\n * Header, with the fields enclosed by brackets [] replaced by your own identifying\n * information: \"Portions copyright [year] [name of copyright owner]\".\n *\n * Copyright 2016-2017 ForgeRock AS.\n */\n\n/**\n  * View that takes <code>JSONSchema</code> and <code>JSONValue</code> objects and renders them in a flat structure.\n  * <p/>\n  * This view only supports JSONSchema objects which <strong>are not collections</strong> (determined by\n  * <code>#isCollection</code> upon <code>JSONSchema</code>) and outputs a simple list of input fields related to the\n  * specification of the JSON Schema.\n  * <p/>\n  * e.g.<br>\n  * <code>\n  * <hr/>\n  * Label 1 | &lt;input here&gt; |<br>\n  * Label 2 | &lt;input here&gt; |<br>\n  * <hr/>\n  * </code>\n  * @module org/forgerock/openam/ui/common/views/jsonSchema/FlatJSONSchemaView\n  */\ndefine([\n    \"jquery\",\n    \"lodash\",\n    \"backbone\",\n    \"org/forgerock/openam/ui/common/models/JSONSchema\",\n    \"org/forgerock/openam/ui/common/models/JSONValues\",\n    \"org/forgerock/openam/ui/common/views/jsonSchema/editors/JSONEditorView\"\n], ($, _, Backbone, JSONSchema, JSONValues, JSONEditorView) => {\n    /**\n     * There is no reliable method of knowing if the form rendered by the JSON Editor has finished being added to the\n     * DOM. We do however wish to signal when render is complete so views can perform actions (e.g. enabling buttons\n     * when the form is ready for input). The workaround is to add the callback to the browser event queue using\n     * setTimeout meaning his callback will be executed after the render cycle has complete.\n     * @param  {Function} callback Function to invoke after the timeout has expired\n     */\n    function invokeOnRenderedAfterTimeout (callback) {\n        if (callback) {\n            setTimeout(callback, 0);\n        }\n    }\n\n    const FlatJSONSchemaView = Backbone.View.extend({\n        initialize (options) {\n            if (!(options.schema instanceof JSONSchema)) {\n                throw new TypeError(\"[FlatJSONSchemaView] \\\"schema\\\" argument is not an instance of JSONSchema.\");\n            }\n            if (!(options.values instanceof JSONValues)) {\n                throw new TypeError(\"[FlatJSONSchemaView] \\\"values\\\" argument is not an instance of JSONValues.\");\n            }\n\n            this.options = _.defaults(options, {\n                showOnlyRequiredAndEmpty: false\n            });\n        },\n        render () {\n            let schema = this.options.schema;\n\n            if (this.options.showOnlyRequiredAndEmpty) {\n                const requiredSchemaKeys = this.options.schema.getRequiredPropertyKeys();\n                const emptyValueKeys = this.options.values.getEmptyValueKeys();\n                const requiredAndEmptyKeys = _.intersection(requiredSchemaKeys, emptyValueKeys);\n                schema = schema.removeUnrequiredNonDefaultProperties().addDefaultProperties(requiredAndEmptyKeys);\n            }\n\n            this.subview = new JSONEditorView({\n                hideInheritance: this.options.hideInheritance,\n                displayTitle: false,\n                el: this.$el,\n                schema,\n                values: this.options.values\n            }).render();\n\n            invokeOnRenderedAfterTimeout(this.options.onRendered);\n\n            return this;\n        },\n        isValid () {\n            return !this.subview || this.subview.isValid();\n        },\n        getData (...args) {\n            if (this.subview) {\n                return this.subview.getData(...args);\n            }\n        },\n        setData (data) {\n            if (this.subview) {\n                // Update our local copy of values so a later invocation of #render will render the values that were last set\n                this.options.values = this.options.values.extend(data);\n                return this.subview.setData(data);\n            }\n        },\n        watch (path, callback) {\n            if (this.subview) {\n                this.subview.watch(path, callback);\n            }\n        }\n    });\n\n    return FlatJSONSchemaView;\n});\n"]}