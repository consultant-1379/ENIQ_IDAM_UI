{"version":3,"sources":["../../../../../../../XUI/org/forgerock/openam/ui/common/services/SiteConfigurationService.js"],"names":["define","$","Configuration","ServerService","isRealmChanged","getCurrentFragmentParamString","SessionService","UserProfileView","default","obj","setRequireMapConfig","serverInfo","kbaEnabled","require","tab","registerTab","getConfiguration","successCallback","errorCallback","suppressEvents","then","response","checkForDifferences","deferred","Deferred","updateSessionInfo","window","location","replace","resolve","error","status","pathname","reject"],"mappings":";;AAAA;;;;;;;;;;;;;;;;AAgBAA,OAAO,CACH,QADG,EAEH,oDAFG,EAGH,uDAHG,EAIH,oDAJG,EAKH,uEALG,EAMH,sDANG,EAOH,iBAPG,CAAP,EAQG,UAACC,CAAD,EAAIC,aAAJ,EAAmBC,aAAnB,EAAkCC,cAAlC,EAAkDC,6BAAlD,EAAiFC,cAAjF,EACCC,eADD,EACqB;AACpBH,qBAAiBA,eAAeI,OAAhC;AACAH,oCAAgCA,8BAA8BG,OAA9D;;AAEA,QAAMC,MAAM,EAAZ;AACA,QAAMC,sBAAsB,SAAtBA,mBAAsB,CAAUC,UAAV,EAAsB;AAC9C,YAAIA,WAAWC,UAAX,KAA0B,MAA9B,EAAsC;AAClCC,oBAAQ,CAAC,yDAAD,CAAR,EAAqE,UAACC,GAAD,EAAS;AAC1EP,gCAAgBQ,WAAhB,CAA4BD,GAA5B;AACH,aAFD;AAGH;AACD,eAAOH,UAAP;AACH,KAPD;;AASA;;;;;AAKAF,QAAIO,gBAAJ,GAAuB,UAAUC,eAAV,EAA2BC,aAA3B,EAA0C;AAC7Df,sBAAca,gBAAd,CAA+B,EAAEG,gBAAgB,IAAlB,EAA/B,EAAyDC,IAAzD,CAA8D,UAACC,QAAD,EAAc;AACxEX,gCAAoBW,QAApB;AACAJ,4BAAgBI,QAAhB;AACH,SAHD,EAGGH,aAHH;AAIH,KALD;;AAOA;;;;AAIAT,QAAIa,mBAAJ,GAA0B,YAAY;AAClC,YAAMC,WAAWtB,EAAEuB,QAAF,EAAjB;;AAEAlB,uBAAemB,iBAAf,GAAmCL,IAAnC,CAAwC,UAACC,QAAD,EAAc;AAClD,gBAAIjB,gBAAJ,EAAsB;AAClBsB,uBAAOC,QAAP,CAAgBC,OAAhB,mBAAwCvB,+BAAxC;AACH;AACDkB,qBAASM,OAAT,CAAiBR,QAAjB;AACH,SALD,EAKG,UAACS,KAAD,EAAW;AACV,gBAAIA,MAAMC,MAAN,KAAiB,GAArB,EAA0B;AACtBL,uBAAOC,QAAP,CAAgBK,QAAhB,GAA8BN,OAAOC,QAAP,CAAgBK,QAA9C;AACAT,yBAASU,MAAT,CAAgBH,KAAhB;AACH,aAHD,MAGO;AACHP,yBAASM,OAAT;AACH;AACJ,SAZD;;AAcA,eAAON,QAAP;AACH,KAlBD;;AAoBA,WAAOd,GAAP;AACH,CA5DD","file":"SiteConfigurationService.js","sourcesContent":["/*\n * The contents of this file are subject to the terms of the Common Development and\n * Distribution License (the License). You may not use this file except in compliance with the\n * License.\n *\n * You can obtain a copy of the License at legal/CDDLv1.0.txt. See the License for the\n * specific language governing permission and limitations under the License.\n *\n * When distributing Covered Software, include this CDDL Header Notice in each file and include\n * the License file at legal/CDDLv1.0.txt. If applicable, add the following below the CDDL\n * Header, with the fields enclosed by brackets [] replaced by your own identifying\n * information: \"Portions copyright [year] [name of copyright owner]\".\n *\n * Copyright 2014-2017 ForgeRock AS.\n */\n\ndefine([\n    \"jquery\",\n    \"org/forgerock/commons/ui/common/main/Configuration\",\n    \"org/forgerock/openam/ui/common/services/ServerService\",\n    \"org/forgerock/openam/ui/common/util/isRealmChanged\",\n    \"org/forgerock/openam/ui/common/util/uri/getCurrentFragmentParamString\",\n    \"org/forgerock/openam/ui/user/services/SessionService\",\n    \"UserProfileView\"\n], ($, Configuration, ServerService, isRealmChanged, getCurrentFragmentParamString, SessionService,\n    UserProfileView) => {\n    isRealmChanged = isRealmChanged.default;\n    getCurrentFragmentParamString = getCurrentFragmentParamString.default;\n\n    const obj = {};\n    const setRequireMapConfig = function (serverInfo) {\n        if (serverInfo.kbaEnabled === \"true\") {\n            require([\"org/forgerock/commons/ui/user/profile/UserProfileKBATab\"], (tab) => {\n                UserProfileView.registerTab(tab);\n            });\n        }\n        return serverInfo;\n    };\n\n    /**\n     * Makes a HTTP request to the server to get its configuration\n     * @param {Function} successCallback Success callback function\n     * @param {Function} errorCallback   Error callback function\n     */\n    obj.getConfiguration = function (successCallback, errorCallback) {\n        ServerService.getConfiguration({ suppressEvents: true }).then((response) => {\n            setRequireMapConfig(response);\n            successCallback(response);\n        }, errorCallback);\n    };\n\n    /**\n     * Checks if realm has changed. Redirects to switch realm page if so.\n     * @returns {Promise} promise empty promise\n     */\n    obj.checkForDifferences = function () {\n        const deferred = $.Deferred();\n\n        SessionService.updateSessionInfo().then((response) => {\n            if (isRealmChanged()) {\n                window.location.replace(`#switchRealm/${getCurrentFragmentParamString()}`);\n            }\n            deferred.resolve(response);\n        }, (error) => {\n            if (error.status === 503) {\n                window.location.pathname = `${window.location.pathname}503.html`;\n                deferred.reject(error);\n            } else {\n                deferred.resolve();\n            }\n        });\n\n        return deferred;\n    };\n\n    return obj;\n});\n"]}