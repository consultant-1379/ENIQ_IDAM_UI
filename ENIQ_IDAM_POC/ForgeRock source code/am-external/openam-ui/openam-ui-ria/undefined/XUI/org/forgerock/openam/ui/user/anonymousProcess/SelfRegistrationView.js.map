{"version":3,"sources":["../../../../../../../XUI/org/forgerock/openam/ui/user/anonymousProcess/SelfRegistrationView.js"],"names":["define","_","Constants","AnonymousProcessView","SelfRegistrationView","KBAView","Configuration","RESTLoginView","shouldRouteToLoginView","response","destination","type","tag","shouldAutoLogin","AMSelfRegistrationView","prototype","endpoint","SELF_SERVICE_REGISTER","extend","renderProcessState","get","realm","handleExistingSession","additions","window","location","href","call","then","render","requirements","properties","kba"],"mappings":";;AAAA;;;;;;;;;;;;;;;;AAgBAA,OAAO,CACH,QADG,EAEH,+CAFG,EAGH,oEAHG,EAIH,qEAJG,EAKH,wDALG,EAMH,oDANG,EAOH,kDAPG,CAAP,EAQG,UAACC,CAAD,EAAIC,SAAJ,EAAeC,oBAAf,EAAqCC,oBAArC,EAA2DC,OAA3D,EAAoEC,aAApE,EAAmFC,aAAnF,EAAqG;AACpG,aAASC,sBAAT,CAAiCC,QAAjC,EAA2CC,WAA3C,EAAwD;AACpD,eAAOD,SAASE,IAAT,KAAkB,kBAAlB,IAAwCF,SAASG,GAAT,KAAiB,KAAzD,IAAkEF,gBAAgB,OAAzF;AACH;;AAED,aAASG,eAAT,CAA0BJ,QAA1B,EAAoCC,WAApC,EAAiD;AAC7C,eAAOD,SAASE,IAAT,KAAkB,gBAAlB,IAAsCF,SAASG,GAAT,KAAiB,KAAvD,IAAgEF,gBAAgB,YAAvF;AACH;;AAED,aAASI,sBAAT,GAAmC,CAAG;;AAEtCA,2BAAuBC,SAAvB,GAAmCX,oBAAnC;AACAU,2BAAuBC,SAAvB,CAAiCC,QAAjC,GAA4Cd,UAAUe,qBAAtD;;AAEAhB,MAAEiB,MAAF,CAASJ,uBAAuBC,SAAhC,EAA2CZ,qBAAqBY,SAAhE;;AAEAD,2BAAuBC,SAAvB,CAAiCI,kBAAjC,GAAsD,UAAUV,QAAV,EAAoB;AACtE,YAAMC,cAAcT,EAAEmB,GAAF,CAAMd,aAAN,EAAqB,kDAArB,CAApB;AACA,YAAMe,QAAQpB,EAAEmB,GAAF,CAAMd,aAAN,EAAqB,kBAArB,EAAyC,EAAzC,CAAd;;AAEA,YAAIO,gBAAgBJ,QAAhB,EAA0BC,WAA1B,CAAJ,EAA4C;AACxCH,0BAAce,qBAAd,CAAoCb,SAASc,SAA7C;AACH,SAFD,MAEO,IAAIf,uBAAuBC,QAAvB,EAAiCC,WAAjC,CAAJ,EAAmD;AACtDc,mBAAOC,QAAP,CAAgBC,IAAhB,cAAgCL,KAAhC;AACH,SAFM,MAEA;AACHlB,iCAAqBY,SAArB,CAA+BI,kBAA/B,CAAkDQ,IAAlD,CAAuD,IAAvD,EAA6DlB,QAA7D,EAAuEmB,IAAvE,CAA4E,YAAM;AAC9E,oBAAInB,SAASE,IAAT,KAAkB,kCAAlB,IAAwDF,SAASG,GAAT,KAAiB,SAA7E,EAAwF;AACpFP,4BAAQwB,MAAR,CAAepB,SAASqB,YAAT,CAAsBC,UAAtB,CAAiCC,GAAhD;AACH;AACJ,aAJD;AAKH;AACJ,KAfD;;AAiBA,WAAO,IAAIlB,sBAAJ,EAAP;AACH,CA1CD","file":"SelfRegistrationView.js","sourcesContent":["/*\n * The contents of this file are subject to the terms of the Common Development and\n * Distribution License (the License). You may not use this file except in compliance with the\n * License.\n *\n * You can obtain a copy of the License at legal/CDDLv1.0.txt. See the License for the\n * specific language governing permission and limitations under the License.\n *\n * When distributing Covered Software, include this CDDL Header Notice in each file and include\n * the License file at legal/CDDLv1.0.txt. If applicable, add the following below the CDDL\n * Header, with the fields enclosed by brackets [] replaced by your own identifying\n * information: \"Portions copyright [year] [name of copyright owner]\".\n *\n * Copyright 2015-2017 ForgeRock AS.\n */\n\ndefine([\n    \"lodash\",\n    \"org/forgerock/openam/ui/common/util/Constants\",\n    \"org/forgerock/openam/ui/user/anonymousProcess/AnonymousProcessView\",\n    \"org/forgerock/commons/ui/user/anonymousProcess/SelfRegistrationView\",\n    \"org/forgerock/commons/ui/user/anonymousProcess/KBAView\",\n    \"org/forgerock/commons/ui/common/main/Configuration\",\n    \"org/forgerock/openam/ui/user/login/RESTLoginView\"\n], (_, Constants, AnonymousProcessView, SelfRegistrationView, KBAView, Configuration, RESTLoginView) => {\n    function shouldRouteToLoginView (response, destination) {\n        return response.type === \"selfRegistration\" && response.tag === \"end\" && destination === \"login\";\n    }\n\n    function shouldAutoLogin (response, destination) {\n        return response.type === \"autoLoginStage\" && response.tag === \"end\" && destination === \"auto-login\";\n    }\n\n    function AMSelfRegistrationView () { }\n\n    AMSelfRegistrationView.prototype = SelfRegistrationView;\n    AMSelfRegistrationView.prototype.endpoint = Constants.SELF_SERVICE_REGISTER;\n\n    _.extend(AMSelfRegistrationView.prototype, AnonymousProcessView.prototype);\n\n    AMSelfRegistrationView.prototype.renderProcessState = function (response) {\n        const destination = _.get(Configuration, \"globalData.successfulUserRegistrationDestination\");\n        const realm = _.get(Configuration, \"globalData.realm\", \"\");\n\n        if (shouldAutoLogin(response, destination)) {\n            RESTLoginView.handleExistingSession(response.additions);\n        } else if (shouldRouteToLoginView(response, destination)) {\n            window.location.href = `#login${realm}`;\n        } else {\n            AnonymousProcessView.prototype.renderProcessState.call(this, response).then(() => {\n                if (response.type === \"kbaSecurityAnswerDefinitionStage\" && response.tag === \"initial\") {\n                    KBAView.render(response.requirements.properties.kba);\n                }\n            });\n        }\n    };\n\n    return new AMSelfRegistrationView();\n});\n"]}