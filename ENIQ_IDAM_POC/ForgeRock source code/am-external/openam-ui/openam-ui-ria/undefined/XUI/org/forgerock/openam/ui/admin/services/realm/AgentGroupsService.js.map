{"version":3,"sources":["../../../../../../../../XUI/org/forgerock/openam/ui/admin/services/realm/AgentGroupsService.jsm"],"names":["getAll","get","getSchema","remove","getInitialState","create","update","obj","host","context","realm","type","serviceCall","url","headers","id","encodeURIComponent","ids","promises","all","getTemplate","then","response","schema","values","data","JSON","stringify","suppressSpinner","errorsHandlers","status"],"mappings":"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","file":"AgentGroupsService.js","sourcesContent":["/*\n * The contents of this file are subject to the terms of the Common Development and\n * Distribution License (the License). You may not use this file except in compliance with the\n * License.\n *\n * You can obtain a copy of the License at legal/CDDLv1.0.txt. See the License for the\n * specific language governing permission and limitations under the License.\n *\n * When distributing Covered Software, include this CDDL Header Notice in each file and include\n * the License file at legal/CDDLv1.0.txt. If applicable, add the following below the CDDL\n * Header, with the fields enclosed by brackets [] replaced by your own identifying\n * information: \"Portions copyright [year] [name of copyright owner]\".\n *\n * Copyright 2017 ForgeRock AS.\n */\n\n/**\n * @module org/forgerock/openam/ui/admin/services/realm/AgentGroupsService\n */\n\nimport { map, omit } from \"lodash\";\n\nimport AbstractDelegate from \"org/forgerock/commons/ui/common/main/AbstractDelegate\";\nimport Constants from \"org/forgerock/commons/ui/common/util/Constants\";\nimport fetchUrl from \"org/forgerock/openam/ui/common/services/fetchUrl\";\nimport Promise from \"org/forgerock/openam/ui/common/util/Promise\";\n\nconst obj = new AbstractDelegate(`${Constants.host}${Constants.context}/json`);\n\nexport function getAll (realm, type) {\n    return obj.serviceCall({\n        url: fetchUrl(`/realm-config/agents/groups/${type}?_queryFilter=true`, { realm }),\n        headers: { \"Accept-API-Version\": \"protocol=2.0,resource=1.0\" }\n    });\n}\n\nexport function get (realm, type, id) {\n    return obj.serviceCall({\n        url: fetchUrl(`/realm-config/agents/groups/${type}/${encodeURIComponent(id)}`, { realm }),\n        headers: { \"Accept-API-Version\": \"protocol=2.0,resource=1.0\" }\n    });\n}\n\nexport function getSchema (realm, type) {\n    return obj.serviceCall({\n        url: fetchUrl(`/realm-config/agents/groups/${type}?_action=schema`, { realm }),\n        headers: { \"Accept-API-Version\": \"protocol=2.0,resource=1.0\" },\n        type: \"POST\"\n    });\n}\n\nexport function remove (realm, type, ids) {\n    const promises = map(ids, (id) => obj.serviceCall({\n        url: fetchUrl(`/realm-config/agents/groups/${type}/${encodeURIComponent(id)}`, { realm }),\n        headers: { \"Accept-API-Version\": \"protocol=2.0,resource=1.0\" },\n        type: \"DELETE\"\n    }));\n\n    return Promise.all(promises);\n}\n\nexport function getInitialState (realm, type) {\n    function getTemplate () {\n        return obj.serviceCall({\n            url: fetchUrl(`/realm-config/agents/groups/${type}?_action=template`, { realm }),\n            headers: { \"Accept-API-Version\": \"protocol=1.0,resource=1.0\" },\n            type: \"POST\"\n        });\n    }\n\n    return Promise.all([getSchema(realm, type), getTemplate()]).then((response) => ({\n        schema: response[0],\n        values: response[1]\n    }));\n}\n\nexport function create (realm, type, data, id) {\n    return obj.serviceCall({\n        url: fetchUrl(`/realm-config/agents/groups/${type}/${encodeURIComponent(id)}`, { realm }),\n        type: \"PUT\",\n        headers: {\n            \"Accept-API-Version\": \"protocol=2.0,resource=1.0\",\n            \"If-None-Match\": \"*\"\n        },\n        data: JSON.stringify(data),\n        suppressSpinner: true,\n        errorsHandlers: { \"incorrectRevisionError\": { status: 412 } }\n    });\n}\n\nexport function update (realm, type, data, id) {\n    return obj.serviceCall({\n        url: fetchUrl(`/realm-config/agents/groups/${type}/${encodeURIComponent(id)}`, { realm }),\n        type: \"PUT\",\n        headers: { \"Accept-API-Version\": \"protocol=2.0,resource=1.0\" },\n        // CREST Protocol 2.0 payload must not transmit _rev\n        data: JSON.stringify(omit(data, \"_rev\"))\n    });\n}\n"]}