{"version":3,"sources":["../../../../../../../../../XUI/org/forgerock/openam/ui/admin/services/realm/authentication/NodeService.jsm"],"names":["createOrUpdate","get","getAllTypes","getSchema","getTemplate","listOutcomes","remove","obj","host","context","PATH","HEADERS","realm","data","type","id","serviceCall","url","headers","JSON","stringify","suppressSpinner"],"mappings":";;;;;;YA6BgBA,c,GAAAA,c;YASAC,G,GAAAA,G;YAQAC,W,GAAAA,W;YASAC,S,GAAAA,S;YASAC,W,GAAAA,W;YASAC,Y,GAAAA,Y;YASAC,M,GAAAA,M;;;;;;;;;;;;;;AAlFhB;;;;;;;;;;;;;;;;AAgBA;;;AASA,QAAMC,MAAM,oCAAwB,oBAAUC,IAAlC,GAAyC,oBAAUC,OAAnD,WAAZ;AACA,QAAMC,OAAO,wDAAb;AACA,QAAMC,UAAU,EAAE,sBAAsB,2BAAxB,EAAhB;;AAEO,aAASX,cAAT,CAAyBY,KAAzB,EAAgCC,IAAhC,EAAsCC,IAAtC,EAA4CC,EAA5C,EAAgD;AACnD,eAAOR,IAAIS,WAAJ,CAAgB;AACnBC,iBAAK,wBAAYP,IAAZ,SAAoBI,IAApB,SAA4BC,EAA5B,EAAkC,EAAEH,YAAF,EAAlC,CADc;AAEnBE,kBAAM,KAFa;AAGnBI,qBAASP,OAHU;AAInBE,kBAAMM,KAAKC,SAAL,CAAe,kBAAKP,IAAL,EAAW,MAAX,CAAf;AAJa,SAAhB,CAAP;AAMH;;AAEM,aAASZ,GAAT,CAAcW,KAAd,EAAqBE,IAArB,EAA2BC,EAA3B,EAA+B;AAClC,eAAOR,IAAIS,WAAJ,CAAgB;AACnBC,iBAAK,wBAAYP,IAAZ,SAAoBI,IAApB,SAA4BC,EAA5B,EAAkC,EAAEH,YAAF,EAAlC,CADc;AAEnBM,qBAASP,OAFU;AAGnBU,6BAAiB;AAHE,SAAhB,CAAP;AAKH;;AAEM,aAASnB,WAAT,CAAsBU,KAAtB,EAA6B;AAChC,eAAOL,IAAIS,WAAJ,CAAgB;AACnBC,iBAAK,wBAAYP,IAAZ,2BAAwC,EAAEE,YAAF,EAAxC,CADc;AAEnBM,qBAASP,OAFU;AAGnBU,6BAAiB,IAHE;AAInBP,kBAAM;AAJa,SAAhB,CAAP;AAMH;;AAEM,aAASX,SAAT,CAAoBS,KAApB,EAA2BE,IAA3B,EAAiC;AACpC,eAAOP,IAAIS,WAAJ,CAAgB;AACnBC,iBAAK,wBAAYP,IAAZ,SAAoBI,IAApB,sBAA2C,EAAEF,YAAF,EAA3C,CADc;AAEnBM,qBAASP,OAFU;AAGnBU,6BAAiB,IAHE;AAInBP,kBAAM;AAJa,SAAhB,CAAP;AAMH;;AAEM,aAASV,WAAT,CAAsBQ,KAAtB,EAA6BE,IAA7B,EAAmC;AACtC,eAAOP,IAAIS,WAAJ,CAAgB;AACnBC,iBAAK,wBAAYP,IAAZ,SAAoBI,IAApB,wBAA6C,EAAEF,YAAF,EAA7C,CADc;AAEnBM,qBAASP,OAFU;AAGnBU,6BAAiB,IAHE;AAInBP,kBAAM;AAJa,SAAhB,CAAP;AAMH;;AAEM,aAAST,YAAT,CAAuBO,KAAvB,EAA8BC,IAA9B,EAAoCC,IAApC,EAA0C;AAC7C,eAAOP,IAAIS,WAAJ,CAAgB;AACnBC,iBAAK,wBAAYP,IAAZ,SAAoBI,IAApB,4BAAiD,EAAEF,YAAF,EAAjD,CADc;AAEnBM,qBAASP,OAFU;AAGnBG,kBAAM,MAHa;AAInBD,kBAAMM,KAAKC,SAAL,CAAeP,IAAf;AAJa,SAAhB,CAAP;AAMH;;AAEM,aAASP,MAAT,CAAiBM,KAAjB,EAAwBE,IAAxB,EAA8BC,EAA9B,EAAkC;AACrC,eAAOR,IAAIS,WAAJ,CAAgB;AACnBC,iBAAK,wBAAYP,IAAZ,SAAoBI,IAApB,SAA4BC,EAA5B,EAAkC,EAAEH,YAAF,EAAlC,CADc;AAEnBM,qBAASP,OAFU;AAGnBU,6BAAiB,IAHE;AAInBP,kBAAM;AAJa,SAAhB,CAAP;AAMH","file":"NodeService.js","sourcesContent":["/*\n * The contents of this file are subject to the terms of the Common Development and\n * Distribution License (the License). You may not use this file except in compliance with the\n * License.\n *\n * You can obtain a copy of the License at legal/CDDLv1.0.txt. See the License for the\n * specific language governing permission and limitations under the License.\n *\n * When distributing Covered Software, include this CDDL Header Notice in each file and include\n * the License file at legal/CDDLv1.0.txt. If applicable, add the following below the CDDL\n * Header, with the fields enclosed by brackets [] replaced by your own identifying\n * information: \"Portions copyright [year] [name of copyright owner]\".\n *\n * Copyright 2017 ForgeRock AS.\n */\n\n/**\n * @module org/forgerock/openam/ui/admin/services/realm/authentication/NodeService\n */\nimport { omit } from \"lodash\";\n\nimport AbstractDelegate from \"org/forgerock/commons/ui/common/main/AbstractDelegate\";\nimport Constants from \"org/forgerock/commons/ui/common/util/Constants\";\nimport fetchUrl from \"org/forgerock/openam/ui/common/services/fetchUrl\";\n\nconst obj = new AbstractDelegate(`${Constants.host}${Constants.context}/json`);\nconst PATH = \"/realm-config/authentication/authenticationtrees/nodes\";\nconst HEADERS = { \"Accept-API-Version\": \"protocol=2.0,resource=1.0\" };\n\nexport function createOrUpdate (realm, data, type, id) {\n    return obj.serviceCall({\n        url: fetchUrl(`${PATH}/${type}/${id}`, { realm }),\n        type: \"PUT\",\n        headers: HEADERS,\n        data: JSON.stringify(omit(data, \"_rev\"))\n    });\n}\n\nexport function get (realm, type, id) {\n    return obj.serviceCall({\n        url: fetchUrl(`${PATH}/${type}/${id}`, { realm }),\n        headers: HEADERS,\n        suppressSpinner: true\n    });\n}\n\nexport function getAllTypes (realm) {\n    return obj.serviceCall({\n        url: fetchUrl(`${PATH}?_action=getAllTypes`, { realm }),\n        headers: HEADERS,\n        suppressSpinner: true,\n        type: \"POST\"\n    });\n}\n\nexport function getSchema (realm, type) {\n    return obj.serviceCall({\n        url: fetchUrl(`${PATH}/${type}?_action=schema`, { realm }),\n        headers: HEADERS,\n        suppressSpinner: true,\n        type: \"POST\"\n    });\n}\n\nexport function getTemplate (realm, type) {\n    return obj.serviceCall({\n        url: fetchUrl(`${PATH}/${type}?_action=template`, { realm }),\n        headers: HEADERS,\n        suppressSpinner: true,\n        type: \"POST\"\n    });\n}\n\nexport function listOutcomes (realm, data, type) {\n    return obj.serviceCall({\n        url: fetchUrl(`${PATH}/${type}?_action=listOutcomes`, { realm }),\n        headers: HEADERS,\n        type: \"POST\",\n        data: JSON.stringify(data)\n    });\n}\n\nexport function remove (realm, type, id) {\n    return obj.serviceCall({\n        url: fetchUrl(`${PATH}/${type}/${id}`, { realm }),\n        headers: HEADERS,\n        suppressSpinner: true,\n        type: \"DELETE\"\n    });\n}\n"]}