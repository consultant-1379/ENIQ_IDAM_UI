{"version":3,"sources":["../../../../../../../XUI/store/modules/remote/authentication/trees/current/tree.jsm"],"names":["ADD_OR_UPDATE_NODE","REMOVE_NODE","SET_NODES","addOrUpdateNode","removeNode","setNodes","initialState","state","action","payload"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkBA;AACA,QAAMA,qBAAqB,6DAA3B;AACA,QAAMC,cAAc,sDAApB;AACA,QAAMC,YAAY,oDAAlB;;AAEA;AACO,QAAMC,4CAAkB,gCAAaH,kBAAb,CAAxB;AACA,QAAMI,kCAAa,gCAAaH,WAAb,CAAnB;AACA,QAAMI,8BAAW,gCAAaH,SAAb,CAAjB;;AAEP;AACA,QAAMI,eAAe,EAArB;sBACe,uFACVN,kBADU,EACW,UAACO,KAAD,EAAQC,MAAR;AAAA,4BACfD,KADe,EAEfC,OAAOC,OAFQ;AAAA,KADX,mCAKVR,WALU,EAKI,UAACM,KAAD,EAAQC,MAAR;AAAA,eAAmB,kBAAKD,KAAL,EAAY,CAACC,OAAOC,OAAR,CAAZ,CAAnB;AAAA,KALJ,mCAMVP,SANU,EAME,UAACK,KAAD,EAAQC,MAAR;AAAA,eAAmBA,OAAOC,OAA1B;AAAA,KANF,oBAOZH,YAPY,C","file":"tree.js","sourcesContent":["/*\n * The contents of this file are subject to the terms of the Common Development and\n * Distribution License (the License). You may not use this file except in compliance with the\n * License.\n *\n * You can obtain a copy of the License at legal/CDDLv1.0.txt. See the License for the\n * specific language governing permission and limitations under the License.\n *\n * When distributing Covered Software, include this CDDL Header Notice in each file and include\n * the License file at legal/CDDLv1.0.txt. If applicable, add the following below the CDDL\n * Header, with the fields enclosed by brackets [] replaced by your own identifying\n * information: \"Portions copyright [year] [name of copyright owner]\".\n *\n * Copyright 2017 ForgeRock AS.\n */\nimport { createAction, handleActions } from \"redux-actions\";\nimport { omit } from \"lodash\";\n\n// Types\nconst ADD_OR_UPDATE_NODE = \"remote/authentication/trees/current/tree/ADD_OR_UPDATE_NODE\";\nconst REMOVE_NODE = \"remote/authentication/trees/current/tree/REMOVE_NODE\";\nconst SET_NODES = \"remote/authentication/trees/current/tree/SET_NODES\";\n\n// Actions\nexport const addOrUpdateNode = createAction(ADD_OR_UPDATE_NODE);\nexport const removeNode = createAction(REMOVE_NODE);\nexport const setNodes = createAction(SET_NODES);\n\n// Reducer\nconst initialState = {};\nexport default handleActions({\n    [ADD_OR_UPDATE_NODE]: (state, action) => ({\n        ...state,\n        ...action.payload\n    }),\n    [REMOVE_NODE]: (state, action) => omit(state, [action.payload]),\n    [SET_NODES]: (state, action) => action.payload\n}, initialState);\n"]}