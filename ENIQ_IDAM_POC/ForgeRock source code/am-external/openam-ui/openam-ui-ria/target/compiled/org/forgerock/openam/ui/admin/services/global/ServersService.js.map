{"version":3,"sources":["../../../../../../../../XUI/org/forgerock/openam/ui/admin/services/global/ServersService.js"],"names":["define","_","AbstractDelegate","Constants","JSONSchema","JSONValues","fetchUrl","Promise","obj","host","context","DEFAULT_SERVER","ADVANCED_SECTION","isDefaultServer","serverId","normalizeServerId","objectToArray","valuesObject","map","value","key","arrayToObject","valuesArray","reduce","result","item","getSchema","server","section","serviceCall","url","default","realm","headers","type","then","response","getValues","sortBy","updateServer","data","id","modifiedData","JSON","stringify","servers","clone","clonedUrl","get","all","schema","values","getWithDefaults","normalizedServerId","promises","push","instance","defaultValues","getUrl","undefined","getAll","reject","remove","create","update"],"mappings":"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","file":"ServersService.js","sourcesContent":["/*\n * The contents of this file are subject to the terms of the Common Development and\n * Distribution License (the License). You may not use this file except in compliance with the\n * License.\n *\n * You can obtain a copy of the License at legal/CDDLv1.0.txt. See the License for the\n * specific language governing permission and limitations under the License.\n *\n * When distributing Covered Software, include this CDDL Header Notice in each file and include\n * the License file at legal/CDDLv1.0.txt. If applicable, add the following below the CDDL\n * Header, with the fields enclosed by brackets [] replaced by your own identifying\n * information: \"Portions copyright [year] [name of copyright owner]\".\n *\n * Copyright 2016-2017 ForgeRock AS.\n */\n\n/**\n  * @module org/forgerock/openam/ui/admin/services/global/ServersService\n  */\ndefine([\n    \"lodash\",\n    \"org/forgerock/commons/ui/common/main/AbstractDelegate\",\n    \"org/forgerock/commons/ui/common/util/Constants\",\n    \"org/forgerock/openam/ui/common/models/JSONSchema\",\n    \"org/forgerock/openam/ui/common/models/JSONValues\",\n    \"org/forgerock/openam/ui/common/services/fetchUrl\",\n    \"org/forgerock/openam/ui/common/util/Promise\"\n], (_, AbstractDelegate, Constants, JSONSchema, JSONValues, fetchUrl, Promise) => {\n    const obj = new AbstractDelegate(`${Constants.host}${Constants.context}/json`);\n    const DEFAULT_SERVER = \"server-default\";\n    const ADVANCED_SECTION = \"advanced\";\n    const isDefaultServer = (serverId) => serverId === \"server-defaults\";\n    const normalizeServerId = (serverId) => {\n        return isDefaultServer(serverId) ? DEFAULT_SERVER : serverId;\n    };\n\n    const objectToArray = (valuesObject) => _.map(valuesObject, (value, key) => ({ key, value }));\n    const arrayToObject = (valuesArray) => _.reduce(valuesArray, (result, item) => {\n        result[item.key] = item.value;\n        return result;\n    }, {});\n\n    const getSchema = (server, section) => obj.serviceCall({\n        url: fetchUrl.default(`/global-config/servers/${server}/properties/${section}?_action=schema`,\n            { realm: false }),\n        headers: { \"Accept-API-Version\": \"protocol=1.0,resource=1.0\" },\n        type: \"POST\"\n    }).then((response) => new JSONSchema(response));\n\n    const getValues = (server, section) => obj.serviceCall({\n        url: fetchUrl.default(`/global-config/servers/${server}/properties/${section}`, { realm: false }),\n        headers: { \"Accept-API-Version\": \"protocol=1.0,resource=1.0\" }\n    }).then((response) => {\n        if (section === ADVANCED_SECTION) {\n            response = _.sortBy(objectToArray(response), (value) => value.key);\n        }\n        return new JSONValues(response);\n    });\n\n    const updateServer = (section, data, id = DEFAULT_SERVER) => {\n        let modifiedData = data;\n        if (section === ADVANCED_SECTION) {\n            modifiedData = arrayToObject(data[ADVANCED_SECTION]);\n        }\n        return obj.serviceCall({\n            url: fetchUrl.default(`/global-config/servers/${id}/properties/${section}`, { realm: false }),\n            headers: { \"Accept-API-Version\": \"protocol=1.0,resource=1.0\" },\n            type: \"PUT\",\n            data: JSON.stringify(modifiedData)\n        });\n    };\n\n    obj.servers = {\n        clone: (id, clonedUrl) => obj.serviceCall({\n            url: fetchUrl.default(`/global-config/servers/${id}?_action=clone`, { realm: false }),\n            headers: { \"Accept-API-Version\": \"protocol=1.0,resource=1.0\" },\n            type: \"POST\",\n            data: JSON.stringify({ clonedUrl })\n        }),\n        get: (server, section) => {\n            return Promise.all([\n                getSchema(server, section),\n                getValues(server, section)\n            ]).then((response) => ({\n                schema: response[0],\n                values: response[1]\n            }));\n        },\n        getWithDefaults: (server, section) => {\n            const normalizedServerId = normalizeServerId(server);\n            const promises = [obj.servers.get(normalizedServerId, section)];\n\n            if (!isDefaultServer(server) && section !== \"directoryConfiguration\") {\n                promises.push(getValues(DEFAULT_SERVER, section));\n            }\n            return Promise.all(promises).then(([instance, defaultValues = {}]) => {\n                return {\n                    schema: instance.schema,\n                    values: instance.values,\n                    defaultValues\n                };\n            });\n        },\n        getUrl: (id) => obj.serviceCall({\n            url: fetchUrl.default(`/global-config/servers/${id}`, { realm: false }),\n            headers: { \"Accept-API-Version\": \"protocol=1.0,resource=1.0\" }\n        }).then((response) => response.url, () => undefined),\n        getAll: () => obj.serviceCall({\n            url: fetchUrl.default(\"/global-config/servers?_queryFilter=true\", { realm: false }),\n            headers: { \"Accept-API-Version\": \"protocol=1.0,resource=1.0\" }\n        }).then((response) => _.reject(response.result, { \"_id\" : DEFAULT_SERVER })),\n        remove: (id) => obj.serviceCall({\n            url: fetchUrl.default(`/global-config/servers/${id}`, { realm: false }),\n            headers: { \"Accept-API-Version\": \"protocol=1.0,resource=1.0\" },\n            type: \"DELETE\"\n        }),\n        create:  (data) => obj.serviceCall({\n            url: fetchUrl.default(\"/global-config/servers?_action=create\", { realm: false }),\n            headers: { \"Accept-API-Version\": \"protocol=1.0,resource=1.0\" },\n            type: \"POST\",\n            data: JSON.stringify(data)\n        }),\n        update: (section, data, id) => updateServer(section, data, normalizeServerId(id)),\n        ADVANCED_SECTION,\n        DEFAULT_SERVER\n    };\n\n    return obj;\n});\n"]}