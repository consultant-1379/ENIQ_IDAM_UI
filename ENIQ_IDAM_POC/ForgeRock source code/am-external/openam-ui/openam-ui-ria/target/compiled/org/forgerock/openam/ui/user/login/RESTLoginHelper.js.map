{"version":3,"sources":["../../../../../../../XUI/org/forgerock/openam/ui/user/login/RESTLoginHelper.js"],"names":["define","$","_","AbstractConfigurationAware","Configuration","ServiceInvoker","ViewManager","Constants","URIUtils","fetchUrl","AuthNService","SessionService","UserModel","logout","query","gotoUrl","obj","login","params","successCallback","errorCallback","getRequirements","then","requirements","populatedRequirements","clone","each","callbacks","i","hasOwnProperty","input","value","submitRequirements","result","getLoggedUser","user","setProperty","isNotDefaultPath","successUrl","setValidated","remove","resetProcess","currentView","refresh","href","realm","globalData","auth","subRealm","location","failedStage","errorMsg","noSessionHandler","xhr","get","restCall","url","host","context","default","headers","type","errorsHandlers","status","data","fullLoginURL","updateSessionInfo","fetchById","username","getSuccessfulLoginUrlParams","paramString","substring","indexOf","parseParameters","removeSuccessfulLoginUrlParams","filterUrlParams","filtered","reduce","pick","key"],"mappings":";;AAAA;;;;;;;;;;;;;;;;AAgBAA,OAAO,CACH,QADG,EAEH,QAFG,EAGH,iEAHG,EAIH,oDAJG,EAKH,qDALG,EAMH,kDANG,EAOH,gDAPG,EAQH,+CARG,EASH,kDATG,EAUH,oDAVG,EAWH,sDAXG,EAYH,wCAZG,EAaH,2CAbG,EAcH,+CAdG,EAeH,4CAfG,CAAP,EAgBG,UAACC,CAAD,EAAIC,CAAJ,EAAOC,0BAAP,EAAmCC,aAAnC,EAAkDC,cAAlD,EAAkEC,WAAlE,EAA+EC,SAA/E,EAA0FC,QAA1F,EAAoGC,QAApG,EACCC,YADD,EACeC,cADf,EAC+BC,SAD/B,EAC0CC,MAD1C,EACkDC,KADlD,EACyDC,OADzD,EACqE;AAAE;;AAEtE,QAAMC,MAAM,IAAIb,0BAAJ,EAAZ;;AAEAa,QAAIC,KAAJ,GAAY,UAAUC,MAAV,EAAkBC,eAAlB,EAAmCC,aAAnC,EAAkD;AAC1DV,qBAAaW,eAAb,CAA6BH,MAA7B,EAAqCI,IAArC,CAA0C,UAACC,YAAD,EAAkB;AACxD;AACA,gBAAMC,wBAAwBtB,EAAEuB,KAAF,CAAQF,YAAR,CAA9B;AACArB,cAAEwB,IAAF,CAAOH,aAAaI,SAApB,EAA+B,UAACX,GAAD,EAAMY,CAAN,EAAY;AACvC,oBAAIV,OAAOW,cAAP,eAAkCD,CAAlC,CAAJ,EAA4C;AACxCJ,0CAAsBG,SAAtB,CAAgCC,CAAhC,EAAmCE,KAAnC,CAAyC,CAAzC,EAA4CC,KAA5C,GAAoDb,qBAAmBU,CAAnB,CAApD;AACH;AACJ,aAJD;;AAMAlB,yBAAasB,kBAAb,CAAgCR,qBAAhC,EAAuDN,MAAvD,EAA+DI,IAA/D,CAAoE,UAACW,MAAD,EAAY;AAC5E,oBAAIA,OAAOJ,cAAP,CAAsB,SAAtB,CAAJ,EAAsC;AAClCb,wBAAIkB,aAAJ,CAAkB,UAACC,IAAD,EAAU;AACxB/B,sCAAcgC,WAAd,CAA0B,YAA1B,EAAwCD,IAAxC;AACA,4BAAIpB,QAAQsB,gBAAR,CAAyBJ,OAAOK,UAAhC,CAAJ,EAAiD;AAC7CvB,oCAAQwB,YAAR,CAAqBN,OAAOK,UAA5B;AACH,yBAFD,MAEO;AACHvB,oCAAQyB,MAAR;AACH;AACDrB,wCAAgBgB,IAAhB;AACAzB,qCAAa+B,YAAb;AACH,qBATD,EASGrB,aATH;AAUH,iBAXD,MAWO,IAAIa,OAAOJ,cAAP,CAAsB,QAAtB,CAAJ,EAAqC;AACxC;AACA,wBAAIvB,YAAYoC,WAAZ,KAA4B,WAAhC,EAA6C;AACzCpC,oCAAYqC,OAAZ;AACH,qBAFD,MAEO;AACH;AACA;AACA,4BAAIC,OAAO,QAAX;AACA,4BAAMC,QAAQzC,cAAc0C,UAAd,CAAyBC,IAAzB,CAA8BC,QAA5C;AACA,4BAAIH,KAAJ,EAAW;AACPD,0CAAYC,KAAZ;AACH;AACDI,iCAASL,IAAT,GAAgBA,IAAhB;AACH;AACJ;AACJ,aA3BD,EA2BG,UAACM,WAAD,EAAcC,QAAd,EAA2B;AAC1B,oBAAID,cAAc,CAAlB,EAAqB;AACjB;AACA5C,gCAAYqC,OAAZ;AACH;AACDvB,8BAAc+B,QAAd;AACH,aAjCD;AAkCH,SA3CD;AA4CH,KA7CD;;AA+CAnC,QAAIkB,aAAJ,GAAoB,UAAUf,eAAV,EAA2BC,aAA3B,EAA0C;AAC1D,YAAMgC,mBAAmB,SAAnBA,gBAAmB,CAACC,GAAD,EAAS;AAC9B,gBAAInD,EAAEoD,GAAF,CAAMD,GAAN,EAAW,mBAAX,MAAoC,GAAxC,EAA6C;AACzCjC,8BAAc,UAAd;AACH,aAFD,MAEO;AACHA;AACH;AACJ,SAND;AAOA;AACA;AACA;AACAf,uBAAekD,QAAf,CAAwB;AACpBC,sBAAQjD,UAAUkD,IAAlB,GAAyBlD,UAAUmD,OAAnC,aACIjD,SAASkD,OAAT,CAAiB,8BAAjB,CAFgB;AAGpBC,qBAAS,EAAE,sBAAsB,2BAAxB,EAHW;AAIpBC,kBAAM,MAJc;AAKpBC,4BAAgB,EAAE,eAAe,EAAEC,QAAQ,KAAV,EAAjB,EAAoC,gBAAgB,EAAEA,QAAQ,KAAV,EAApD;AALI,SAAxB,EAMGzC,IANH,CAMQ,UAAC0C,IAAD,EAAU;AACd5D,0BAAc0C,UAAd,CAAyBC,IAAzB,CAA8BkB,YAA9B,GAA6CD,KAAKC,YAAlD;AACH,SARD;;AAUA,eAAOtD,eAAeuD,iBAAf,GAAmC5C,IAAnC,CAAwC,UAAC0C,IAAD,EAAU;AACrD,mBAAOpD,UAAUuD,SAAV,CAAoBH,KAAKI,QAAzB,EAAmC9C,IAAnC,CAAwCH,eAAxC,CAAP;AACH,SAFM,EAEJiC,gBAFI,CAAP;AAGH,KAxBD;;AA0BApC,QAAIqD,2BAAJ,GAAkC,YAAY;AAC1C;AACA;AACA,YAAMJ,eAAe7D,cAAc0C,UAAd,CAAyBC,IAAzB,CAA8BkB,YAAnD;AACA,YAAMK,cAAcL,eAAeA,aAAaM,SAAb,CAAuBN,aAAaO,OAAb,CAAqB,GAArB,IAA4B,CAAnD,CAAf,GAAuE,EAA3F;AACA,eAAO1D,MAAM2D,eAAN,CAAsBH,WAAtB,CAAP;AACH,KAND;;AAQAtD,QAAI0D,8BAAJ,GAAqC,YAAY;AAC7C,eAAOtE,cAAc0C,UAAd,CAAyBC,IAAzB,CAA8BkB,YAArC;AACH,KAFD;;AAIAjD,QAAI2D,eAAJ,GAAsB,UAAUzD,MAAV,EAAkB;AACpC,YAAM0D,WAAW,CAAC,KAAD,EAAQ,eAAR,EAAyB,gBAAzB,EAA2C,MAA3C,EAAmD,YAAnD,EAAiE,WAAjE,EAA8E,QAA9E,CAAjB;AACA,eAAO1E,EAAE2E,MAAF,CAAS3E,EAAE4E,IAAF,CAAO5D,MAAP,EAAe0D,QAAf,CAAT,EAAmC,UAAC3C,MAAD,EAASF,KAAT,EAAgBgD,GAAhB;AAAA,mBAA2B9C,MAA3B,SAAqC8C,GAArC,SAA4ChD,KAA5C;AAAA,SAAnC,EAAwF,EAAxF,CAAP;AACH,KAHD;;AAKA;AACAf,QAAIH,MAAJ,GAAa,UAAUM,eAAV,EAA2BC,aAA3B,EAA0C;AACnDP,eAAO8C,OAAP,GAAiBrC,IAAjB,CAAsBH,eAAtB,EAAuCC,aAAvC;AACH,KAFD;;AAIA,WAAOJ,GAAP;AACH,CArHD","file":"RESTLoginHelper.js","sourcesContent":["/*\n * The contents of this file are subject to the terms of the Common Development and\n * Distribution License (the License). You may not use this file except in compliance with the\n * License.\n *\n * You can obtain a copy of the License at legal/CDDLv1.0.txt. See the License for the\n * specific language governing permission and limitations under the License.\n *\n * When distributing Covered Software, include this CDDL Header Notice in each file and include\n * the License file at legal/CDDLv1.0.txt. If applicable, add the following below the CDDL\n * Header, with the fields enclosed by brackets [] replaced by your own identifying\n * information: \"Portions copyright [year] [name of copyright owner]\".\n *\n * Copyright 2011-2017 ForgeRock AS.\n */\n\ndefine([\n    \"jquery\",\n    \"lodash\",\n    \"org/forgerock/commons/ui/common/main/AbstractConfigurationAware\",\n    \"org/forgerock/commons/ui/common/main/Configuration\",\n    \"org/forgerock/commons/ui/common/main/ServiceInvoker\",\n    \"org/forgerock/commons/ui/common/main/ViewManager\",\n    \"org/forgerock/commons/ui/common/util/Constants\",\n    \"org/forgerock/commons/ui/common/util/URIUtils\",\n    \"org/forgerock/openam/ui/common/services/fetchUrl\",\n    \"org/forgerock/openam/ui/user/services/AuthNService\",\n    \"org/forgerock/openam/ui/user/services/SessionService\",\n    \"org/forgerock/openam/ui/user/UserModel\",\n    \"org/forgerock/openam/ui/user/login/logout\",\n    \"org/forgerock/openam/ui/common/util/uri/query\",\n    \"org/forgerock/openam/ui/user/login/gotoUrl\"\n], ($, _, AbstractConfigurationAware, Configuration, ServiceInvoker, ViewManager, Constants, URIUtils, fetchUrl,\n    AuthNService, SessionService, UserModel, logout, query, gotoUrl) => { // eslint-disable-line padded-blocks\n\n    const obj = new AbstractConfigurationAware();\n\n    obj.login = function (params, successCallback, errorCallback) {\n        AuthNService.getRequirements(params).then((requirements) => {\n            // populate the current set of requirements with the values we have from params\n            const populatedRequirements = _.clone(requirements);\n            _.each(requirements.callbacks, (obj, i) => {\n                if (params.hasOwnProperty(`callback_${i}`)) {\n                    populatedRequirements.callbacks[i].input[0].value = params[`callback_${i}`];\n                }\n            });\n\n            AuthNService.submitRequirements(populatedRequirements, params).then((result) => {\n                if (result.hasOwnProperty(\"tokenId\")) {\n                    obj.getLoggedUser((user) => {\n                        Configuration.setProperty(\"loggedUser\", user);\n                        if (gotoUrl.isNotDefaultPath(result.successUrl)) {\n                            gotoUrl.setValidated(result.successUrl);\n                        } else {\n                            gotoUrl.remove();\n                        }\n                        successCallback(user);\n                        AuthNService.resetProcess();\n                    }, errorCallback);\n                } else if (result.hasOwnProperty(\"authId\")) {\n                    // re-render login form for next set of required inputs\n                    if (ViewManager.currentView === \"LoginView\") {\n                        ViewManager.refresh();\n                    } else {\n                        // TODO: If using a module chain with autologin the user is\n                        // currently routed to the first login screen.\n                        let href = \"#login\";\n                        const realm = Configuration.globalData.auth.subRealm;\n                        if (realm) {\n                            href += `/${realm}`;\n                        }\n                        location.href = href;\n                    }\n                }\n            }, (failedStage, errorMsg) => {\n                if (failedStage > 1) {\n                    // re-render login form, sending back to the start of the process.\n                    ViewManager.refresh();\n                }\n                errorCallback(errorMsg);\n            });\n        });\n    };\n\n    obj.getLoggedUser = function (successCallback, errorCallback) {\n        const noSessionHandler = (xhr) => {\n            if (_.get(xhr, \"responseJSON.code\") === 404) {\n                errorCallback(\"loggedIn\");\n            } else {\n                errorCallback();\n            }\n        };\n        // TODO AME-11593 Call to idFromSession is required to populate the fullLoginURL, which we use later to\n        // determine the parameters you logged in with. We should remove the support of fragment parameters and use\n        // persistent url query parameters instead.\n        ServiceInvoker.restCall({\n            url: `${Constants.host}${Constants.context}/json${\n                fetchUrl.default(\"/users?_action=idFromSession\")}`,\n            headers: { \"Accept-API-Version\": \"protocol=1.0,resource=2.0\" },\n            type: \"POST\",\n            errorsHandlers: { \"serverError\": { status: \"503\" }, \"unauthorized\": { status: \"401\" } }\n        }).then((data) => {\n            Configuration.globalData.auth.fullLoginURL = data.fullLoginURL;\n        });\n\n        return SessionService.updateSessionInfo().then((data) => {\n            return UserModel.fetchById(data.username).then(successCallback);\n        }, noSessionHandler);\n    };\n\n    obj.getSuccessfulLoginUrlParams = function () {\n        // The successfulLoginURL is populated by the server upon successful authentication,\n        // not from window.location of the browser.\n        const fullLoginURL = Configuration.globalData.auth.fullLoginURL;\n        const paramString = fullLoginURL ? fullLoginURL.substring(fullLoginURL.indexOf(\"?\") + 1) : \"\";\n        return query.parseParameters(paramString);\n    };\n\n    obj.removeSuccessfulLoginUrlParams = function () {\n        delete Configuration.globalData.auth.fullLoginURL;\n    };\n\n    obj.filterUrlParams = function (params) {\n        const filtered = [\"arg\", \"authIndexType\", \"authIndexValue\", \"goto\", \"gotoOnFail\", \"ForceAuth\", \"locale\"];\n        return _.reduce(_.pick(params, filtered), (result, value, key) => `${result}&${key}=${value}`, \"\");\n    };\n\n    // called by commons\n    obj.logout = function (successCallback, errorCallback) {\n        logout.default().then(successCallback, errorCallback);\n    };\n\n    return obj;\n});\n"]}