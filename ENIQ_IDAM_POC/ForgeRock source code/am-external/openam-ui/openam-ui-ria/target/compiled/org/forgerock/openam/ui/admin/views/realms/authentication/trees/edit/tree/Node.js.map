{"version":3,"sources":["../../../../../../../../../../../../XUI/org/forgerock/openam/ui/admin/views/realms/authentication/trees/edit/tree/Node.jsx"],"names":["Node","id","isInputConnected","isSelected","node","onConnectionFinish","onConnectionStart","onDrag","onDragStop","onMeasure","onSelect","x","y","isStartNode","handleDrag","event","handleDragStop","handleNodeMouseDown","selectedId","nodeType","handleNodeMouseUp","handleMeasure","dimensions","handleOutcomeMouseDown","name","stopPropagation","handleOutcomeMouseUp","title","displayName","outcomes","_outcomes","content","length","outcomeId","connections","isOutputsConnected","top","left","propTypes","string","isRequired","bool","shape","arrayOf","objectOf","func","number"],"mappings":"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","file":"Node.js","sourcesContent":["/*\n * The contents of this file are subject to the terms of the Common Development and\n * Distribution License (the License). You may not use this file except in compliance with the\n * License.\n *\n * You can obtain a copy of the License at legal/CDDLv1.0.txt. See the License for the\n * specific language governing permission and limitations under the License.\n *\n * When distributing Covered Software, include this CDDL Header Notice in each file and include\n * the License file at legal/CDDLv1.0.txt. If applicable, add the following below the CDDL\n * Header, with the fields enclosed by brackets [] replaced by your own identifying\n * information: \"Portions copyright [year] [name of copyright owner]\".\n *\n * Copyright 2017 ForgeRock AS.\n */\nimport { findKey, has, map, size } from \"lodash\";\nimport classNames from \"classnames\";\nimport { Clearfix } from \"react-bootstrap\";\nimport Draggable from \"react-draggable\";\nimport Measure from \"react-measure\";\nimport React, { PropTypes } from \"react\";\n\nimport NodeOutcome from \"./NodeOutcome\";\nimport NodeOutcomeWithLabel from \"./NodeOutcomeWithLabel\";\nimport { start } from \"store/modules/local/authentication/trees/current/nodes/static\";\nimport { TREE_PADDING } from \"./TreePadding\";\n\nconst Node = ({\n    id,\n    isInputConnected,\n    isSelected,\n    node,\n    onConnectionFinish,\n    onConnectionStart,\n    onDrag,\n    onDragStop,\n    onMeasure,\n    onSelect,\n    x = 0,\n    y = 0\n}) => {\n    const isStartNode = id === findKey(start());\n    const handleDrag = (event, { x, y }) => onDrag(id, x, y);\n    const handleDragStop = (event, { x, y }) => onDragStop(id, x, y);\n    const handleNodeMouseDown = () => {\n        const selectedId = isStartNode ? null : id;\n        onSelect(selectedId, node.nodeType);\n    };\n    const handleNodeMouseUp = () => {\n        if (!isStartNode) {\n            onConnectionFinish(id);\n        }\n    };\n    const handleMeasure = (dimensions) => onMeasure(id, dimensions);\n    const handleOutcomeMouseDown = (event, name) => {\n        event.stopPropagation();\n        onConnectionStart(id, event, name);\n    };\n    const handleOutcomeMouseUp = (event) => event.stopPropagation();\n\n    const title = <div className=\"authtree-node-title\">{ node.displayName }</div>;\n    const outcomes = node._outcomes;\n    let content;\n\n    if (outcomes.length === 0) {\n        content = title;\n    } else if (outcomes.length === 1) {\n        const outcomeId = outcomes[0].id;\n        content = (\n            <div>\n                <div className=\"pull-right\">\n                    <NodeOutcome\n                        id={ outcomeId }\n                        isConnected={ has(node.connections, outcomeId) }\n                        name={ outcomes[0].displayName }\n                        onMouseDown={ handleOutcomeMouseDown }\n                        onMouseUp={ handleOutcomeMouseUp }\n                    />\n                </div>\n                { title }\n            </div>\n        );\n    } else {\n        content = (\n            <div>\n                { title }\n                <Clearfix className=\"authtree-node-outcomes\">\n                    <ul className=\"pull-right\">{ map(outcomes, ({ id, displayName }) => (\n                        <NodeOutcomeWithLabel\n                            id={ id }\n                            isConnected={ has(node.connections, id) }\n                            key={ id }\n                            name={ displayName }\n                            onMouseDown={ handleOutcomeMouseDown }\n                            onMouseUp={ handleOutcomeMouseUp }\n                        />)\n                    )}\n                    </ul>\n                </Clearfix>\n            </div>\n        );\n    }\n\n    const isOutputsConnected = size(node.connections) === size(node._outcomes);\n\n    return (\n        <Draggable\n            bounds={ { top: TREE_PADDING, left: TREE_PADDING } }\n            onDrag={ handleDrag }\n            onMouseDown={ handleNodeMouseDown }\n            onStop={ handleDragStop }\n            position={ { x, y } }\n        >\n            {/* id used to identify Node in tests */}\n            <div id={ `node-${id}` }>\n                <Measure onMeasure={ handleMeasure }>\n                    <div\n                        className={ classNames({\n                            \"authtree-node\": true,\n                            \"authtree-node-has-input\": !isStartNode,\n                            \"authtree-node-has-input-invalid\": !isInputConnected,\n                            \"authtree-node-invalid\": !isStartNode && !isInputConnected || !isOutputsConnected,\n                            \"authtree-node-selected\": isSelected\n                        }) }\n                        onMouseUp={ handleNodeMouseUp }\n                        role=\"presentation\"\n                    >\n                        { content }\n                    </div>\n                </Measure>\n            </div>\n        </Draggable>\n    );\n};\n\nNode.propTypes = {\n    id: PropTypes.string.isRequired,\n    isInputConnected: PropTypes.bool.isRequired,\n    isSelected: PropTypes.bool.isRequired,\n    node: PropTypes.shape({\n        _outcomes: PropTypes.arrayOf(PropTypes.shape({\n            id: PropTypes.string.isRequired,\n            displayName: PropTypes.string.isRequired\n        })).isRequired,\n        connections: PropTypes.objectOf(PropTypes.objectOf(PropTypes.string)).isRequired,\n        displayName: PropTypes.string.isRequired,\n        nodeType: PropTypes.string.isRequired\n    }).isRequired,\n    onConnectionFinish: PropTypes.func.isRequired,\n    onConnectionStart: PropTypes.func.isRequired,\n    onDrag: PropTypes.func.isRequired,\n    onDragStop: PropTypes.func.isRequired,\n    onMeasure: PropTypes.func.isRequired,\n    onSelect: PropTypes.func.isRequired,\n    x: PropTypes.number,\n    y: PropTypes.number\n};\n\nexport default Node;\n"]}