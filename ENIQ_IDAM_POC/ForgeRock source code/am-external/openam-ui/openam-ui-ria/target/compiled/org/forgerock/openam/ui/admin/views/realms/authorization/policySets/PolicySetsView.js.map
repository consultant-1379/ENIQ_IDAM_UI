{"version":3,"sources":["../../../../../../../../../../XUI/org/forgerock/openam/ui/admin/views/realms/authorization/policySets/PolicySetsView.js"],"names":["define","$","_","Backbone","BackbonePaginator","BackgridFilter","Backgrid","ThemeablePaginator","Configuration","EventManager","Router","Constants","PolicySetModel","AbstractListView","PoliciesService","BackgridUtils","RealmHelper","URLHelper","extend","template","toolbarTemplate","partials","events","render","args","callback","realmPath","data","headerActions","actionPartial","helpLink","listResourceTypes","then","bind","resourceTypes","resultCount","hasResourceTypes","parentRender","renderToolbar","PolicySets","PageableCollection","url","substitute","model","state","getState","queryParams","getQueryParams","filterName","_queryFilter","encodeURIComponent","parseState","parseRecords","sync","method","options","beforeSend","xhr","setRequestHeader","selectedItems","items","fetch","reset","done","response","hasPolicySets","renderTable","fail","routeTo","configuration","routes","realms","trigger","self","ClickableRow","e","$target","target","parents","hasClass","editRecord","id","realmsPolicySetEdit","columns","name","label","t","cell","TemplateCell","iconClass","rendered","$el","find","addClass","headerCell","FilterHeaderCell","sortType","editable","className","editItem","deleteItem","onDeleteClick","type","sortable","grid","Grid","row","collection","emptyText","paginator","Extension","windowSize","bindDefaultHandlers","append","el","startImportPolicies","importPolicies","result","sendEvent","EVENT_DISPLAY_MESSAGE_REQUEST","applicationNotFoundInRealm","responseText","messages","parseXML","message","length","textContent","index","indexOf","key","applicationName","slice","readImportFile","file","files","reader","FileReader","onload","readAsText","exportPolicies","realm","encodeRealm","attr","host","context","addResource","realmsResourceTypeNew","addNewPolicySet","realmsPolicySetNew"],"mappings":"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","file":"PolicySetsView.js","sourcesContent":["/*\n * The contents of this file are subject to the terms of the Common Development and\n * Distribution License (the License). You may not use this file except in compliance with the\n * License.\n *\n * You can obtain a copy of the License at legal/CDDLv1.0.txt. See the License for the\n * specific language governing permission and limitations under the License.\n *\n * When distributing Covered Software, include this CDDL Header Notice in each file and include\n * the License file at legal/CDDLv1.0.txt. If applicable, add the following below the CDDL\n * Header, with the fields enclosed by brackets [] replaced by your own identifying\n * information: \"Portions copyright [year] [name of copyright owner]\".\n *\n * Copyright 2014-2017 ForgeRock AS.\n */\n\ndefine([\n    \"jquery\",\n    \"lodash\",\n    \"backbone\",\n    \"backbone.paginator\",\n    \"backgrid-filter\",\n    \"org/forgerock/commons/ui/common/backgrid/Backgrid\",\n    \"org/forgerock/commons/ui/common/backgrid/extension/ThemeablePaginator\",\n    \"org/forgerock/commons/ui/common/main/Configuration\",\n    \"org/forgerock/commons/ui/common/main/EventManager\",\n    \"org/forgerock/commons/ui/common/main/Router\",\n    \"org/forgerock/commons/ui/common/util/Constants\",\n    \"org/forgerock/openam/ui/admin/models/authorization/PolicySetModel\",\n    \"org/forgerock/openam/ui/admin/views/realms/authorization/common/AbstractListView\",\n    \"org/forgerock/openam/ui/admin/services/realm/PoliciesService\",\n    \"org/forgerock/openam/ui/common/util/BackgridUtils\",\n    \"org/forgerock/openam/ui/common/util/RealmHelper\",\n    \"org/forgerock/openam/ui/common/util/URLHelper\"\n], ($, _, Backbone, BackbonePaginator, BackgridFilter, Backgrid, ThemeablePaginator, Configuration, EventManager,\n    Router, Constants, PolicySetModel, AbstractListView, PoliciesService, BackgridUtils, RealmHelper, URLHelper) =>\n    AbstractListView.extend({\n        template: \"templates/admin/views/realms/authorization/policySets/PolicySetsTemplate.html\",\n        // Used in AbstractListView\n        toolbarTemplate: \"templates/admin/views/realms/authorization/policySets/PolicySetsToolbarTemplate.html\",\n        partials: [\n            \"partials/util/_HelpLink.html\"\n        ],\n        events: {\n            \"click [data-add-entity]\":      \"addNewPolicySet\",\n            \"click [data-import-policies]\": \"startImportPolicies\",\n            \"click [data-export-policies]\": \"exportPolicies\",\n            \"click [data-add-resource]\":    \"addResource\",\n            \"change [name=upload]\":         \"readImportFile\"\n        },\n        render (args, callback) {\n            this.realmPath = args[0];\n            this.data.headerActions = [{ actionPartial: \"util/_HelpLink\", helpLink: \"backstage.authz.policySets\" }];\n            PoliciesService.listResourceTypes().then(_.bind(function (resourceTypes) {\n                if (resourceTypes.resultCount < 1) {\n                    this.data.hasResourceTypes = false;\n                    this.parentRender(this.renderToolbar);\n                } else {\n                    const PolicySets = Backbone.PageableCollection.extend({\n                        url: URLHelper.substitute(\"__api__/applications\"),\n                        model: PolicySetModel,\n                        state: BackgridUtils.getState(),\n                        queryParams: BackgridUtils.getQueryParams({\n                            filterName: \"eq\",\n                            _queryFilter: [\n                                `name+eq+${encodeURIComponent('\"^(?!sunAMDelegationService$).*\"')}`\n                            ]\n                        }),\n                        parseState: BackgridUtils.parseState,\n                        parseRecords: BackgridUtils.parseRecords,\n                        sync (method, model, options) {\n                            options.beforeSend = function (xhr) {\n                                xhr.setRequestHeader(\"Accept-API-Version\", \"protocol=1.0,resource=2.0\");\n                            };\n                            return BackgridUtils.sync(method, model, options);\n                        }\n                    });\n\n                    this.data.selectedItems = [];\n                    this.data.hasResourceTypes = true;\n                    this.data.items = new PolicySets();\n                    this.data.items.fetch({ reset: true }).done((response) => {\n                        if (response.resultCount > 0) {\n                            this.data.hasPolicySets = true;\n                            this.renderTable(callback);\n                        } else {\n                            this.data.hasPolicySets = false;\n                            this.parentRender(this.renderToolbar);\n                        }\n                    }).fail(() => {\n                        Router.routeTo(Router.configuration.routes.realms, { args: [], trigger: true });\n                    });\n                }\n            }, this));\n        },\n\n        renderTable (callback) {\n            const self = this;\n            const ClickableRow = BackgridUtils.ClickableRow.extend({\n                callback (e) {\n                    var $target = $(e.target);\n\n                    if ($target.parents().hasClass(\"fr-col-btn-2\")) {\n                        return;\n                    }\n                    self.editRecord(e, this.model.id, Router.configuration.routes.realmsPolicySetEdit);\n                }\n            });\n\n            const columns = [\n                {\n                    name: \"displayName\",\n                    label: $.t(\"console.authorization.policySets.list.grid.0\"),\n                    cell: BackgridUtils.TemplateCell.extend({\n                        iconClass: \"fa-folder\",\n                        template: \"templates/admin/backgrid/cell/IconAndDisplayNameCell.html\",\n                        rendered () {\n                            this.$el.find(\"i.fa\").addClass(this.iconClass);\n                        }\n                    }),\n                    headerCell: BackgridUtils.FilterHeaderCell,\n                    sortType: \"toggle\",\n                    editable: false\n                },\n                {\n                    name: \"\",\n                    cell: BackgridUtils.TemplateCell.extend({\n                        className: \"fr-col-btn-2\",\n                        template: \"templates/admin/backgrid/cell/RowActionsCell.html\",\n                        events: {\n                            \"click [data-edit-item]\": \"editItem\",\n                            \"click [data-delete-item]\": \"deleteItem\"\n                        },\n                        editItem (e) {\n                            self.editRecord(e, this.model.id, Router.configuration.routes.realmsPolicySetEdit);\n                        },\n                        deleteItem (e) {\n                            self.onDeleteClick(e, { type: $.t(\"console.authorization.common.policySet\") },\n                                this.model.id);\n                        }\n                    }),\n                    sortable: false,\n                    editable: false\n                }\n            ];\n\n            const grid = new Backgrid.Grid({\n                columns,\n                row: ClickableRow,\n                collection: this.data.items,\n                className: \"backgrid table table-hover\",\n                emptyText: $.t(\"console.common.noResults\")\n            });\n\n            const paginator = new Backgrid.Extension.ThemeablePaginator({\n                collection: this.data.items,\n                windowSize: 3\n            });\n\n            this.bindDefaultHandlers();\n            this.parentRender(() => {\n                this.renderToolbar();\n                this.$el.find(\".table-container\").append(grid.render().el);\n                this.$el.find(\".panel-body\").append(paginator.render().el);\n\n                if (callback) { callback(); }\n            });\n        },\n\n        startImportPolicies () {\n            this.$el.find(\"[name=upload]\").trigger(\"click\");\n        },\n\n        importPolicies (e) {\n            PoliciesService.importPolicies(e.target.result)\n                .done(function () {\n                    EventManager.sendEvent(Constants.EVENT_DISPLAY_MESSAGE_REQUEST, \"policiesUploaded\");\n                })\n                .fail(function (e) {\n                    var applicationNotFoundInRealm = \" application not found in realm\",\n                        responseText = e ? e.responseText : \"\",\n                        messages = $($.parseXML(responseText)).find(\"message\"),\n                        message = messages.length ? messages[0].textContent : \"\",\n                        index = message ? message.indexOf(applicationNotFoundInRealm) : -1;\n\n                    if (index > -1) {\n                        EventManager.sendEvent(Constants.EVENT_DISPLAY_MESSAGE_REQUEST, {\n                            key: \"policiesImportFailed\",\n                            applicationName: message.slice(0, index)\n                        });\n                    } else {\n                        EventManager.sendEvent(Constants.EVENT_DISPLAY_MESSAGE_REQUEST, \"policiesUploadFailed\");\n                    }\n                });\n        },\n\n        readImportFile () {\n            var file = this.$el.find(\"[name=upload]\")[0].files[0],\n                reader = new FileReader();\n            reader.onload = this.importPolicies;\n            if (file) {\n                reader.readAsText(file, \"UTF-8\");\n            }\n        },\n\n        exportPolicies () {\n            var realm = this.realmPath === \"/\" ? \"\" : RealmHelper.encodeRealm(this.realmPath);\n            this.$el.find(\"[data-export-policies]\").attr(\"href\",\n                `${Constants.host}${Constants.context}/xacml${realm}/policies`);\n        },\n\n        addResource () {\n            Router.routeTo(Router.configuration.routes.realmsResourceTypeNew, {\n                args: [encodeURIComponent(this.realmPath)],\n                trigger: true\n            });\n        },\n\n        addNewPolicySet () {\n            Router.routeTo(Router.configuration.routes.realmsPolicySetNew, {\n                args: [encodeURIComponent(this.realmPath)],\n                trigger: true\n            });\n        }\n    })\n);\n"]}