{"version":3,"sources":["../../../../../../../../../XUI/org/forgerock/openam/ui/admin/views/realms/dashboard/DashboardView.js"],"names":["define","$","_","AbstractView","DashboardTasksView","Messages","RealmsService","DashboardService","extend","template","partials","render","args","callback","self","realmPromise","realms","get","tasksPromise","dashboard","commonTasks","all","data","realmPath","when","then","realmData","tasksData","realm","status","values","active","t","aliases","parentRender","dashboardTasks","allTasks","result","taskGroup","tasks","errorRealm","errorTasks","addMessage","type","TYPE_DANGER","response"],"mappings":";;AAAA;;;;;;;;;;;;;;;;AAgBAA,OAAO,CACH,QADG,EAEH,QAFG,EAGH,mDAHG,EAIH,yEAJG,EAKH,qDALG,EAMH,6DANG,EAOH,+DAPG,CAAP,EAQG,UAAUC,CAAV,EAAaC,CAAb,EAAgBC,YAAhB,EAA8BC,kBAA9B,EAAkDC,QAAlD,EAA4DC,aAA5D,EAA2EC,gBAA3E,EAA6F;AAC5F,WAAOJ,aAAaK,MAAb,CAAoB;AACvBC,kBAAU,+DADa;AAEvBC,kBAAU,CACN,4BADM,CAFa;AAKvBC,cALuB,kBAKfC,IALe,EAKTC,QALS,EAKC;AACpB,gBAAIC,OAAO,IAAX;AAAA,gBACIC,eAAeT,cAAcU,MAAd,CAAqBC,GAArB,CAAyBL,KAAK,CAAL,CAAzB,CADnB;AAAA,gBAEIM,eAAeX,iBAAiBY,SAAjB,CAA2BC,WAA3B,CAAuCC,GAAvC,CAA2CT,KAAK,CAAL,CAA3C,CAFnB;;AAIA,iBAAKU,IAAL,CAAUC,SAAV,GAAsBX,KAAK,CAAL,CAAtB;;AAEAX,cAAEuB,IAAF,CAAOT,YAAP,EAAqBG,YAArB,EAAmCO,IAAnC,CAAwC,UAAUC,SAAV,EAAqBC,SAArB,EAAgC;AACpEb,qBAAKQ,IAAL,CAAUM,KAAV,GAAkB;AACdC,4BAAQH,UAAUI,MAAV,CAAiBC,MAAjB,GAA0B9B,EAAE+B,CAAF,CAAI,oBAAJ,CAA1B,GAAsD/B,EAAE+B,CAAF,CAAI,sBAAJ,CADhD;AAEdD,4BAAQL,UAAUI,MAAV,CAAiBC,MAFX;AAGdE,6BAASP,UAAUI,MAAV,CAAiBG;AAHZ,iBAAlB;;AAMAnB,qBAAKoB,YAAL,CAAkB,YAAY;AAC1B,wBAAIC,iBAAiB,IAAI/B,kBAAJ,EAArB;AACA+B,mCAAeb,IAAf,CAAoBc,QAApB,GAA+BT,UAAU,CAAV,EAAaU,MAA5C;AACAF,mCAAeb,IAAf,CAAoBgB,SAApB,GAAgC,EAAEC,OAAOZ,UAAU,CAAV,EAAaU,MAAtB,EAAhC;AACAF,mCAAexB,MAAf,CAAsBC,IAAtB,EAA4BC,QAA5B;AACH,iBALD,EAKGA,QALH;AAMH,aAbD,EAaG,UAAU2B,UAAV,EAAsBC,UAAtB,EAAkC;AACjCpC,yBAASqC,UAAT,CAAoB;AAChBC,0BAAMtC,SAASuC,WADC;AAEhBC,8BAAUL,aAAaA,UAAb,GAA0BC;AAFpB,iBAApB;AAIH,aAlBD;AAmBH;AA/BsB,KAApB,CAAP;AAiCH,CA1CD","file":"DashboardView.js","sourcesContent":["/*\n * The contents of this file are subject to the terms of the Common Development and\n * Distribution License (the License). You may not use this file except in compliance with the\n * License.\n *\n * You can obtain a copy of the License at legal/CDDLv1.0.txt. See the License for the\n * specific language governing permission and limitations under the License.\n *\n * When distributing Covered Software, include this CDDL Header Notice in each file and include\n * the License file at legal/CDDLv1.0.txt. If applicable, add the following below the CDDL\n * Header, with the fields enclosed by brackets [] replaced by your own identifying\n * information: \"Portions copyright [year] [name of copyright owner]\".\n *\n * Copyright 2015-2017 ForgeRock AS.\n */\n\ndefine([\n    \"jquery\",\n    \"lodash\",\n    \"org/forgerock/commons/ui/common/main/AbstractView\",\n    \"org/forgerock/openam/ui/admin/views/realms/dashboard/DashboardTasksView\",\n    \"org/forgerock/commons/ui/common/components/Messages\",\n    \"org/forgerock/openam/ui/admin/services/global/RealmsService\",\n    \"org/forgerock/openam/ui/admin/services/realm/DashboardService\"\n], function ($, _, AbstractView, DashboardTasksView, Messages, RealmsService, DashboardService) {\n    return AbstractView.extend({\n        template: \"templates/admin/views/realms/dashboard/DashboardTemplate.html\",\n        partials: [\n            \"partials/util/_Status.html\"\n        ],\n        render (args, callback) {\n            var self = this,\n                realmPromise = RealmsService.realms.get(args[0]),\n                tasksPromise = DashboardService.dashboard.commonTasks.all(args[0]);\n\n            this.data.realmPath = args[0];\n\n            $.when(realmPromise, tasksPromise).then(function (realmData, tasksData) {\n                self.data.realm = {\n                    status: realmData.values.active ? $.t(\"common.form.active\") : $.t(\"common.form.inactive\"),\n                    active: realmData.values.active,\n                    aliases: realmData.values.aliases\n                };\n\n                self.parentRender(function () {\n                    var dashboardTasks = new DashboardTasksView();\n                    dashboardTasks.data.allTasks = tasksData[0].result;\n                    dashboardTasks.data.taskGroup = { tasks: tasksData[0].result };\n                    dashboardTasks.render(args, callback);\n                }, callback);\n            }, function (errorRealm, errorTasks) {\n                Messages.addMessage({\n                    type: Messages.TYPE_DANGER,\n                    response: errorRealm ? errorRealm : errorTasks\n                });\n            });\n        }\n    });\n});\n"]}