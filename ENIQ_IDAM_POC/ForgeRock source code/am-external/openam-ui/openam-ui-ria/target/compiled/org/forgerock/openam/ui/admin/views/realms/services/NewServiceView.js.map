{"version":3,"sources":["../../../../../../../../../XUI/org/forgerock/openam/ui/admin/views/realms/services/NewServiceView.jsm"],"names":["toggleCreate","el","enable","find","prop","NewServiceView","template","partials","events","args","callback","data","realmPath","type","getCreatables","then","creatableTypes","parentRender","length","serviceSelection","$el","selectize","onInitialize","$control_input","attr","_id","selectService","event","target","value","service","jsonSchemaView","remove","schema","isEmpty","instance","getInitialState","response","options","values","showOnlyRequiredAndEmpty","onRendered","isCollection","render","appendTo","getData","valuesWithoutNullPasswords","removeNullPasswords","create","raw","routeTo","configuration","routes","realmsServiceEdit","map","encodeURIComponent","trigger","addMessage","TYPE_DANGER"],"mappings":"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","file":"NewServiceView.js","sourcesContent":["/*\n * The contents of this file are subject to the terms of the Common Development and\n * Distribution License (the License). You may not use this file except in compliance with the\n * License.\n *\n * You can obtain a copy of the License at legal/CDDLv1.0.txt. See the License for the\n * specific language governing permission and limitations under the License.\n *\n * When distributing Covered Software, include this CDDL Header Notice in each file and include\n * the License file at legal/CDDLv1.0.txt. If applicable, add the following below the CDDL\n * Header, with the fields enclosed by brackets [] replaced by your own identifying\n * information: \"Portions copyright [year] [name of copyright owner]\".\n *\n * Copyright 2016-2017 ForgeRock AS.\n */\n\nimport _ from \"lodash\";\nimport \"bootstrap-tabdrop\"; // jquery dependencies\nimport $ from \"jquery\";\n\nimport AbstractView from \"org/forgerock/commons/ui/common/main/AbstractView\";\nimport FlatJSONSchemaView from \"org/forgerock/openam/ui/common/views/jsonSchema/FlatJSONSchemaView\";\nimport GroupedJSONSchemaView from \"org/forgerock/openam/ui/common/views/jsonSchema/GroupedJSONSchemaView\";\nimport Messages from \"org/forgerock/commons/ui/common/components/Messages\";\nimport Router from \"org/forgerock/commons/ui/common/main/Router\";\nimport ServicesService from \"org/forgerock/openam/ui/admin/services/realm/ServicesService\";\nimport JSONValues from \"org/forgerock/openam/ui/common/models/JSONValues\";\n\nfunction toggleCreate (el, enable) {\n    el.find(\"[data-create]\").prop(\"disabled\", !enable);\n}\n\nclass NewServiceView extends AbstractView {\n    constructor () {\n        super();\n\n        this.template = \"templates/admin/views/realms/services/NewServiceTemplate.html\";\n        this.partials = [\n            \"partials/alerts/_Alert.html\"\n        ];\n        this.events = {\n            \"click [data-create]\": \"onCreateClick\",\n            \"change [data-service-selection]\": \"onSelectService\"\n        };\n    }\n    render (args, callback) {\n        this.data.realmPath = args[0];\n\n        ServicesService.type.getCreatables(this.data.realmPath).then((creatableTypes) => {\n            this.data.creatableTypes = creatableTypes;\n\n            this.parentRender(() => {\n                if (this.data.creatableTypes.length > 1) {\n                    const serviceSelection = this.$el.find(\"[data-service-selection]\");\n                    serviceSelection.selectize({\n                        onInitialize () {\n                            this.$control_input.attr(\"id\", \"serviceSelection\");\n                        }\n                    });\n                } else if (this.data.creatableTypes[0] && this.data.creatableTypes[0]._id) {\n                    this.selectService(this.data.creatableTypes[0]._id);\n                }\n                if (callback) { callback(); }\n            });\n        });\n    }\n    onSelectService (event) {\n        this.selectService(event.target.value);\n    }\n    selectService (service) {\n        toggleCreate(this.$el, false);\n\n        if (service !== this.data.type && this.jsonSchemaView) {\n            this.jsonSchemaView.remove();\n            delete this.schema;\n        }\n\n        if (!_.isEmpty(service)) {\n            this.data.type = service;\n\n            ServicesService.instance.getInitialState(this.data.realmPath, this.data.type).then((response) => {\n                this.schema = response.schema;\n                const options = {\n                    schema: this.schema,\n                    values: response.values,\n                    showOnlyRequiredAndEmpty: true,\n                    onRendered: () => toggleCreate(this.$el, true)\n                };\n\n                if (this.schema.isCollection()) {\n                    this.jsonSchemaView = new GroupedJSONSchemaView(options);\n                } else {\n                    this.jsonSchemaView = new FlatJSONSchemaView(options);\n                }\n\n                $(this.jsonSchemaView.render().el).appendTo(this.$el.find(\"[data-json-form]\"));\n            }, () => {\n                toggleCreate(this.$el, false);\n            });\n        }\n    }\n    onCreateClick () {\n        const values = new JSONValues(this.jsonSchemaView.getData());\n        const valuesWithoutNullPasswords = values.removeNullPasswords(this.schema);\n\n        ServicesService.instance.create(this.data.realmPath, this.data.type, valuesWithoutNullPasswords.raw)\n            .then(() => {\n                Router.routeTo(Router.configuration.routes.realmsServiceEdit, {\n                    args: _.map([this.data.realmPath, this.data.type], encodeURIComponent),\n                    trigger: true\n                });\n            }, (response) => {\n                Messages.addMessage({ response, type: Messages.TYPE_DANGER });\n            });\n    }\n}\n\nexport default NewServiceView;\n"]}