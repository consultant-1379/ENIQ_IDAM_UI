{"version":3,"sources":["../../../../../../../../../../XUI/org/forgerock/openam/ui/admin/views/realms/authorization/policies/PoliciesView.js"],"names":["define","$","_","Backbone","BackbonePaginator","BackgridFilter","Backgrid","ThemeablePaginator","Configuration","EventManager","Router","Constants","BackgridUtils","URLHelper","PoliciesService","PolicyModel","AbstractListView","PoliciesView","extend","element","template","toolbarTemplate","events","render","data","callback","self","Policies","columns","grid","paginator","ClickableRow","PageableCollection","url","substitute","model","state","getState","queryParams","getQueryParams","filterName","_queryFilter","encodeURIComponent","policySetModel","id","parseState","parseRecords","sync","method","options","beforeSend","xhr","setRequestHeader","e","$target","target","parents","hasClass","routeTo","configuration","routes","realmsPolicyEdit","args","map","realmPath","trigger","name","label","t","cell","TemplateCell","iconClass","rendered","$el","find","addClass","headerCell","FilterHeaderCell","sortType","editable","sortable","className","editItem","deleteItem","onDeleteClick","type","sendEvent","EVENT_CHANGE_VIEW","route","currentRoute","items","Grid","row","collection","emptyText","Extension","windowSize","bindDefaultHandlers","fetch","reset","done","parentRender","length","renderToolbar","append","el","addNewPolicy","realmsPolicyNew"],"mappings":"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","file":"PoliciesView.js","sourcesContent":["/*\n * The contents of this file are subject to the terms of the Common Development and\n * Distribution License (the License). You may not use this file except in compliance with the\n * License.\n *\n * You can obtain a copy of the License at legal/CDDLv1.0.txt. See the License for the\n * specific language governing permission and limitations under the License.\n *\n * When distributing Covered Software, include this CDDL Header Notice in each file and include\n * the License file at legal/CDDLv1.0.txt. If applicable, add the following below the CDDL\n * Header, with the fields enclosed by brackets [] replaced by your own identifying\n * information: \"Portions copyright [year] [name of copyright owner]\".\n *\n * Copyright 2014-2017 ForgeRock AS.\n */\n\ndefine([\n    \"jquery\",\n    \"lodash\",\n    \"backbone\",\n    \"backbone.paginator\",\n    \"backgrid-filter\",\n    \"org/forgerock/commons/ui/common/backgrid/Backgrid\",\n    \"org/forgerock/commons/ui/common/backgrid/extension/ThemeablePaginator\",\n    \"org/forgerock/commons/ui/common/main/Configuration\",\n    \"org/forgerock/commons/ui/common/main/EventManager\",\n    \"org/forgerock/commons/ui/common/main/Router\",\n    \"org/forgerock/commons/ui/common/util/Constants\",\n    \"org/forgerock/openam/ui/common/util/BackgridUtils\",\n    \"org/forgerock/openam/ui/common/util/URLHelper\",\n    \"org/forgerock/openam/ui/admin/services/realm/PoliciesService\",\n    \"org/forgerock/openam/ui/admin/models/authorization/PolicyModel\",\n    \"org/forgerock/openam/ui/admin/views/realms/authorization/common/AbstractListView\"\n], function ($, _, Backbone, BackbonePaginator, BackgridFilter, Backgrid, ThemeablePaginator, Configuration,\n             EventManager, Router, Constants, BackgridUtils, URLHelper, PoliciesService, PolicyModel,\n             AbstractListView) {\n    var PoliciesView = AbstractListView.extend({\n        element: \"#policiesPanel\",\n        template: \"templates/admin/views/realms/authorization/policies/PoliciesTemplate.html\",\n        // Used in AbstractListView\n        toolbarTemplate: \"templates/admin/views/realms/authorization/policies/PoliciesToolbarTemplate.html\",\n        events: {\n            \"click [data-add-entity]\": \"addNewPolicy\"\n        },\n        render (data, callback) {\n            var self = this,\n                Policies,\n                columns,\n                grid,\n                paginator,\n                ClickableRow;\n\n            _.extend(this.data, data);\n\n            Policies = Backbone.PageableCollection.extend({\n                url: URLHelper.substitute(\"__api__/policies\"),\n                model: PolicyModel,\n                state: BackgridUtils.getState(),\n                queryParams: BackgridUtils.getQueryParams({\n                    filterName: \"eq\",\n                    _queryFilter: [`applicationName+eq+\"${encodeURIComponent(this.data.policySetModel.id)}\"`]\n                }),\n                parseState: BackgridUtils.parseState,\n                parseRecords: BackgridUtils.parseRecords,\n                sync (method, model, options) {\n                    options.beforeSend = function (xhr) {\n                        xhr.setRequestHeader(\"Accept-API-Version\", \"protocol=1.0,resource=2.0\");\n                    };\n                    return BackgridUtils.sync(method, model, options);\n                }\n            });\n\n            ClickableRow = BackgridUtils.ClickableRow.extend({\n                callback (e) {\n                    var $target = $(e.target);\n\n                    if ($target.parents().hasClass(\"fr-col-btn-2\")) {\n                        return;\n                    }\n\n                    Router.routeTo(Router.configuration.routes.realmsPolicyEdit, {\n                        args: _.map([self.data.realmPath, self.data.policySetModel.id, this.model.id],\n                            encodeURIComponent),\n                        trigger: true\n                    });\n                }\n            });\n\n            columns = [\n                {\n                    name: \"name\",\n                    label: $.t(\"console.authorization.policies.list.grid.0\"),\n                    cell: BackgridUtils.TemplateCell.extend({\n                        iconClass: \"fa-gavel\",\n                        template: \"templates/admin/backgrid/cell/IconAndNameCell.html\",\n                        rendered () {\n                            this.$el.find(\"i.fa\").addClass(this.iconClass);\n                        }\n                    }),\n                    headerCell: BackgridUtils.FilterHeaderCell,\n                    sortType: \"toggle\",\n                    editable: false\n                },\n                {\n                    name: \"active\",\n                    label: $.t(\"console.authorization.policies.list.grid.1\"),\n                    cell: BackgridUtils.TemplateCell.extend({\n                        template: \"templates/admin/backgrid/cell/StatusCell.html\"\n                    }),\n                    sortable: false,\n                    editable: false\n                },\n                {\n                    name: \"\",\n                    cell: BackgridUtils.TemplateCell.extend({\n                        className: \"fr-col-btn-2\",\n                        template: \"templates/admin/backgrid/cell/RowActionsCell.html\",\n                        events: {\n                            \"click [data-edit-item]\": \"editItem\",\n                            \"click [data-delete-item]\": \"deleteItem\"\n                        },\n                        editItem () {\n                            Router.routeTo(Router.configuration.routes.realmsPolicyEdit, {\n                                args: _.map([self.data.realmPath, self.data.policySetModel.id, this.model.id],\n                                    encodeURIComponent),\n                                trigger: true\n                            });\n                        },\n                        deleteItem (e) {\n                            self.onDeleteClick(e, { type: $.t(\"console.authorization.common.policy\") },\n                                this.model.id,\n                                function () {\n                                    EventManager.sendEvent(Constants.EVENT_CHANGE_VIEW, {\n                                        route: Router.currentRoute,\n                                        args: _.map([self.data.realmPath, self.data.policySetModel.id],\n                                            encodeURIComponent)\n                                    });\n                                }\n                            );\n                        }\n                    }),\n                    sortable: false,\n                    editable: false\n                }\n            ];\n\n            this.data.items = new Policies();\n\n            grid = new Backgrid.Grid({\n                columns,\n                row: ClickableRow,\n                collection: self.data.items,\n                className: \"backgrid table table-hover\",\n                emptyText: $.t(\"console.common.noResults\")\n            });\n\n            paginator = new Backgrid.Extension.ThemeablePaginator({\n                collection: self.data.items,\n                windowSize: 3\n            });\n\n            this.bindDefaultHandlers();\n\n            this.data.items.fetch({ reset: true }).done(function () {\n                self.parentRender(function () {\n                    if (self.data.items.length) {\n                        self.renderToolbar();\n                        self.$el.find(\".table-container\").append(grid.render().el);\n                        self.$el.find(\"#paginationContainer\").append(paginator.render().el);\n                    }\n\n                    if (callback) {\n                        callback();\n                    }\n                });\n            });\n        },\n\n        addNewPolicy () {\n            Router.routeTo(Router.configuration.routes.realmsPolicyNew, {\n                args: _.map([this.data.realmPath, this.data.policySetModel.id], encodeURIComponent),\n                trigger: true\n            });\n        }\n    });\n\n    return new PoliciesView();\n});\n"]}