{"version":3,"sources":["../../../../../../../../../XUI/org/forgerock/openam/ui/admin/views/realms/services/NewServiceSubSchemaView.js"],"names":["define","$","_","AbstractView","Router","ServicesService","NewSchemaComponent","extend","render","realmPath","serviceInstance","subSchemaType","newSchemaComponent","data","title","t","subSchema","listRoute","configuration","routes","realmsServiceEdit","listRouteArgs","map","encodeURIComponent","editRoute","realmsServiceSubSchemaEdit","editRouteArgs","newInstanceId","template","getInitialState","type","instance","createInstance","values","create","parentRender","$el","append"],"mappings":";;;;AAAA;;;;;;;;;;;;;;;;AAgBAA,OAAO,CACH,QADG,EAEH,QAFG,EAGH,mDAHG,EAIH,6CAJG,EAKH,8DALG,EAMH,sEANG,CAAP,EAOG,UAACC,CAAD,EAAIC,CAAJ,EAAOC,YAAP,EAAqBC,MAArB,EAA6BC,eAA7B,EAA8CC,kBAA9C;AAAA,WAAqEH,aAAaI,MAAb,CAAoB;AACxFC,cADwF,wBACnC;AAAA;;AAAA;AAAA,gBAA5CC,SAA4C;AAAA,gBAAjCC,eAAiC;AAAA,gBAAhBC,aAAgB;;AACjD,gBAAMC,qBAAqB,IAAIN,kBAAJ,CAAuB;AAC9CO,sBAAM;AACFJ,wCADE;AAEFC,oDAFE;AAGFC,gDAHE;AAIFG,2BAAOb,EAAEc,CAAF,CAAI,sCAAJ,EAA4C,EAAEC,WAAWL,aAAb,EAA5C;AAJL,iBADwC;;AAQ9CM,2BAAWb,OAAOc,aAAP,CAAqBC,MAArB,CAA4BC,iBARO;AAS9CC,+BAAenB,EAAEoB,GAAF,CAAM,CAACb,SAAD,EAAYC,eAAZ,CAAN,EAAoCa,kBAApC,CAT+B;;AAW9CC,2BAAWpB,OAAOc,aAAP,CAAqBC,MAArB,CAA4BM,0BAXO;AAY9CC,+BAAe,uBAACC,aAAD;AAAA,2BAAmBzB,EAAEoB,GAAF,CAAM,CAACb,SAAD,EAAYC,eAAZ,EAA6BC,aAA7B,EAA4CgB,aAA5C,CAAN,EAC9BJ,kBAD8B,CAAnB;AAAA,iBAZ+B;;AAe9CK,0BAAU,sEAfoC;;AAiB9CC,iCAAiB;AAAA,2BAAMxB,gBAAgByB,IAAhB,CAAqBd,SAArB,CAA+Be,QAA/B,CAAwCF,eAAxC,CACnBpB,SADmB,EACRC,eADQ,EACSC,aADT,CAAN;AAAA,iBAjB6B;AAmB9CqB,gCAAgB,wBAACC,MAAD;AAAA,2BAAY5B,gBAAgByB,IAAhB,CAAqBd,SAArB,CAA+Be,QAA/B,CAAwCG,MAAxC,CACxBzB,SADwB,EACbC,eADa,EACIC,aADJ,EACmBsB,MADnB,CAAZ;AAAA;AAnB8B,aAAvB,CAA3B;;AAuBA,iBAAKE,YAAL,CAAkB,YAAM;AAAE,sBAAKC,GAAL,CAASC,MAAT,CAAgBzB,mBAAmBJ,MAAnB,GAA4B4B,GAA5C;AAAmD,aAA7E;AACH;AA1BuF,KAApB,CAArE;AAAA,CAPH","file":"NewServiceSubSchemaView.js","sourcesContent":["/*\n * The contents of this file are subject to the terms of the Common Development and\n * Distribution License (the License). You may not use this file except in compliance with the\n * License.\n *\n * You can obtain a copy of the License at legal/CDDLv1.0.txt. See the License for the\n * specific language governing permission and limitations under the License.\n *\n * When distributing Covered Software, include this CDDL Header Notice in each file and include\n * the License file at legal/CDDLv1.0.txt. If applicable, add the following below the CDDL\n * Header, with the fields enclosed by brackets [] replaced by your own identifying\n * information: \"Portions copyright [year] [name of copyright owner]\".\n *\n * Copyright 2016-2017 ForgeRock AS.\n */\n\ndefine([\n    \"jquery\",\n    \"lodash\",\n    \"org/forgerock/commons/ui/common/main/AbstractView\",\n    \"org/forgerock/commons/ui/common/main/Router\",\n    \"org/forgerock/openam/ui/admin/services/realm/ServicesService\",\n    \"org/forgerock/openam/ui/admin/views/common/schema/NewSchemaComponent\"\n], ($, _, AbstractView, Router, ServicesService, NewSchemaComponent) => AbstractView.extend({\n    render ([realmPath, serviceInstance, subSchemaType]) {\n        const newSchemaComponent = new NewSchemaComponent({\n            data: {\n                realmPath,\n                serviceInstance,\n                subSchemaType,\n                title: $.t(\"console.services.subSchema.new.title\", { subSchema: subSchemaType })\n            },\n\n            listRoute: Router.configuration.routes.realmsServiceEdit,\n            listRouteArgs: _.map([realmPath, serviceInstance], encodeURIComponent),\n\n            editRoute: Router.configuration.routes.realmsServiceSubSchemaEdit,\n            editRouteArgs: (newInstanceId) => _.map([realmPath, serviceInstance, subSchemaType, newInstanceId],\n                encodeURIComponent),\n\n            template: \"templates/admin/views/common/schema/NewServiceSubSchemaTemplate.html\",\n\n            getInitialState: () => ServicesService.type.subSchema.instance.getInitialState(\n                realmPath, serviceInstance, subSchemaType),\n            createInstance: (values) => ServicesService.type.subSchema.instance.create(\n                realmPath, serviceInstance, subSchemaType, values)\n        });\n\n        this.parentRender(() => { this.$el.append(newSchemaComponent.render().$el); });\n    }\n}));\n"]}