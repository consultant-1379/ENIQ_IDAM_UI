{"version":3,"sources":["../../../../../../../XUI/org/forgerock/openam/ui/user/login/RESTLoginView.js"],"names":["define","$","_","AbstractView","AuthNService","BootstrapDialog","Configuration","Constants","CookieHelper","EventManager","Form2js","Handlebars","i18nManager","Messages","RESTLoginHelper","isRealmChanged","Router","UIUtils","URIUtils","logout","getCurrentFragmentParamString","query","gotoUrl","ProcessConfiguration","CommonConfig","default","hasSsoRedirectOrPost","goto","decodedGoto","decodeURIComponent","startsWith","populateTemplate","self","firstUserNamePassStage","globalData","auth","currentStage","userNamePasswordStage","data","showForgotPassword","forgotPassword","showForgotUserName","forgotUsername","showForgotten","showSelfRegistration","selfRegistration","showRememberLogin","showSocialLogin","loggedUser","isEmpty","socialImplementations","backgroundLogin","prefillLoginData","show","title","t","cssClass","closable","message","onshow","dialog","noBaseTemplate","element","onshown","routeToLoginUnavailable","fragmentParams","routeTo","configuration","routes","loginFailure","args","trigger","hasCallback","callbacks","type","some","getFragmentParamString","params","getCurrentFragmentQueryString","LoginView","extend","template","genericTemplate","baseTemplate","events","handleExistingSession","requirements","$el","getLoggedUser","user","window","location","replace","setProperty","isNotDefaultPath","successUrl","setValidated","href","toHref","empty","remove","sendEvent","EVENT_AUTHENTICATION_DATA_CHANGED","anonymousMode","gotoURL","indexOf","console","log","navigate","autoLogin","index","submitContent","each","keys","urlParams","key","parseInt","substring","autoLoginAttempts","EVENT_LOGIN_REQUEST","isZeroPageLoginAllowed","referer","document","referrer","whitelist","zeroPageLogin","refererWhitelist","enabled","allowedWithoutReferer","length","formSubmit","e","expire","preventDefault","currentTarget","prop","target","attr","find","Date","setDate","getDate","setCookie","val","deleteCookie","loginRequestFunction","failureCallback","handleLegacyRealmFragmentParameter","fragmentParameters","parseParameters","fragmentRealmParameter","realm","fragmentWithoutRealm","urlParamsFromObject","queryStringWithUpdatedRealm","getCurrentQueryString","getCurrentPathName","render","addtionalArguments","undefined","compositeQueryString","additional","handleParams","IDToken1","getRequirements","then","bind","reqs","hasOwnProperty","arg","config","startEvent","getProcessDescriptionFromConfig","func","renderForm","getCookie","EVENT_DISPLAY_MESSAGE_REQUEST","error","addMessage","TYPE_DANGER","paramString","filterUrlParams","clone","promise","Deferred","usernamePasswordStages","contains","stage","redirectForm","redirectCallback","object","map","output","o","name","value","redirectUrl","redirectMethod","redirectData","v","k","append","appendTo","submit","pollingWaitTimeoutMs","delay","pollingInProgress","suppressSpinner","push","input","confirmationCallback","compileTemplate","always","compiledTemplate","call","parentRender","resolve","login","focus","getCurrentCompositeQueryString","authIndexType","param","authIndexValue","context","registerHelper","result","prompt","options","defaultOption","btnClass","renderContext","obj","generateId","camelCase","id","renderPartial","partials","code","templateName","merge","messageValue","typeValue","option","values","active","SafeString"],"mappings":"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","file":"RESTLoginView.js","sourcesContent":["/*\n * The contents of this file are subject to the terms of the Common Development and\n * Distribution License (the License). You may not use this file except in compliance with the\n * License.\n *\n * You can obtain a copy of the License at legal/CDDLv1.0.txt. See the License for the\n * specific language governing permission and limitations under the License.\n *\n * When distributing Covered Software, include this CDDL Header Notice in each file and include\n * the License file at legal/CDDLv1.0.txt. If applicable, add the following below the CDDL\n * Header, with the fields enclosed by brackets [] replaced by your own identifying\n * information: \"Portions copyright [year] [name of copyright owner]\".\n *\n * Copyright 2011-2017 ForgeRock AS.\n */\n\ndefine([\n    \"jquery\",\n    \"lodash\",\n    \"org/forgerock/commons/ui/common/main/AbstractView\",\n    \"org/forgerock/openam/ui/user/services/AuthNService\",\n    \"org/forgerock/commons/ui/common/components/BootstrapDialog\",\n    \"org/forgerock/commons/ui/common/main/Configuration\",\n    \"org/forgerock/commons/ui/common/util/Constants\",\n    \"org/forgerock/commons/ui/common/util/CookieHelper\",\n    \"org/forgerock/commons/ui/common/main/EventManager\",\n    \"form2js\",\n    \"handlebars\",\n    \"org/forgerock/commons/ui/common/main/i18nManager\",\n    \"org/forgerock/commons/ui/common/components/Messages\",\n    \"org/forgerock/openam/ui/user/login/RESTLoginHelper\",\n    \"org/forgerock/openam/ui/common/util/isRealmChanged\",\n    \"org/forgerock/commons/ui/common/main/Router\",\n    \"org/forgerock/commons/ui/common/util/UIUtils\",\n    \"org/forgerock/commons/ui/common/util/URIUtils\",\n    \"org/forgerock/openam/ui/user/login/logout\",\n    \"org/forgerock/openam/ui/common/util/uri/getCurrentFragmentParamString\",\n    \"org/forgerock/openam/ui/common/util/uri/query\",\n    \"org/forgerock/openam/ui/user/login/gotoUrl\",\n    \"org/forgerock/commons/ui/common/main/ProcessConfiguration\",\n    \"config/process/CommonConfig\"\n], ($, _, AbstractView, AuthNService, BootstrapDialog, Configuration, Constants, CookieHelper, EventManager, Form2js,\n    Handlebars, i18nManager, Messages, RESTLoginHelper, isRealmChanged, Router, UIUtils,\n    URIUtils, logout, getCurrentFragmentParamString, query, gotoUrl, ProcessConfiguration, CommonConfig) => {\n    isRealmChanged = isRealmChanged.default;\n    getCurrentFragmentParamString = getCurrentFragmentParamString.default;\n\n    function hasSsoRedirectOrPost (goto) {\n        let decodedGoto;\n        if (goto) {\n            decodedGoto = decodeURIComponent(goto);\n        }\n        return goto && (_.startsWith(decodedGoto, \"/SSORedirect\") || _.startsWith(decodedGoto, \"/SSOPOST\"));\n    }\n\n    function populateTemplate () {\n        var self = this,\n            firstUserNamePassStage = Configuration.globalData.auth.currentStage === 1 && this.userNamePasswordStage;\n\n        // self-service links should be shown only on the first stage of the username/password stages\n        this.data.showForgotPassword = firstUserNamePassStage && Configuration.globalData.forgotPassword === \"true\";\n        this.data.showForgotUserName = firstUserNamePassStage && Configuration.globalData.forgotUsername === \"true\";\n        this.data.showForgotten = this.data.showForgotPassword || this.data.showForgotUserName;\n        this.data.showSelfRegistration = firstUserNamePassStage && Configuration.globalData.selfRegistration === \"true\";\n        this.data.showRememberLogin = firstUserNamePassStage;\n        // socialImplementations links should be shown only on the first stage of the username/password stages\n        // and should not show on the upgrade session page\n        this.data.showSocialLogin = firstUserNamePassStage && !Configuration.loggedUser &&\n                                        !_.isEmpty(Configuration.globalData.socialImplementations);\n\n        if (Configuration.backgroundLogin) {\n            this.prefillLoginData();\n\n            BootstrapDialog.show({\n                title: $.t(\"common.form.sessionExpired\"),\n                cssClass: \"login-dialog\",\n                closable: false,\n                message: $(\"<div></div>\"),\n                onshow () {\n                    var dialog = this;\n                    // change the target element of the view\n                    self.noBaseTemplate = true;\n                    self.element = dialog.message;\n                },\n                onshown () {\n                    // return back to the default state\n                    delete self.noBaseTemplate;\n                    self.element = \"#content\";\n                }\n            });\n        }\n    }\n\n    function routeToLoginUnavailable (fragmentParams) {\n        // We cannot use the Router.getLink() method here and simply apply the subrealm to the route because\n        // Router.getLink() does more than its title suggests. It also applies the default properties to the route and\n        // these are not always correct if there has been a previous successful login request.\n        // FIXME: Remove any session specific properties from the UI upon session end.\n        Router.routeTo(Router.configuration.routes.loginFailure, {\n            args: [fragmentParams],\n            trigger: true\n        });\n    }\n\n    /**\n     * Checks if the callback \"type\" is present in the array of \"callbacks\" objects.\n     * @param {Array.<Object>} callbacks array of callback objects\n     * @param {String} type The callback type that is being checked\n     * @returns {Boolean} if the callback \"type\" is present in the callbacks.\n     */\n    function hasCallback (callbacks, type) {\n        return _.some(callbacks, \"type\", type);\n    }\n\n    function getFragmentParamString () {\n        const params = URIUtils.getCurrentFragmentQueryString();\n        return _.isEmpty(params) ? \"\" : `&${params}`;\n    }\n\n    var LoginView = AbstractView.extend({\n        template: \"templates/openam/RESTLoginTemplate.html\",\n        genericTemplate: \"templates/openam/RESTLoginTemplate.html\",\n        baseTemplate: \"templates/common/LoginBaseTemplate.html\",\n\n        data: {},\n        events: {\n            \"click input[type=submit]\": \"formSubmit\"\n        },\n\n        handleExistingSession (requirements) {\n            const element = this.$el;\n            // If we have a token, let's see who we are logged in as....\n            RESTLoginHelper.getLoggedUser((user) => {\n                if (isRealmChanged()) {\n                    window.location.replace(`#switchRealm/${getCurrentFragmentParamString()}`);\n                } else {\n                    Configuration.setProperty(\"loggedUser\", user);\n                    if (gotoUrl.isNotDefaultPath(requirements.successUrl)) {\n                        gotoUrl.setValidated(requirements.successUrl);\n                        window.location.href = gotoUrl.toHref();\n                        // This happens after we have already changed the href for situations where the goto url is\n                        // taking a while to load, and so removes the login page from view.\n                        element.empty();\n                        return false;\n                    } else {\n                        gotoUrl.remove();\n                    }\n\n                    EventManager.sendEvent(Constants.EVENT_AUTHENTICATION_DATA_CHANGED, {\n                        anonymousMode: false\n                    });\n\n                    // Copied from EVENT_LOGIN_REQUEST handler\n                    if (Configuration.gotoURL &&\n                        _.indexOf([\"#\", \"\", \"#/\", \"/#\"], Configuration.gotoURL) === -1) {\n                        console.log(`Auto redirect to ${Configuration.gotoURL}`);\n                        Router.navigate(Configuration.gotoURL, { trigger: true });\n                        delete Configuration.gotoURL;\n                    } else {\n                        Router.navigate(\"\", { trigger: true });\n                    }\n                }\n            }, () => {\n                logout.default();\n            });\n        },\n\n        autoLogin () {\n            var index,\n                submitContent = {},\n                auth = Configuration.globalData.auth;\n\n            _.each(_.keys(auth.urlParams), function (key) {\n                if (key.indexOf(\"IDToken\") > -1) {\n                    index = parseInt(key.substring(7), 10) - 1;\n                    submitContent[`callback_${index}`] = auth.urlParams[`IDToken${key.substring(7)}`];\n                }\n            });\n            auth.autoLoginAttempts = 1;\n            EventManager.sendEvent(Constants.EVENT_LOGIN_REQUEST, submitContent);\n        },\n\n        isZeroPageLoginAllowed () {\n            var referer = document.referrer,\n                whitelist = Configuration.globalData.zeroPageLogin.refererWhitelist;\n\n            if (!Configuration.globalData.zeroPageLogin.enabled) {\n                return false;\n            }\n\n            if (!referer) {\n                return Configuration.globalData.zeroPageLogin.allowedWithoutReferer;\n            }\n\n            return !whitelist || !whitelist.length || whitelist.indexOf(referer) > -1;\n        },\n\n        formSubmit (e) {\n            var submitContent,\n                expire;\n\n            e.preventDefault();\n            // disabled button before login\n            $(e.currentTarget).prop(\"disabled\", true);\n\n            submitContent = new Form2js(this.$el[0]);\n            submitContent[$(e.target).attr(\"name\")] = $(e.target).attr(\"index\");\n\n            // START CUSTOM STAGE-SPECIFIC LOGIC HERE\n\n            // Known to be used by username/password based authn stages\n            if (this.$el.find(\"[name=loginRemember]:checked\").length !== 0) {\n                expire = new Date();\n                expire.setDate(expire.getDate() + 20);\n                // An assumption that the login name is the first text input box\n                CookieHelper.setCookie(\"login\", this.$el.find(\"input[type=text]:first\").val(), expire);\n            } else if (this.$el.find(\"[name=loginRemember]\").length !== 0) {\n                CookieHelper.deleteCookie(\"login\");\n            }\n\n            // END CUSTOM STAGE-SPECIFIC LOGIC HERE\n\n            this.loginRequestFunction({\n                submitContent,\n                failureCallback () {\n                    // enabled the login button if login failure\n                    $(e.currentTarget).prop(\"disabled\", false);\n                    // If its not the first stage then render the Login Unavailable view with link back to login screen.\n                    if (Configuration.globalData.auth.currentStage > 1) {\n                        let fragmentParams = URIUtils.getCurrentFragmentQueryString();\n                        if (fragmentParams) {\n                            fragmentParams = `&${fragmentParams}`;\n                        }\n                        // Go to the Login Unavailable view with all the original fragment parameters.\n                        routeToLoginUnavailable(fragmentParams);\n                    }\n                }\n            });\n        },\n\n        /**\n        * Specifying realm as part of the fragment is not supported since 14.0.\n        * This function removes the realm parameter from the fragment and puts it into the query string.\n        * TODO: Should be removed once AME-11109 is resolved.\n        */\n        handleLegacyRealmFragmentParameter () {\n            const fragmentParameters = query.parseParameters(URIUtils.getCurrentFragmentQueryString());\n            const fragmentRealmParameter = fragmentParameters.realm;\n\n            if (fragmentRealmParameter) {\n                delete fragmentParameters.realm;\n\n                const fragmentWithoutRealm = `#login${\n                    _.isEmpty(fragmentParameters) ? \"\" : `&${query.urlParamsFromObject(fragmentParameters)}`\n                }`;\n\n                const queryStringWithUpdatedRealm = `?${query.urlParamsFromObject({\n                    realm: fragmentRealmParameter,\n                    ...query.parseParameters(URIUtils.getCurrentQueryString())\n                })}`;\n\n                location.href = `${URIUtils.getCurrentPathName()}${queryStringWithUpdatedRealm}${fragmentWithoutRealm}`;\n            }\n        },\n\n        render (args) {\n            this.handleLegacyRealmFragmentParameter();\n\n            const addtionalArguments = args ? args[1] : undefined;\n            let params = {};\n            const auth = Configuration.globalData.auth;\n\n            // TODO: The first undefined argument is the deprecated realm which is defined in the\n            // CommonRoutesConfig login route. This needs to be removed as part of AME-11109.\n            this.data.args = [undefined, getFragmentParamString()];\n\n            this.data.compositeQueryString = `&${query.urlParamsFromObject({\n                ...query.parseParameters(URIUtils.getCurrentFragmentQueryString()),\n                ...query.parseParameters(URIUtils.getCurrentQueryString())\n            })}`;\n\n            if (args) {\n                auth.additional = addtionalArguments;\n                auth.urlParams = {};\n                params = this.handleParams();\n\n                // If there are IDTokens try to login with the provided credentials\n                if (params.IDToken1 && this.isZeroPageLoginAllowed() && !auth.autoLoginAttempts) {\n                    this.autoLogin();\n                }\n            }\n\n            AuthNService.getRequirements().then(_.bind(function (reqs) {\n                // Clear out existing session if instructed\n                if (reqs.hasOwnProperty(\"tokenId\") && params.arg === \"newsession\") {\n                    logout.default();\n                }\n\n                // If simply by asking for the requirements, we end up with a token,\n                // then we must have already had a session\n                if (reqs.hasOwnProperty(\"tokenId\")) {\n                    this.handleExistingSession(reqs);\n                } else { // We aren't logged in yet, so render a form...\n                    const config = _.find(CommonConfig, { startEvent: Constants.EVENT_LOGIN_REQUEST });\n                    ProcessConfiguration.getProcessDescriptionFromConfig(config).then((func) => {\n                        this.loginRequestFunction = func;\n                        this.renderForm(reqs, params);\n\n                        if (CookieHelper.getCookie(\"invalidRealm\")) {\n                            CookieHelper.deleteCookie(\"invalidRealm\");\n                            EventManager.sendEvent(Constants.EVENT_DISPLAY_MESSAGE_REQUEST, \"invalidRealm\");\n                        }\n                    });\n                }\n            }, this), _.bind(function (error) {\n                if (error) {\n                    Messages.addMessage({\n                        type: Messages.TYPE_DANGER,\n                        message: error.message\n                    });\n                }\n\n                /**\n                 * We havent managed to get a successful responce from the server\n                 * This could be due to many reasons, including that the params are incorrect\n                 * For example requesting service=thewrongname. So here we use the RESTLoginHelper.filterUrlParams\n                 * function to only return the params we which to save. The authIndexType and authIndexValue\n                 * would normally only be applied when the user has logged in, so they should not contain invalid values\n                 */\n\n                const paramString = URIUtils.getCurrentFragmentQueryString();\n                routeToLoginUnavailable(RESTLoginHelper.filterUrlParams(query.parseParameters(paramString)));\n            }, this));\n        },\n        renderForm (reqs, urlParams) {\n            var requirements = _.clone(reqs),\n                promise = $.Deferred(),\n                usernamePasswordStages = [\"DataStore1\", \"AD1\", \"JDBC1\", \"LDAP1\", \"Membership1\", \"RADIUS1\"],\n                template,\n                self = this;\n\n            this.userNamePasswordStage = _.contains(usernamePasswordStages, reqs.stage);\n\n            requirements.callbacks = [];\n\n            _.each(reqs.callbacks, (element) => {\n                let redirectForm;\n                let redirectCallback;\n\n                if (element.type === \"RedirectCallback\") {\n                    redirectCallback = _.object(_.map(element.output, (o) => {\n                        return [o.name, o.value];\n                    }));\n\n                    redirectForm = $(`<form action='${redirectCallback.redirectUrl}' method='POST'></form>`);\n\n                    if (redirectCallback.redirectMethod === \"POST\") {\n                        _.each(redirectCallback.redirectData, (v, k) => {\n                            redirectForm.append(\n                                `<input type='hidden' name='${k}' value='${v}' aria-hidden='true' />`);\n                        });\n                        redirectForm.appendTo(\"body\").submit();\n                    } else {\n                        window.location.replace(redirectCallback.redirectUrl);\n                    }\n                } else if (element.type === \"PollingWaitCallback\") {\n                    const pollingWaitTimeoutMs = _.find(element.output, { name: \"waitTime\" }).value;\n\n                    _.delay(() => {\n                        // we are already on the \"wait\" screen, set the boolean to indicate we don't need to rerender the page\n                        // until the user authenticates/registers using push auth\n                        this.pollingInProgress = true;\n\n                        if (hasCallback(this.reqs.callbacks, \"PollingWaitCallback\")) {\n                            EventManager.sendEvent(Constants.EVENT_LOGIN_REQUEST, { suppressSpinner: true });\n                        }\n                    }, pollingWaitTimeoutMs);\n                }\n\n                requirements.callbacks.push({\n                    input: {\n                        index: requirements.callbacks.length,\n                        name: element.input ? element.input[0].name : null,\n                        value: element.input ? element.input[0].value : null\n                    },\n                    output: element.output,\n                    type: element.type\n                });\n            });\n\n            if (!hasCallback(reqs.callbacks, \"ConfirmationCallback\") &&\n                !hasCallback(reqs.callbacks, \"PollingWaitCallback\") &&\n                !hasCallback(reqs.callbacks, \"RedirectCallback\")) {\n                const confirmationCallback = {\n                    \"input\": {\n                        index: requirements.callbacks.length,\n                        name: \"loginButton\",\n                        value: 0\n                    },\n                    output: [{\n                        name: \"options\",\n                        value: [$.t(\"common.user.login\")]\n                    }],\n                    type: \"ConfirmationCallback\"\n                };\n                requirements.callbacks.push(confirmationCallback);\n            }\n\n            this.reqs = reqs;\n            this.data.reqs = requirements;\n\n            // Is there an attempt at autologin happening?\n            // if yes then don't render the form until it fails one time\n            if (urlParams.IDToken1 && Configuration.globalData.auth.autoLoginAttempts === 1) {\n                Configuration.globalData.auth.autoLoginAttempts++;\n            } else if (!this.pollingInProgress || !hasCallback(reqs.callbacks, \"PollingWaitCallback\")) {\n                // OPENAM-9480: set the flag to false to indicate that the user moved to another stage\n                // (e.g. back to first stage in case of failed push auth)\n                this.pollingInProgress = false;\n                // Attempt to load a stage-specific template to render this form.  If not found, use the generic one.\n                template = `templates/openam/authn/${reqs.stage}.html`;\n                UIUtils.compileTemplate(template, _.extend({}, Configuration.globalData, this.data))\n                    .always(function (compiledTemplate) {\n                        // A rendered template will be a string; an error will be an object\n                        self.template = typeof compiledTemplate === \"string\" ? template : self.genericTemplate;\n\n                        populateTemplate.call(self);\n                        self.parentRender(function () {\n                            self.prefillLoginData();\n                            // Resolve a promise when all templates will be loaded\n                            promise.resolve();\n                        });\n                    });\n            }\n            return promise;\n        },\n        prefillLoginData () {\n            var login = CookieHelper.getCookie(\"login\");\n\n            if (this.$el.find(\"[name=loginRemember]\").length !== 0 && login) {\n                this.$el.find(\"input[type=text]:first\").val(login);\n                this.$el.find(\"[name=loginRemember]\").attr(\"checked\", \"true\");\n                this.$el.find(\"[type=password]\").focus();\n            } else {\n                this.$el.find(\":input:not([type='radio']):not([type='checkbox'])\" +\n                    \":not([type='submit']):not([type='button']):first\").focus();\n            }\n        },\n\n        handleParams () {\n            // TODO: Remove support for fragment params and change to URIUtils.getCurrentQueryString()\n            // as currently we are checking both the framgent and query with framgent over-riding.\n            const paramString = URIUtils.getCurrentCompositeQueryString();\n            const params = query.parseParameters(paramString);\n            // Rest does not accept the params listed in the array below as is\n            // they must be transformed into the \"authIndexType\" and \"authIndexValue\" params\n            // but if composite_advice set that must be adhered to\n            if (!params.authIndexType || params.authIndexType !== \"composite_advice\") {\n                _.each([\"authlevel\", \"module\", \"service\", \"user\", \"resource\"], function (param) {\n                    if (params[param]) {\n                        params.authIndexType = param === \"authlevel\" ? \"level\" : param;\n                        params.authIndexValue = params[param];\n                        //*** Note special case for authLevel\n                        Configuration.globalData.auth.additional += `&authIndexType=${\n                            (param === \"authlevel\" ? \"level\" : param)\n                        }&authIndexValue=${params[param]}`;\n                    }\n                });\n            }\n            // Special case for SSORedirect and SSOPOST\n            if (hasSsoRedirectOrPost(params.goto)) {\n                params.goto = `${Constants.context}${params.goto}`;\n                Configuration.globalData.auth.additional.replace(\"&goto=\", `&goto=${Constants.context}`);\n            }\n\n            Configuration.globalData.auth.urlParams = params;\n            return params;\n        }\n    });\n\n    Handlebars.registerHelper(\"callbackRender\", function () {\n        var result = \"\", self = this, prompt = \"\", options, defaultOption, btnClass = \"\", renderContext;\n\n        _.find(this.output, function (obj) {\n            if (obj.name === \"prompt\" && obj.value !== undefined && obj.value.length) {\n                prompt = obj.value.replace(/:$/, \"\");\n            }\n        });\n\n        function generateId (name) {\n            return _.isEmpty(name) ? \"\" : _.camelCase(name);\n        }\n\n        renderContext = {\n            id: generateId(this.input.name),\n            index: this.input.index,\n            value: this.input.value,\n            prompt\n        };\n\n        function renderPartial (name, context) {\n            return _.find(Handlebars.partials, (code, templateName) => {\n                return templateName.indexOf(`login/_${name}`) !== -1;\n            })(_.merge(renderContext, context));\n        }\n\n        switch (this.type) {\n            case \"PasswordCallback\": result += renderPartial(\"Password\"); break;\n            case \"TextInputCallback\": result += renderPartial(\"TextInput\"); break;\n            case \"TextOutputCallback\":\n                options = {\n                    message: _.find(this.output, { name: \"message\" }),\n                    type: _.find(this.output, { name: \"messageType\" })\n                };\n\n                // Magic number 4 is for a <script>, taken from ScriptTextOutputCallback.java\n                if (options.type.value === \"4\") {\n                    result += renderPartial(\"ScriptTextOutput\", {\n                        messageValue: options.message.value\n                    });\n                } else {\n                    result += renderPartial(\"TextOutput\", {\n                        typeValue: options.type.value,\n                        messageValue: options.message.value\n                    });\n                }\n                break;\n            case \"ConfirmationCallback\":\n                options = _.find(this.output, { name: \"options\" });\n\n                if (options && options.value !== undefined) {\n                    // if there is only one option then mark it as default.\n                    defaultOption = options.value.length > 1\n                        ? _.find(this.output, { name: \"defaultOption\" }) : { \"value\": 0 };\n\n                    _.each(options.value, function (option, key) {\n                        btnClass = defaultOption && defaultOption.value === key ? \"btn-primary\" : \"btn-default\";\n                        result += renderPartial(\"Confirmation\", {\n                            btnClass,\n                            key,\n                            option\n                        });\n                    });\n                }\n                break;\n            case \"ChoiceCallback\":\n                options = _.find(this.output, { name: \"choices\" });\n\n                if (options && options.value !== undefined) {\n                    result += renderPartial(\"Choice\", {\n                        values: _.map(options.value, function (option, key) {\n                            return {\n                                active: self.input.value === key,\n                                key,\n                                value: option\n                            };\n                        })\n                    });\n                }\n                break;\n            case \"HiddenValueCallback\": result += renderPartial(\"HiddenValue\"); break;\n            case \"RedirectCallback\": result += renderPartial(\"Redirect\"); break;\n            case \"PollingWaitCallback\": result += renderPartial(\"PollingWait\"); break;\n            default: result += renderPartial(\"Default\"); break;\n        }\n\n        return new Handlebars.SafeString(result);\n    });\n\n    return new LoginView();\n});\n"]}