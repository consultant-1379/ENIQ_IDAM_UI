{"version":3,"sources":["../../../../../../../XUI/org/forgerock/openam/ui/common/services/fetchUrl.jsm"],"names":["ROOT_REALM_IDENTIFIER","hasLeadingSlash","value","throwIfPathHasNoLeadingSlash","path","Error","normaliseRealmAliasResourcePath","alias","normaliseRealmResourcePath","realm","replace","redesignateRootRealm","rootIdentifier","isRootRealm","fetchUrl","getState","local","session"],"mappings":";;;;;;;;;;;;;;;AAqBA,QAAMA,wBAAwB,OAA9B,C,CAAuC;AArBvC;;;;;;;;;;;;;;;;AAgBA;;;AAMA,QAAMC,kBAAkB,SAAlBA,eAAkB,CAACC,KAAD;AAAA,eAAWA,MAAM,CAAN,MAAa,GAAxB;AAAA,KAAxB;AACA,QAAMC,+BAA+B,SAA/BA,4BAA+B,CAACC,IAAD,EAAU;AAC3C,YAAI,CAACH,gBAAgBG,IAAhB,CAAL,EAA4B;AACxB,kBAAM,IAAIC,KAAJ,uDAA6DD,IAA7D,QAAN;AACH;AACJ,KAJD;AAKA,QAAME,kCAAkC,SAAlCA,+BAAkC,CAACC,KAAD;AAAA,4BAAsBA,KAAtB;AAAA,KAAxC;AACA,QAAMC,6BAA6B,SAA7BA,0BAA6B,CAACC,KAAD;AAAA,eAAWA,MAAMC,OAAN,CAAc,KAAd,EAAqB,UAArB,CAAX;AAAA,KAAnC;AACA,QAAMC,uBAAuB,SAAvBA,oBAAuB,CAACF,KAAD,EAAQG,cAAR,EAA2B;AACpD,YAAMC,cAAcJ,UAAU,GAA9B;AACA,eAAOI,cAAcD,cAAd,QAAkCA,cAAlC,GAAmDH,KAA1D;AACH,KAHD;;AAKA;;;;;;;;;;;;;;;;;;;;;AAqBA,QAAMK,WAAW,SAAXA,QAAW,CAACV,IAAD,EAAiE;AAAA,uFAAP,EAAO;AAAA,8BAAxDK,KAAwD;AAAA,YAAxDA,KAAwD,8BAAhD,gBAAMM,QAAN,GAAiBC,KAAjB,CAAuBC,OAAvB,CAA+BR,KAAiB;;AAC9EN,qCAA6BC,IAA7B;AACA,YAAI,CAACK,KAAL,EAAY;AAAE,mBAAOL,IAAP;AAAc;;AAE5B,YAAIH,gBAAgBQ,KAAhB,CAAJ,EAA4B;AACxBA,oBAAQE,qBAAqBF,KAArB,EAA4BT,qBAA5B,CAAR;AACAS,oBAAQD,2BAA2BC,KAA3B,CAAR;AACH,SAHD,MAGO;AACHA,oBAAQH,gCAAgCG,KAAhC,CAAR;AACH;;AAED,eAAOA,QAAQL,IAAf;AACH,KAZD;;sBAceU,Q","file":"fetchUrl.js","sourcesContent":["/*\n * The contents of this file are subject to the terms of the Common Development and\n * Distribution License (the License). You may not use this file except in compliance with the\n * License.\n *\n * You can obtain a copy of the License at legal/CDDLv1.0.txt. See the License for the\n * specific language governing permission and limitations under the License.\n *\n * When distributing Covered Software, include this CDDL Header Notice in each file and include\n * the License file at legal/CDDLv1.0.txt. If applicable, add the following below the CDDL\n * Header, with the fields enclosed by brackets [] replaced by your own identifying\n * information: \"Portions copyright [year] [name of copyright owner]\".\n *\n * Copyright 2016-2017 ForgeRock AS.\n */\n\n/**\n * @module org/forgerock/openam/ui/common/services/fetchUrl\n */\nimport store from \"store/index\";\n\nconst ROOT_REALM_IDENTIFIER = \"/root\"; // TODO \"root\" is a placeholder. Identifier for a root realm yet undecided.\nconst hasLeadingSlash = (value) => value[0] === \"/\";\nconst throwIfPathHasNoLeadingSlash = (path) => {\n    if (!hasLeadingSlash(path)) {\n        throw new Error(`[fetchUrl] Path must start with forward slash. \"${path}\"`);\n    }\n};\nconst normaliseRealmAliasResourcePath = (alias) => `/realms/${alias}`;\nconst normaliseRealmResourcePath = (realm) => realm.replace(/\\//g, \"/realms/\");\nconst redesignateRootRealm = (realm, rootIdentifier) => {\n    const isRootRealm = realm === \"/\";\n    return isRootRealm ? rootIdentifier : `${rootIdentifier}${realm}`;\n};\n\n/**\n * Fetch a URL using the newer method of laying realm information into the URL (e.g. Redux).\n *\n * @param {string} path Path to the resource. Must start with a forward slash.\n * @param {Object} [options] Options to pass to this function.\n * @param {string} [options.realm=store.getState().local.session.realm] The realm to use when constructing the URL. Maybe an absolute realm or alias.\n * @returns {string} URL string to be appended after the <code>.../json</code> path.\n *\n * @throws {Error} If path does not start with a forward slash.\n *\n * @example // With session on the root realm\n * fetchUrl(\"/authentication\") => \"/realms/root/authentication\"\n * @example // With session on a sub realm\n * fetchUrl(\"/authentication\") => \"/realms/root/realms/myRealm/authentication\"\n * @example // Forcing a realm\n * fetchUrl(\"/authentication\", { realm: \"/myRealm\" }) => \"/realms/root/realms/myRealm/authentication\"\n * @example // Forcing no realm\n * fetchUrl(\"/authentication\", { realm: false }) => \"/authentication\"\n * @example // With realm alias\n * fetchUrl(\"/authentication\", { realm: \"myAlias\" }) => \"/realms/myAlias/authentication\"\n */\nconst fetchUrl = (path, { realm = store.getState().local.session.realm } = {}) => {\n    throwIfPathHasNoLeadingSlash(path);\n    if (!realm) { return path; }\n\n    if (hasLeadingSlash(realm)) {\n        realm = redesignateRootRealm(realm, ROOT_REALM_IDENTIFIER);\n        realm = normaliseRealmResourcePath(realm);\n    } else {\n        realm = normaliseRealmAliasResourcePath(realm);\n    }\n\n    return realm + path;\n};\n\nexport default fetchUrl;\n"]}