{"version":3,"sources":["../../../../../../../../XUI/org/forgerock/openam/ui/common/views/jsonSchema/GroupedJSONSchemaView.js"],"names":["define","$","_","Backbone","JSONSchema","JSONValues","createJSONEditorView","emptyProperties","setDefaultPropertiesToRequiredAndEmpty","showEnablePropertyIfAllPropertiesHidden","invokeOnRenderedAfterTimeout","callback","setTimeout","GroupedJSONSchemaView","View","extend","initialize","options","schema","TypeError","isCollection","Error","values","defaults","showOnlyRequiredAndEmpty","render","schemas","getPropertiesAsSchemas","raw","orderedSchemaPropertyKeys","getKeys","orderedSchemaValuePairs","map","key","hideInheritance","omit","value","subviews","invoke","each","view","$el","appendTo","onRendered","getData","viewData","reduce","merge"],"mappings":"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","file":"GroupedJSONSchemaView.js","sourcesContent":["/*\n * The contents of this file are subject to the terms of the Common Development and\n * Distribution License (the License). You may not use this file except in compliance with the\n * License.\n *\n * You can obtain a copy of the License at legal/CDDLv1.0.txt. See the License for the\n * specific language governing permission and limitations under the License.\n *\n * When distributing Covered Software, include this CDDL Header Notice in each file and include\n * the License file at legal/CDDLv1.0.txt. If applicable, add the following below the CDDL\n * Header, with the fields enclosed by brackets [] replaced by your own identifying\n * information: \"Portions copyright [year] [name of copyright owner]\".\n *\n * Copyright 2016-2017 ForgeRock AS.\n */\n\n/**\n* View that takes <code>JSONSchema</code> and <code>JSONValue</code> objects and renders them in a grouped structure.\n* <p/>\n* This view only supports JSONSchema objects which <strong>are collections</strong> (determined by\n* <code>#isCollection</code> upon <code>JSONSchema</code>) and outputs headers for groups followed by a simple list of\n* input fields related to that grouped within the specification of the JSON Schema.\n* <p/>\n* e.g.<br>\n* <code>\n* <hr/>\n* <i>Header 1</i><br>\n* Label 1 | &lt;input here&gt; |<br>\n* Label 2 | &lt;input here&gt; |<br>\n* <br>\n* <i>Header 2</i><br>\n* Label 1 | &lt;input here&gt; |<br>\n* Label 2 | &lt;input here&gt; |<br>\n* <hr/>\n* </code>\n * @module org/forgerock/openam/ui/common/views/jsonSchema/GroupedJSONSchemaView\n */\ndefine([\n    \"jquery\",\n    \"lodash\",\n    \"backbone\",\n    \"org/forgerock/openam/ui/common/models/JSONSchema\",\n    \"org/forgerock/openam/ui/common/models/JSONValues\",\n    \"org/forgerock/openam/ui/common/views/jsonSchema/iteratees/createJSONEditorView\",\n    \"org/forgerock/openam/ui/common/views/jsonSchema/iteratees/emptyProperties\",\n    \"org/forgerock/openam/ui/common/views/jsonSchema/iteratees/setDefaultPropertiesToRequiredAndEmpty\",\n    \"org/forgerock/openam/ui/common/views/jsonSchema/iteratees/showEnablePropertyIfAllPropertiesHidden\"\n], ($, _, Backbone, JSONSchema, JSONValues, createJSONEditorView, emptyProperties,\n    setDefaultPropertiesToRequiredAndEmpty, showEnablePropertyIfAllPropertiesHidden) => {\n    /**\n     * There is no reliable method of knowing if the form rendered by the JSON Editor has finished being added to the\n     * DOM. We do however wish to signal when render is complete so views can perform actions (e.g. enabling buttons\n     * when the form is ready for input). The workaround is to add the callback to the browser event queue using\n     * setTimeout meaning his callback will be executed after the render cycle has complete.\n     * @param  {Function} callback Function to invoke after the timeout has expired\n     */\n    function invokeOnRenderedAfterTimeout (callback) {\n        if (callback) {\n            setTimeout(callback, 0);\n        }\n    }\n\n    const GroupedJSONSchemaView = Backbone.View.extend({\n        initialize (options) {\n            if (!(options.schema instanceof JSONSchema)) {\n                throw new TypeError(\"[GroupedJSONSchemaView] \\\"schema\\\" argument is not an instance of JSONSchema.\");\n            }\n            if (!options.schema.isCollection()) {\n                throw new Error(\"[GroupedJSONSchemaView] Only JSONSchema collections are supported by this view.\");\n            }\n            if (!(options.values instanceof JSONValues)) {\n                throw new TypeError(\"[GroupedJSONSchemaView] \\\"values\\\" argument is not an instance of JSONValues.\");\n            }\n\n            this.options = _.defaults(options, {\n                showOnlyRequiredAndEmpty: false\n            });\n        },\n        render () {\n            const schemas = this.options.schema.getPropertiesAsSchemas();\n            const values = this.options.values.raw;\n            const orderedSchemaPropertyKeys = this.options.schema.getKeys(true);\n\n            // Create an array of objects which each contain the schema and values paired together\n            let orderedSchemaValuePairs = _.map(orderedSchemaPropertyKeys, (key) => ({\n                key,\n                hideInheritance: this.options.hideInheritance,\n                schema: schemas[key],\n                values: new JSONValues(values[key])\n            }));\n\n            if (this.options.showOnlyRequiredAndEmpty) {\n                orderedSchemaValuePairs = _(orderedSchemaValuePairs)\n                    .map(setDefaultPropertiesToRequiredAndEmpty)\n                    .map(showEnablePropertyIfAllPropertiesHidden)\n                    .omit(emptyProperties)\n                    .value();\n            }\n\n            this.subviews = _(orderedSchemaValuePairs)\n                .map(createJSONEditorView)\n                .invoke(\"render\")\n                .each((view) => { view.$el.appendTo(this.$el); })\n                .value();\n\n            invokeOnRenderedAfterTimeout(this.options.onRendered);\n\n            return this;\n        },\n        getData () {\n            const values = _.map(this.subviews, (view) => {\n                let viewData;\n                if (view.options.key) {\n                    viewData = { [view.options.key]: view.getData() };\n                } else {\n                    viewData = view.getData();\n                }\n                return viewData;\n            });\n\n            return _.reduce(values, _.merge, {});\n        }\n    });\n\n    return GroupedJSONSchemaView;\n});\n"]}