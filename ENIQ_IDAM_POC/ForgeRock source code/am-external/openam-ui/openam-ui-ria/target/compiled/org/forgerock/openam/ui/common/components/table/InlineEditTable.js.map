{"version":3,"sources":["../../../../../../../../XUI/org/forgerock/openam/ui/common/components/table/InlineEditTable.js"],"names":["define","$","_","Backbone","UIUtils","EditRow","defaultKeyValueSchema","required","properties","key","title","t","propertyOrder","value","View","extend","template","initialize","values","rowSchema","rows","getHeaders","headers","each","item","getRenderData","render","$el","empty","compileTemplate","then","html","tBody","find","row","initRow","append","renderInReadOnlyMode","push","appendEmptyNewRowToTheBottom","rowData","enterEditMode","currentlyEditedRow","newRow","renderInEditMode","focus","hide","exitEditMode","undefined","show","addRow","deleteRow","without","remove","on","renderInNewMode","getData","map","isValid","setData","data"],"mappings":";;AAAA;;;;;;;;;;;;;;;;AAgBAA,OAAO,CACH,QADG,EAEH,QAFG,EAGH,UAHG,EAIH,8CAJG,EAKH,+DALG,CAAP,EAMG,UAACC,CAAD,EAAIC,CAAJ,EAAOC,QAAP,EAAiBC,OAAjB,EAA0BC,OAA1B,EAAsC;AACrC,QAAMC,wBAAwB;AAC1BC,kBAAU,CAAC,KAAD,CADgB;AAE1BC,oBAAY;AACRC,iBAAK,EAAEC,OAAOT,EAAEU,CAAF,CAAI,0BAAJ,CAAT,EAA0CC,eAAe,CAAzD,EADG;AAERC,mBAAO,EAAEH,OAAOT,EAAEU,CAAF,CAAI,2BAAJ,CAAT,EAA2CC,eAAe,CAA1D;AAFC;AAFc,KAA9B;;AAQA,WAAOT,SAASW,IAAT,CAAcC,MAAd,CAAqB;AACxBC,kBAAU,wDADc;;AAGxB;;;;;;AAMAC,kBATwB,4BASwC;AAAA,mCAAlDC,MAAkD;AAAA,gBAAlDA,MAAkD,+BAAzC,EAAyC;AAAA,sCAArCC,SAAqC;AAAA,gBAArCA,SAAqC,kCAAzBb,qBAAyB;;AAC5D,iBAAKY,MAAL,GAAcA,MAAd;AACA,iBAAKC,SAAL,GAAiBA,SAAjB;AACA,iBAAKC,IAAL,GAAY,EAAZ;AACH,SAbuB;AAexBC,kBAfwB,wBAeV;AACV,gBAAMC,UAAU,EAAhB;AACApB,cAAEqB,IAAF,CAAO,KAAKJ,SAAL,CAAeX,UAAtB,EAAkC,UAACgB,IAAD,EAAU;AACxCF,wBAAQE,KAAKZ,aAAb,IAA8BY,KAAKd,KAAnC;AACH,aAFD;AAGA,mBAAOY,OAAP;AACH,SArBuB;AAuBxBG,qBAvBwB,2BAuBP;AACb,mBAAO,EAAEH,SAAS,KAAKD,UAAL,EAAX,EAAP;AACH,SAzBuB;AA2BxBK,cA3BwB,oBA2Bd;AAAA;;AACN,iBAAKC,GAAL,CAASC,KAAT;AACAxB,oBAAQyB,eAAR,CAAwB,KAAKb,QAA7B,EAAuC,KAAKS,aAAL,EAAvC,EAA6DK,IAA7D,CAAkE,UAACd,QAAD,EAAc;AAC5E,sBAAKW,GAAL,CAASI,IAAT,CAAcf,QAAd;;AAEA,sBAAKgB,KAAL,GAAa,MAAKL,GAAL,CAASM,IAAT,CAAc,OAAd,CAAb;;AAEA/B,kBAAEqB,IAAF,CAAO,MAAKL,MAAZ,EAAoB,UAACL,KAAD,EAAW;AAC3B,wBAAMqB,MAAM,MAAKC,OAAL,CAAatB,KAAb,CAAZ;AACA,0BAAKmB,KAAL,CAAWI,MAAX,CAAkBF,IAAIG,oBAAJ,GAA2BV,GAA7C;AACA,0BAAKP,IAAL,CAAUkB,IAAV,CAAeJ,GAAf;AACH,iBAJD;;AAMA,sBAAKK,4BAAL;AACH,aAZD;;AAcA,mBAAO,IAAP;AACH,SA5CuB;AA8CxBJ,eA9CwB,qBA8CD;AAAA;;AAAA,gBAAdK,OAAc,uEAAJ,EAAI;;AACnB,gBAAMN,MAAM,IAAI7B,OAAJ,CAAYmC,OAAZ,EAAqB,KAAKrB,SAA1B,CAAZ;;AAEA,gBAAMsB,gBAAgB,SAAhBA,aAAgB,CAACP,GAAD,EAAS;AAC3B,oBAAIA,QAAQ,OAAKQ,kBAAb,IAAmCR,QAAQ,OAAKS,MAApD,EAA4D;AACxD;AACH;;AAED,oBAAI,OAAKD,kBAAT,EAA6B;AACzB,2BAAKA,kBAAL,CAAwBL,oBAAxB;AACH;;AAEDH,oBAAIU,gBAAJ,GAAuBC,KAAvB;AACA,uBAAKH,kBAAL,GAA0BR,GAA1B;AACA,uBAAKS,MAAL,CAAYhB,GAAZ,CAAgBmB,IAAhB;AACH,aAZD;;AAcA,gBAAMC,eAAe,SAAfA,YAAe,GAAM;AACvB,oBAAI,OAAKL,kBAAT,EAA6B;AACzB,2BAAKA,kBAAL,CAAwBL,oBAAxB;AACA,2BAAKK,kBAAL,GAA0BM,SAA1B;AACH;AACD,uBAAKL,MAAL,CAAYhB,GAAZ,CAAgBsB,IAAhB;AACH,aAND;;AAQA,gBAAMC,SAAS,SAATA,MAAS,CAAChB,GAAD,EAAS;AACpB,uBAAKd,IAAL,CAAUkB,IAAV,CAAeJ,GAAf;AACAA,oBAAIG,oBAAJ;AACA,uBAAKE,4BAAL;AACH,aAJD;;AAMA,gBAAMY,YAAY,SAAZA,SAAY,CAACjB,GAAD,EAAS;AACvB,uBAAKd,IAAL,GAAYlB,EAAEkD,OAAF,CAAU,OAAKhC,IAAf,EAAqBc,GAArB,CAAZ;AACAA,oBAAImB,MAAJ;AACH,aAHD;;AAKAnB,gBAAIoB,EAAJ,CAAO,MAAP,EAAeb,aAAf;AACAP,gBAAIoB,EAAJ,CAAO,cAAP,EAAuBP,YAAvB;AACAb,gBAAIoB,EAAJ,CAAO,QAAP,EAAiBH,SAAjB;AACAjB,gBAAIoB,EAAJ,CAAO,KAAP,EAAcJ,MAAd;;AAEA,mBAAOhB,GAAP;AACH,SAxFuB;AA0FxBK,oCA1FwB,0CA0FQ;AAC5B,gBAAML,MAAM,KAAKC,OAAL,EAAZ;AACA,iBAAKH,KAAL,CAAWI,MAAX,CAAkBF,IAAIqB,eAAJ,GAAsB5B,GAAxC;AACA,iBAAKgB,MAAL,GAAcT,GAAd;AACH,SA9FuB;AAgGxBsB,eAhGwB,qBAgGb;AACP,mBAAOtD,EAAEuD,GAAF,CAAM,KAAKrC,IAAX,EAAiB,UAACc,GAAD;AAAA,uBAASA,IAAIsB,OAAJ,EAAT;AAAA,aAAjB,CAAP;AACH,SAlGuB;AAoGxBE,eApGwB,qBAoGb;AACP,mBAAO,IAAP;AACH,SAtGuB;AAwGxBC,eAxGwB,mBAwGfC,IAxGe,EAwGT;AACX,iBAAK1C,MAAL,GAAc0C,IAAd;AACA,iBAAKxC,IAAL,GAAY,EAAZ;AACA,iBAAKM,MAAL;AACH;AA5GuB,KAArB,CAAP;AA8GH,CA7HD","file":"InlineEditTable.js","sourcesContent":["/*\n * The contents of this file are subject to the terms of the Common Development and\n * Distribution License (the License). You may not use this file except in compliance with the\n * License.\n *\n * You can obtain a copy of the License at legal/CDDLv1.0.txt. See the License for the\n * specific language governing permission and limitations under the License.\n *\n * When distributing Covered Software, include this CDDL Header Notice in each file and include\n * the License file at legal/CDDLv1.0.txt. If applicable, add the following below the CDDL\n * Header, with the fields enclosed by brackets [] replaced by your own identifying\n * information: \"Portions copyright [year] [name of copyright owner]\".\n *\n * Copyright 2016-2017 ForgeRock AS.\n */\n\ndefine([\n    \"jquery\",\n    \"lodash\",\n    \"backbone\",\n    \"org/forgerock/commons/ui/common/util/UIUtils\",\n    \"org/forgerock/openam/ui/common/components/table/InlineEditRow\"\n], ($, _, Backbone, UIUtils, EditRow) => {\n    const defaultKeyValueSchema = {\n        required: [\"key\"],\n        properties: {\n            key: { title: $.t(\"common.form.propertyName\"), propertyOrder: 0 },\n            value: { title: $.t(\"common.form.propertyValue\"), propertyOrder: 1 }\n        }\n    };\n\n    return Backbone.View.extend({\n        template: \"templates/common/components/table/InlineEditTable.html\",\n\n        /**\n         * Initializes the table with editables rows. Only single row is allowed to be in edit mode at a time.\n         *\n         * @param {object[]} values=[] Data array to be passed to the rows\n         * @param {object} rowSchema The Schema of an item. Should be valid JSON Schema.\n         */\n        initialize ({ values = [], rowSchema = defaultKeyValueSchema }) {\n            this.values = values;\n            this.rowSchema = rowSchema;\n            this.rows = [];\n        },\n\n        getHeaders () {\n            const headers = [];\n            _.each(this.rowSchema.properties, (item) => {\n                headers[item.propertyOrder] = item.title;\n            });\n            return headers;\n        },\n\n        getRenderData () {\n            return { headers: this.getHeaders() };\n        },\n\n        render () {\n            this.$el.empty();\n            UIUtils.compileTemplate(this.template, this.getRenderData()).then((template) => {\n                this.$el.html(template);\n\n                this.tBody = this.$el.find(\"tbody\");\n\n                _.each(this.values, (value) => {\n                    const row = this.initRow(value);\n                    this.tBody.append(row.renderInReadOnlyMode().$el);\n                    this.rows.push(row);\n                });\n\n                this.appendEmptyNewRowToTheBottom();\n            });\n\n            return this;\n        },\n\n        initRow (rowData = {}) {\n            const row = new EditRow(rowData, this.rowSchema);\n\n            const enterEditMode = (row) => {\n                if (row === this.currentlyEditedRow || row === this.newRow) {\n                    return;\n                }\n\n                if (this.currentlyEditedRow) {\n                    this.currentlyEditedRow.renderInReadOnlyMode();\n                }\n\n                row.renderInEditMode().focus();\n                this.currentlyEditedRow = row;\n                this.newRow.$el.hide();\n            };\n\n            const exitEditMode = () => {\n                if (this.currentlyEditedRow) {\n                    this.currentlyEditedRow.renderInReadOnlyMode();\n                    this.currentlyEditedRow = undefined;\n                }\n                this.newRow.$el.show();\n            };\n\n            const addRow = (row) => {\n                this.rows.push(row);\n                row.renderInReadOnlyMode();\n                this.appendEmptyNewRowToTheBottom();\n            };\n\n            const deleteRow = (row) => {\n                this.rows = _.without(this.rows, row);\n                row.remove();\n            };\n\n            row.on(\"edit\", enterEditMode);\n            row.on(\"exitEditMode\", exitEditMode);\n            row.on(\"delete\", deleteRow);\n            row.on(\"add\", addRow);\n\n            return row;\n        },\n\n        appendEmptyNewRowToTheBottom () {\n            const row = this.initRow();\n            this.tBody.append(row.renderInNewMode().$el);\n            this.newRow = row;\n        },\n\n        getData () {\n            return _.map(this.rows, (row) => row.getData());\n        },\n\n        isValid () {\n            return true;\n        },\n\n        setData (data) {\n            this.values = data;\n            this.rows = [];\n            this.render();\n        }\n    });\n});\n"]}