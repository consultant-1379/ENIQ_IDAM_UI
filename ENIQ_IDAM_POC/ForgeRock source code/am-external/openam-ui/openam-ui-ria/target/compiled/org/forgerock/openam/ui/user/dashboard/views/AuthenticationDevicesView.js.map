{"version":3,"sources":["../../../../../../../../XUI/org/forgerock/openam/ui/user/dashboard/views/AuthenticationDevicesView.jsm"],"names":["getAttributeFromElement","element","attribute","closest","attr","getUUIDFromElement","getTypeFromElement","handleReject","response","addMessage","type","TYPE_DANGER","DeviceManagementView","template","noBaseTemplate","events","event","preventDefault","uuid","currentTarget","deleteFunc","then","render","device","find","data","devices","all","value","oathDevices","map","partial","merge","icon","pushDevices","parentRender"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCA,QAAMA,0BAA0B,SAA1BA,uBAA0B,CAACC,OAAD,EAAUC,SAAV;AAAA,eAAwB,sBAAED,OAAF,EAAWE,OAAX,UAA0BD,SAA1B,QAAwCE,IAAxC,CAA6CF,SAA7C,CAAxB;AAAA,KAAhC;AACA,QAAMG,qBAAqB,SAArBA,kBAAqB,CAACJ,OAAD;AAAA,eAAaD,wBAAwBC,OAAxB,EAAiC,kBAAjC,CAAb;AAAA,KAA3B;AACA,QAAMK,qBAAqB,SAArBA,kBAAqB,CAACL,OAAD;AAAA,eAAaD,wBAAwBC,OAAxB,EAAiC,kBAAjC,CAAb;AAAA,KAA3B;AACA,QAAMM,eAAe,SAAfA,YAAe,CAACC,QAAD,EAAc;AAC/B,2BAASC,UAAT,CAAoB;AAChBC,kBAAM,mBAASC,WADC;AAEhBH;AAFgB,SAApB;AAIH,KALD;;QAOMI,oB;;;AACF,wCAAe;AAAA;;AAAA;;AAEX,kBAAKC,QAAL,GAAgB,6DAAhB;AACA,kBAAKC,cAAL,GAAsB,IAAtB;AACA,kBAAKb,OAAL,GAAe,wBAAf;AACA,kBAAKc,MAAL,GAAc;AACV,uCAAwB,cADd;AAEV,+CAA+B,yBAFrB;AAGV,wCAAwB,yBAHd;AAIV,yCAA0B;AAJhB,aAAd;AALW;AAWd;;;;yCACaC,K,EAAO;AAAA;;AACjBA,sBAAMC,cAAN;;AAEA,oBAAMC,OAAOb,mBAAmBW,MAAMG,aAAzB,CAAb;AACA,oBAAMT,OAAOJ,mBAAmBU,MAAMG,aAAzB,CAAb;AACA,oBAAMC,aAAaV,SAAS,MAAT,8DAAnB;;AAEAU,2BAAWF,IAAX,EAAiBG,IAAjB,CAAsB,YAAM;AACxB,2BAAKC,MAAL;AACH,iBAFD,EAEGf,YAFH;AAGH;;;oDACwBS,K,EAAO;AAC5BA,sBAAMC,cAAN;;AAEA,oBAAMC,OAAOb,mBAAmBW,MAAMG,aAAzB,CAAb;AACA,oBAAMI,SAAS,iBAAEC,IAAF,CAAO,KAAKC,IAAL,CAAUC,OAAjB,EAA0B,EAAER,UAAF,EAA1B,CAAf;;AAEA,mDAAoBA,IAApB,EAA0BK,MAA1B;AACH;;;gDACoBP,K,EAAO;AACxBA,sBAAMC,cAAN;;AAEA;AACH;;;qCACS;AAAA;;AACN,kCAAQU,GAAR,CAAY,CAAC,sCAAD,EAAe,gCAAf,CAAZ,EAA0CN,IAA1C,CAA+C,UAACO,KAAD,EAAW;AACtD,wBAAMC,cAAc,iBAAEC,GAAF,CAAMF,MAAM,CAAN,CAAN,EAAgB,iBAAEG,OAAF,CAAU,iBAAEC,KAAZ,EAAmB,EAAEtB,MAAM,MAAR,EAAgBuB,MAAM,SAAtB,EAAnB,CAAhB,CAApB;AACA,wBAAMC,cAAc,iBAAEJ,GAAF,CAAMF,MAAM,CAAN,CAAN,EAAgB,iBAAEG,OAAF,CAAU,iBAAEC,KAAZ,EAAmB,EAAEtB,MAAM,MAAR,EAAgBuB,MAAM,QAAtB,EAAnB,CAAhB,CAApB;;AAEA,2BAAKR,IAAL,CAAUC,OAAV,gCAAwBG,WAAxB,sBAAwCK,WAAxC;;AAEA,2BAAKC,YAAL;AACH,iBAPD,EAOG5B,YAPH;AAQH;;;;;;sBAGU,IAAIK,oBAAJ,E","file":"AuthenticationDevicesView.js","sourcesContent":["/*\n * The contents of this file are subject to the terms of the Common Development and\n * Distribution License (the License). You may not use this file except in compliance with the\n * License.\n *\n * You can obtain a copy of the License at legal/CDDLv1.0.txt. See the License for the\n * specific language governing permission and limitations under the License.\n *\n * When distributing Covered Software, include this CDDL Header Notice in each file and include\n * the License file at legal/CDDLv1.0.txt. If applicable, add the following below the CDDL\n * Header, with the fields enclosed by brackets [] replaced by your own identifying\n * information: \"Portions copyright [year] [name of copyright owner]\".\n *\n * Copyright 2016-2017 ForgeRock AS.\n */\n\nimport $ from \"jquery\";\nimport _ from \"lodash\";\n\nimport {\n    remove as removeOAth,\n    getAll as getAllOAth\n} from \"org/forgerock/openam/ui/user/dashboard/services/DeviceManagementService\";\nimport {\n    remove as removePush,\n    getAll as getAllPush\n} from \"org/forgerock/openam/ui/user/dashboard/services/PushDeviceService\";\nimport AbstractView from \"org/forgerock/commons/ui/common/main/AbstractView\";\nimport DeviceDetailsDialog from \"org/forgerock/openam/ui/user/dashboard/views/DeviceDetailsDialog\";\nimport DevicesSettingsDialog from \"org/forgerock/openam/ui/user/dashboard/views/DevicesSettingsDialog\";\nimport Messages from \"org/forgerock/commons/ui/common/components/Messages\";\nimport Promise from \"org/forgerock/openam/ui/common/util/Promise\";\n\nconst getAttributeFromElement = (element, attribute) => $(element).closest(`div[${attribute}]`).attr(attribute);\nconst getUUIDFromElement = (element) => getAttributeFromElement(element, \"data-device-uuid\");\nconst getTypeFromElement = (element) => getAttributeFromElement(element, \"data-device-type\");\nconst handleReject = (response) => {\n    Messages.addMessage({\n        type: Messages.TYPE_DANGER,\n        response\n    });\n};\n\nclass DeviceManagementView extends AbstractView {\n    constructor () {\n        super();\n        this.template = \"templates/user/dashboard/AuthenticationDevicesTemplate.html\";\n        this.noBaseTemplate = true;\n        this.element = \"#authenticationDevices\";\n        this.events = {\n            \"click [data-delete]\":  \"handleDelete\",\n            \"click [data-recovery-codes]\": \"handleShowDeviceDetails\",\n            \"click [data-details]\": \"handleShowDeviceDetails\",\n            \"click [data-settings]\" : \"showDevicesSettings\"\n        };\n    }\n    handleDelete (event) {\n        event.preventDefault();\n\n        const uuid = getUUIDFromElement(event.currentTarget);\n        const type = getTypeFromElement(event.currentTarget);\n        const deleteFunc = type === \"oath\" ? removeOAth : removePush;\n\n        deleteFunc(uuid).then(() => {\n            this.render();\n        }, handleReject);\n    }\n    handleShowDeviceDetails (event) {\n        event.preventDefault();\n\n        const uuid = getUUIDFromElement(event.currentTarget);\n        const device = _.find(this.data.devices, { uuid });\n\n        DeviceDetailsDialog(uuid, device);\n    }\n    showDevicesSettings (event) {\n        event.preventDefault();\n\n        DevicesSettingsDialog();\n    }\n    render () {\n        Promise.all([getAllOAth(), getAllPush()]).then((value) => {\n            const oathDevices = _.map(value[0], _.partial(_.merge, { type: \"oath\", icon: \"clock-o\" }));\n            const pushDevices = _.map(value[1], _.partial(_.merge, { type: \"push\", icon: \"bell-o\" }));\n\n            this.data.devices = [...oathDevices, ...pushDevices];\n\n            this.parentRender();\n        }, handleReject);\n    }\n}\n\nexport default new DeviceManagementView();\n"]}