{"version":3,"sources":["../../../../../../../XUI/org/forgerock/openam/ui/user/services/SessionService.jsm"],"names":["obj","host","context","getSessionInfo","options","serviceCall","merge","url","type","data","headers","getTimeLeft","token","suppressSpinner","then","sessionInfo","idleExpiration","maxIdleExpirationTime","diff","maxExpiration","maxSessionExpirationTime","min","updateSessionInfo","errorsHandlers","status","response","dispatch","realm","isSessionValid","logout","paramString"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAyBA,QAAMA,MAAM,oCAAwB,oBAAUC,IAAlC,GAAyC,oBAAUC,OAAnD,oBAAZ,C,CAzBA;;;;;;;;;;;;;;;;AA0BA,QAAMC,iBAAiB,SAAjBA,cAAiB,CAACC,OAAD,EAAa;AAChC,eAAOJ,IAAIK,WAAJ,CAAgB,iBAAEC,KAAF,CAAQ;AAC3BC,iBAAK,yBADsB;AAE3BC,kBAAM,MAFqB;AAG3BC,kBAAM,EAHqB;AAI3BC,qBAAS;AACL,sCAAsB;AADjB;AAJkB,SAAR,EAOpBN,OAPoB,CAAhB,CAAP;AAQH,KATD;;AAWO,QAAMO,oCAAc,SAAdA,WAAc,CAACC,KAAD,EAAW;AAClC,eAAOT,eAAeS,KAAf,EAAsB,EAAEC,iBAAiB,IAAnB,EAAtB,EAAiDC,IAAjD,CAAsD,UAACC,WAAD,EAAiB;AAC1E,gBAAMC,iBAAiB,sBAAOD,YAAYE,qBAAnB,EAA0CC,IAA1C,CAA+C,uBAA/C,EAAyD,SAAzD,CAAvB;AACA,gBAAMC,gBAAgB,sBAAOJ,YAAYK,wBAAnB,EAA6CF,IAA7C,CAAkD,uBAAlD,EAA4D,SAA5D,CAAtB;AACA,mBAAO,iBAAEG,GAAF,CAAM,CAACL,cAAD,EAAiBG,aAAjB,CAAN,CAAP;AACH,SAJM,CAAP;AAKH,KANM;;AAQA,QAAMG,gDAAoB,SAApBA,iBAAoB,GAAM;AACnC,YAAMlB,UAAU,EAAEmB,gBAAiB,EAAE,gBAAgB,EAAEC,QAAQ,GAAV,EAAlB,EAAnB,EAAhB;;AAEA,eAAOrB,eAAeC,OAAf,EAAwBU,IAAxB,CAA6B,UAACW,QAAD,EAAc;AAC9C,4BAAMC,QAAN,CAAe,uBAASD,SAASE,KAAlB,CAAf;AACA,mBAAOF,QAAP;AACH,SAHM,CAAP;AAIH,KAPM;;AASA,QAAMG,0CAAiB,SAAjBA,cAAiB;AAAA,eAAMzB,gBAAN;AAAA,KAAvB;;AAEA,QAAM0B,0BAAS,SAATA,MAAS,GAAM;AACxB,YAAMC,cAAc,oCAAwB,mBAAxB,GAAsC,EAA1D;AACA,eAAO9B,IAAIK,WAAJ,CAAgB;AACnBE,qCAAuBuB,WADJ;AAEnBtB,kBAAM,MAFa;AAGnBC,kBAAM,EAHa;AAInBC,qBAAS;AACL,sCAAsB;AADjB,aAJU;AAOnBa,4BAAgB;AACZ,+BAAe,EAAEC,QAAQ,GAAV,EADH;AAEZ,gCAAgB,EAAEA,QAAQ,GAAV;AAFJ;AAPG,SAAhB,CAAP;AAYH,KAdM","file":"SessionService.js","sourcesContent":["/*\n * The contents of this file are subject to the terms of the Common Development and\n * Distribution License (the License). You may not use this file except in compliance with the\n * License.\n *\n * You can obtain a copy of the License at legal/CDDLv1.0.txt. See the License for the\n * specific language governing permission and limitations under the License.\n *\n * When distributing Covered Software, include this CDDL Header Notice in each file and include\n * the License file at legal/CDDLv1.0.txt. If applicable, add the following below the CDDL\n * Header, with the fields enclosed by brackets [] replaced by your own identifying\n * information: \"Portions copyright [year] [name of copyright owner]\".\n *\n * Copyright 2014-2017 ForgeRock AS.\n */\n\nimport _ from \"lodash\";\nimport moment from \"moment\";\n\nimport { addRealm } from \"store/modules/local/session\";\nimport AbstractDelegate from \"org/forgerock/commons/ui/common/main/AbstractDelegate\";\nimport Constants from \"org/forgerock/commons/ui/common/util/Constants\";\nimport store from \"store/index\";\nimport { exists as gotoExists, get as getGoto } from \"org/forgerock/openam/ui/user/login/gotoUrl\";\n\nconst obj = new AbstractDelegate(`${Constants.host}${Constants.context}/json/sessions`);\nconst getSessionInfo = (options) => {\n    return obj.serviceCall(_.merge({\n        url: \"?_action=getSessionInfo\",\n        type: \"POST\",\n        data: {},\n        headers: {\n            \"Accept-API-Version\": \"protocol=1.0,resource=2.0\"\n        }\n    }, options));\n};\n\nexport const getTimeLeft = (token) => {\n    return getSessionInfo(token, { suppressSpinner: true }).then((sessionInfo) => {\n        const idleExpiration = moment(sessionInfo.maxIdleExpirationTime).diff(moment(), \"seconds\");\n        const maxExpiration = moment(sessionInfo.maxSessionExpirationTime).diff(moment(), \"seconds\");\n        return _.min([idleExpiration, maxExpiration]);\n    });\n};\n\nexport const updateSessionInfo = () => {\n    const options = { errorsHandlers : { \"Unauthorized\": { status: 401 } } };\n\n    return getSessionInfo(options).then((response) => {\n        store.dispatch(addRealm(response.realm));\n        return response;\n    });\n};\n\nexport const isSessionValid = () => getSessionInfo();\n\nexport const logout = () => {\n    const paramString = gotoExists() ? `&goto=${getGoto()}` : \"\";\n    return obj.serviceCall({\n        url: `?_action=logout${paramString}`,\n        type: \"POST\",\n        data: {},\n        headers: {\n            \"Accept-API-Version\": \"protocol=1.0,resource=2.0\"\n        },\n        errorsHandlers: {\n            \"Bad Request\": { status: 400 },\n            \"Unauthorized\": { status: 401 }\n        }\n    });\n};\n"]}