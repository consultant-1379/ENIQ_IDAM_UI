{"version":3,"sources":["../../../../../../../XUI/org/forgerock/openam/ui/common/models/JSONSchema.js"],"names":["define","i18next","_","transformBooleanTypeToCheckboxFormat","transformEnumTypeToString","warnOnInferredPasswordWithoutFormat","isObjectType","object","type","groupTopLevelSimpleProperties","raw","collectionProperties","properties","pick","property","has","keys","value","predicate","simplePropertiesToGroup","omit","isEmpty","schema","cloneDeep","global","propertyOrder","title","t","throwOnNoSchemaRootType","Error","ungroupCollectionProperties","groupKey","eachProperty","callbacks","forEach","key","callback","cleanJSONSchema","default","hasDefaults","hasDynamic","Object","freeze","addDefaultProperties","defaultProperties","union","JSONSchema","hasDefaultProperties","getEnableKey","camelCase","getEnableProperty","getKeys","sort","sortedSchemas","sortBy","map","findKey","getPasswordKeys","passwordProperties","propertyPath","hasInheritance","get","getPropertiesAsSchemas","mapValues","getRequiredPropertyKeys","requiredProperties","hasEnableProperty","isUndefined","isCollection","every","removeUnrequiredNonDefaultProperties","contains","required","toFlatWithInheritanceMeta","values","originalValue","propName","isInherited","Boolean","inherited"],"mappings":"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","file":"JSONSchema.js","sourcesContent":["/*\n * The contents of this file are subject to the terms of the Common Development and\n * Distribution License (the License). You may not use this file except in compliance with the\n * License.\n *\n * You can obtain a copy of the License at legal/CDDLv1.0.txt. See the License for the\n * specific language governing permission and limitations under the License.\n *\n * When distributing Covered Software, include this CDDL Header Notice in each file and include\n * the License file at legal/CDDLv1.0.txt. If applicable, add the following below the CDDL\n * Header, with the fields enclosed by brackets [] replaced by your own identifying\n * information: \"Portions copyright [year] [name of copyright owner]\".\n *\n * Copyright 2016-2017 ForgeRock AS.\n */\n\n/**\n * Represents a JSON Schema.\n * <p/>\n * <h2>Function naming conventions</h2>\n * Refer to the following naming convention, when adding new functions to this class:\n * <ul>\n *   <li>For <strong>query</strong> functions, which do not return a new instance of <code>JSONSchema</code>, use <code>#get*</code></li>\n *   <li>For <strong>transform</strong> functions, which do not loose data, use <code>#to*</code> and <code>#from*</code></li>\n *   <li>For <strong>modification</strong> functions, which loose the data, use <code>add*</code> and <code>#remove*</code></li>\n *   <li>For functions, which <strong>check for presense</strong>, use <code>#has*</code> and <code>#is*</code></li>\n *   <li>For <strong>utility</strong> functions use simple verbs, e.g. <code>#omit</code>, <code>#pick</code>, etc.</li>\n * </ul>\n * @module\n * @example\n * // The structure of JSON Schema documents emitted from OpenAM is expected to be the following:\n * {\n *   properties: {\n *     globalProperty: true, // Global properties (OpenAM wide) are listed at the top-level\n *     default: { ... }, // Default properties are organisation (Realm) level properties and are nested under \"default\"\n *     dynamic: { ... } // Dynamic properties are user level properties (OpenAM wide) and are nested under \"dynamic\"\n *   },\n *   type: \"object\"\n * }\n */\ndefine([\n    \"i18next\",\n    \"lodash\",\n    \"org/forgerock/openam/ui/common/models/schemaTransforms/transformBooleanTypeToCheckboxFormat\",\n    \"org/forgerock/openam/ui/common/models/schemaTransforms/transformEnumTypeToString\",\n    \"org/forgerock/openam/ui/common/models/schemaTransforms/warnOnInferredPasswordWithoutFormat\"\n], (i18next, _, transformBooleanTypeToCheckboxFormat, transformEnumTypeToString,\n    warnOnInferredPasswordWithoutFormat) => {\n    /**\n     * Determines whether the specified object is of type <code>object</code>\n     * @param   {Object}  object Object to determine the type of\n     * @returns {Boolean}        Whether the object is of type <code>object</code>\n     */\n    function isObjectType (object) {\n        return object.type === \"object\";\n    }\n\n    function groupTopLevelSimpleProperties (raw) {\n        const collectionProperties = _(raw.properties)\n            .pick((property) => _.has(property, \"properties\"))\n            .keys()\n            .value();\n\n        const predicate = [\"defaults\", ...collectionProperties];\n        const simplePropertiesToGroup = _.omit(raw.properties, ...predicate);\n\n        if (_.isEmpty(simplePropertiesToGroup)) {\n            return raw;\n        }\n\n        const schema = _.cloneDeep(raw);\n\n        schema.properties = {\n            ..._.omit(schema.properties, _.keys(simplePropertiesToGroup)),\n            global: {\n                properties: simplePropertiesToGroup,\n                propertyOrder: -10,\n                title: i18next.t(\"console.common.globalAttributes\"),\n                type: \"object\"\n            }\n        };\n\n        return schema;\n    }\n\n    function throwOnNoSchemaRootType (schema) {\n        if (!schema.type) {\n            throw new Error(\"[JSONSchema] No \\\"type\\\" attribute found on schema root object.\");\n        }\n    }\n\n    /**\n    * Ungroups collection properties, moving them one level up.\n    *\n    * @param   {Object} raw Schema\n    * @param   {string} groupKey Group key of the property value object\n    * @returns {JSONSchema} JSONSchema new JSONSchema object\n    */\n    function ungroupCollectionProperties (raw, groupKey) {\n        const collectionProperties = _.pick(raw.properties[groupKey].properties, (value) => {\n            return value.type === \"object\" && _.has(value, \"properties\");\n        });\n\n        if (_.isEmpty(collectionProperties)) {\n            return raw;\n        }\n\n        const schema = _.cloneDeep(raw);\n        schema.properties = { ...schema.properties, ...collectionProperties };\n        schema.properties[groupKey].properties =\n            _.omit(schema.properties[groupKey].properties, _.keys(collectionProperties));\n\n        if (_.isEmpty(schema.properties[groupKey].properties)) {\n            delete schema.properties[groupKey];\n        }\n\n        return schema;\n    }\n\n    /**\n     * Recursively invokes the specified functions over each object's properties\n     * @param {Object} object   Object with properties\n     * @param {Array} callbacks Array of functions\n     */\n    function eachProperty (object, callbacks) {\n        if (isObjectType(object)) {\n            _.forEach(object.properties, (property, key) => {\n                _.forEach(callbacks, (callback) => {\n                    callback(property, key);\n                });\n\n                if (isObjectType(property)) {\n                    eachProperty(property, callbacks);\n                }\n            });\n        }\n    }\n\n    /**\n     * Iterates over a scheam, transforming adding appropriate warnings.\n     * @param {Object} schema the schema to be transformed\n     * @returns {Object} the transformed schema\n     */\n    function cleanJSONSchema (schema) {\n        eachProperty(schema, [\n            transformBooleanTypeToCheckboxFormat,\n            transformEnumTypeToString.default,\n            warnOnInferredPasswordWithoutFormat\n        ]);\n\n        return schema;\n    }\n\n    return class JSONSchema {\n        constructor (schema) {\n            throwOnNoSchemaRootType(schema);\n\n            const hasDefaults = _.has(schema, \"properties.defaults\");\n            const hasDynamic = _.has(schema, \"properties.dynamic\");\n\n            if (hasDefaults || hasDynamic) {\n                schema = groupTopLevelSimpleProperties(schema);\n            }\n\n            if (hasDefaults) {\n                schema = ungroupCollectionProperties(schema, \"defaults\");\n            }\n\n            schema = cleanJSONSchema(schema);\n\n            this.raw = Object.freeze(schema);\n        }\n        addDefaultProperties (keys) {\n            const schema = _.cloneDeep(this.raw);\n            schema.defaultProperties = _.union(schema.defaultProperties, keys);\n            return new JSONSchema(schema);\n        }\n        hasDefaultProperties () {\n            return !_.isEmpty(this.raw.defaultProperties);\n        }\n        getEnableKey () {\n            const key = `${_.camelCase(this.raw.title)}Enabled`;\n            if (this.raw.properties[key]) {\n                return key;\n            }\n        }\n        getEnableProperty () {\n            return this.pick(this.getEnableKey());\n        }\n        getKeys (sort) {\n            sort = typeof sort === \"undefined\" ? false : sort;\n\n            if (sort) {\n                const sortedSchemas = _.sortBy(_.map(this.raw.properties), \"propertyOrder\");\n                return _.map(sortedSchemas, (schema) => _.findKey(this.raw.properties, schema));\n            } else {\n                return _.keys(this.raw.properties);\n            }\n        }\n        getPasswordKeys () {\n            const passwordProperties = _.pick(this.raw.properties, (property) => {\n                const propertyPath = this.hasInheritance(property) ? \"properties.value.format\" : \"format\";\n                return _.get(property, propertyPath) === \"password\";\n            });\n\n            return _.keys(passwordProperties);\n        }\n        getPropertiesAsSchemas () {\n            return _.mapValues(this.raw.properties, (property) => new JSONSchema(property));\n        }\n        getRequiredPropertyKeys () {\n            const requiredProperties = _.pick(this.raw.properties, (property) => {\n                const propertyPath = this.hasInheritance(property) ? \"properties.value.required\" : \"required\";\n                return _.get(property, propertyPath) === true;\n            });\n\n            return _.keys(requiredProperties);\n        }\n        hasEnableProperty () {\n            return !_.isUndefined(this.raw.properties[`${_.camelCase(this.raw.title)}Enabled`]);\n        }\n        hasInheritance (property) {\n            return !_.isEmpty(property) && property.type === \"object\" && _.has(property, \"properties.inherited\");\n        }\n        /**\n         * Whether this schema objects' properties are all schemas in their own right.\n         * If true, this object is a simply a container for other schemas.\n         * @returns {Boolean} Whether this object is a collection\n         */\n        isCollection () {\n            return _.every(this.raw.properties, (property) => property.type === \"object\");\n        }\n        isEmpty () {\n            return _.isEmpty(this.raw.properties);\n        }\n        pick (predicate) {\n            const schema = _.cloneDeep(this.raw);\n            schema.properties = _.pick(this.raw.properties, predicate);\n\n            return new JSONSchema(schema);\n        }\n        omit (predicate) {\n            const schema = _.cloneDeep(this.raw);\n            schema.properties = _.omit(this.raw.properties, predicate);\n\n            return new JSONSchema(schema);\n        }\n        /**\n         * Returns a new JSONSchema with only the required and default properties present.\n         * @returns {JSONSchema} JSONSchema object with only the required and default properties present.\n         */\n        removeUnrequiredNonDefaultProperties () {\n            const schema = _.cloneDeep(this.raw);\n            const defaultProperties = this.raw.defaultProperties;\n            schema.properties = _.pick(this.raw.properties, (property, key) => {\n                return _.contains(defaultProperties, key) || property.required;\n            });\n            return new JSONSchema(schema);\n        }\n        /**\n         * Flattens schema properties to enable schema to be renderable. Adds inheritance metadata to each property of\n         * the schema, so JSONEditor knows whether to enable or disable the input field.\n         * @param {JSONValues} values JSONValues object to take inheritance metadata from.\n         * @returns {JSONSchema} Flattened JSONSchema object with inheritance metadata.\n         */\n        toFlatWithInheritanceMeta (values) {\n            const schema = _.cloneDeep(this.raw);\n\n            schema.properties = _.mapValues(this.raw.properties, (originalValue, propName) => {\n                if (this.hasInheritance(originalValue)) {\n                    const value = originalValue.properties.value;\n                    const property = {\n                        ..._.omit(originalValue, \"properties\"),\n                        ...value,\n                        isInherited: Boolean(values.raw[propName] && values.raw[propName].inherited)\n                    };\n                    return property;\n                }\n\n                return originalValue;\n            });\n\n            return new JSONSchema(schema);\n        }\n    };\n});\n"]}