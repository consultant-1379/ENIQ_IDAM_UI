{"version":3,"sources":["../../../../../../../../XUI/org/forgerock/openam/ui/admin/views/api/filterTree.jsm"],"names":["nestedFilter","children","filter","item","path","includes","toLowerCase","isEmpty","filterTree","cloneDeep"],"mappings":";;;;;;;;;;;;;;;AAsBA,QAAMA,eAAe,SAAfA,YAAe,CAACC,QAAD,EAAWC,MAAX,EAAsB;AACvC,eAAO,iBAAEA,MAAF,CAASD,QAAT,EAAmB,UAACE,IAAD,EAAU;AAChC,gBAAIA,KAAKC,IAAL,IAAa,iBAAEC,QAAF,CAAWF,KAAKC,IAAL,CAAUE,WAAV,EAAX,EAAoCJ,OAAOI,WAAP,EAApC,CAAjB,EAA4E;AACxE,uBAAO,IAAP;AACH,aAFD,MAEO,IAAIH,KAAKF,QAAT,EAAmB;AACtBE,qBAAKF,QAAL,GAAgBD,aAAaG,KAAKF,QAAlB,EAA4BC,MAA5B,CAAhB;AACA,uBAAO,CAAC,iBAAEK,OAAF,CAAUJ,KAAKF,QAAf,CAAR;AACH;AACJ,SAPM,CAAP;AAQH,KATD,C,CAtBA;;;;;;;;;;;;;;;;AAgBA;;;;AAiBA,QAAMO,aAAa,SAAbA,UAAa,CAACP,QAAD,EAA2B;AAAA,YAAhBC,MAAgB,uEAAP,EAAO;;AAC1C,eAAOF,aAAa,iBAAES,SAAF,CAAYR,QAAZ,CAAb,EAAoCC,MAApC,CAAP;AACH,KAFD;;sBAIeM,U","file":"filterTree.js","sourcesContent":["/*\n * The contents of this file are subject to the terms of the Common Development and\n * Distribution License (the License). You may not use this file except in compliance with the\n * License.\n *\n * You can obtain a copy of the License at legal/CDDLv1.0.txt. See the License for the\n * specific language governing permission and limitations under the License.\n *\n * When distributing Covered Software, include this CDDL Header Notice in each file and include\n * the License file at legal/CDDLv1.0.txt. If applicable, add the following below the CDDL\n * Header, with the fields enclosed by brackets [] replaced by your own identifying\n * information: \"Portions copyright [year] [name of copyright owner]\".\n *\n * Copyright 2017 ForgeRock AS.\n */\n\n/**\n * @module org/forgerock/openam/ui/admin/views/api/filterTree\n */\n\nimport _ from \"lodash\";\n\nconst nestedFilter = (children, filter) => {\n    return _.filter(children, (item) => {\n        if (item.path && _.includes(item.path.toLowerCase(), filter.toLowerCase())) {\n            return true;\n        } else if (item.children) {\n            item.children = nestedFilter(item.children, filter);\n            return !_.isEmpty(item.children);\n        }\n    });\n};\n\nconst filterTree = (children, filter = \"\") => {\n    return nestedFilter(_.cloneDeep(children), filter);\n};\n\nexport default filterTree;\n"]}