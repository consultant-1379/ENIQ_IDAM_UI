{"version":3,"sources":["../../../../../../../../../../../XUI/org/forgerock/openam/ui/admin/views/realms/authentication/trees/list/ListTreesContainer.jsx"],"names":["ListTreesContainer","state","isFetching","handleDelete","bind","handleEdit","realm","props","router","params","then","response","setState","setTrees","result","addMessage","type","TYPE_DANGER","ids","message","count","length","messages","displayMessageFromConfig","tree","removeTree","fromLocal","_id","fromRemote","reason","id","routeTo","configuration","routes","realmsAuthenticationTreesEdit","args","encodeURIComponent","trigger","newHref","getLink","realmsAuthenticationTreesNew","trees","propTypes","func","isRequired","arrayOf","object","remote","authentication","list","dispatch"],"mappings":"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","file":"ListTreesContainer.js","sourcesContent":["/*\n * The contents of this file are subject to the terms of the Common Development and\n * Distribution License (the License). You may not use this file except in compliance with the\n * License.\n *\n * You can obtain a copy of the License at legal/CDDLv1.0.txt. See the License for the\n * specific language governing permission and limitations under the License.\n *\n * When distributing Covered Software, include this CDDL Header Notice in each file and include\n * the License file at legal/CDDLv1.0.txt. If applicable, add the following below the CDDL\n * Header, with the fields enclosed by brackets [] replaced by your own identifying\n * information: \"Portions copyright [year] [name of copyright owner]\".\n *\n * Copyright 2017 ForgeRock AS.\n */\nimport { bindActionCreators } from \"redux\";\nimport { first, forEach, map, values } from \"lodash\";\nimport { t } from \"i18next\";\nimport React, { Component, PropTypes } from \"react\";\n\nimport { getAll, remove } from \"org/forgerock/openam/ui/admin/services/realm/authentication/TreeService\";\nimport { remove as fromRemote, set as setTrees } from \"store/modules/remote/authentication/trees/list\";\nimport { remove as fromLocal } from \"store/modules/local/authentication/trees/list\";\nimport connectWithStore from \"components/redux/connectWithStore\";\nimport ListTrees from \"./ListTrees\";\nimport Messages from \"org/forgerock/commons/ui/common/components/Messages\";\nimport Router from \"org/forgerock/commons/ui/common/main/Router\";\nimport showConfirmationBeforeAction from \"org/forgerock/openam/ui/admin/utils/form/showConfirmationBeforeAction\";\nimport withRouter from \"org/forgerock/commons/ui/common/components/hoc/withRouter\";\nimport withRouterPropType from \"org/forgerock/commons/ui/common/components/hoc/withRouterPropType\";\n\nclass ListTreesContainer extends Component {\n    constructor () {\n        super();\n        this.state = { isFetching: true };\n        this.handleDelete = this.handleDelete.bind(this);\n        this.handleEdit = this.handleEdit.bind(this);\n    }\n\n    componentDidMount () {\n        const realm = this.props.router.params[0];\n\n        getAll(realm).then((response) => {\n            this.setState({ isFetching: false });\n            this.props.setTrees(response.result);\n        }, (response) => {\n            this.setState({ isFetching: false });\n            Messages.addMessage({ response, type: Messages.TYPE_DANGER });\n        });\n    }\n\n    handleDelete (ids) {\n        const realm = this.props.router.params[0];\n        showConfirmationBeforeAction({\n            message: t(\"console.authentication.trees.list.confirmDeleteSelected\", { count: ids.length })\n        }, () => {\n            remove(realm, ids)\n                .then((response) => map(response, first))\n                .then((response) => {\n                    Messages.messages.displayMessageFromConfig(\"changesSaved\");\n                    forEach(response, (tree) => {\n                        this.props.removeTree.fromLocal(tree._id);\n                        this.props.removeTree.fromRemote(tree._id);\n                    });\n                }, (reason) => {\n                    Messages.addMessage({ reason, type: Messages.TYPE_DANGER });\n                });\n        });\n    }\n\n    handleEdit (id) {\n        const realm = this.props.router.params[0];\n        return Router.routeTo(Router.configuration.routes.realmsAuthenticationTreesEdit, {\n            args: map([realm, id], encodeURIComponent),\n            trigger: true\n        });\n    }\n\n    render () {\n        const realm = this.props.router.params[0];\n        const newHref = Router.getLink(Router.configuration.routes.realmsAuthenticationTreesNew, [\n            encodeURIComponent(realm)\n        ]);\n        return (\n            <ListTrees\n                isFetching={ this.state.isFetching }\n                newHref={ `#${newHref}` }\n                onDelete={ this.handleDelete }\n                onEdit={ this.handleEdit }\n                trees={ this.props.trees }\n            />\n        );\n    }\n}\n\nListTreesContainer.propTypes = {\n    removeTree: PropTypes.func.isRequired,\n    router: withRouterPropType,\n    setTrees: PropTypes.func.isRequired,\n    trees: PropTypes.arrayOf(PropTypes.object)\n};\n\nListTreesContainer = connectWithStore(ListTreesContainer,\n    (state) => ({\n        trees: values(state.remote.authentication.trees.list)\n    }),\n    (dispatch) => ({\n        removeTree: bindActionCreators({ fromLocal, fromRemote }, dispatch),\n        setTrees: bindActionCreators(setTrees, dispatch)\n    })\n);\nListTreesContainer = withRouter(ListTreesContainer);\n\nexport default ListTreesContainer;\n"]}