{"version":3,"sources":["../../../../../../../../../../../../../XUI/org/forgerock/openam/ui/admin/views/realms/authentication/trees/edit/autoLayout/positions/getOrphanPositions.jsm"],"names":["getOrphanPositions","orphans","columns","dimensions","treeHeight","nextXPosition","calculateNextXPosition","width","xPosition","map","orphan","orphanId","id","x","y","sortBy","value"],"mappings":";;;;;;;;AAoBA;;;;;;;;;AApBA;;;;;;;;;;;;;;;;AA6BA,QAAMA,qBAAqB,SAArBA,kBAAqB,CAACC,OAAD,EAAUC,OAAV,EAAmBC,UAAnB,EAAkC;AACzD,YAAMC,aAAa,iBAAI,6BAAiBF,OAAjB,EAA0BC,UAA1B,CAAJ,CAAnB;AACA,YAAIE,6CAAJ;AACA,YAAMC,yBAAyB,SAAzBA,sBAAyB,CAACC,KAAD,EAAW;AACtC,gBAAMC,YAAYH,aAAlB;AACAA,4BAAgBA,gDAAyCE,KAAzD;AACA,mBAAOC,SAAP;AACH,SAJD;;AAMA,eAAO,mBAAMP,OAAN,EACFQ,GADE,CACE,UAACC,MAAD,EAASC,QAAT;AAAA,mBAAuB;AACxBC,oBAAID,QADoB;AAExBE,mBAAGP,uBAAuBH,WAAWQ,QAAX,EAAqBJ,KAA5C,CAFqB;AAGxBO,mBAAGV;AAHqB,aAAvB;AAAA,SADF,EAMFW,MANE,CAMK,IANL,EAOFC,KAPE,EAAP;AAQH,KAjBD;;sBAmBehB,kB","file":"getOrphanPositions.js","sourcesContent":["/*\n * The contents of this file are subject to the terms of the Common Development and\n * Distribution License (the License). You may not use this file except in compliance with the\n * License.\n *\n * You can obtain a copy of the License at legal/CDDLv1.0.txt. See the License for the\n * specific language governing permission and limitations under the License.\n *\n * When distributing Covered Software, include this CDDL Header Notice in each file and include\n * the License file at legal/CDDLv1.0.txt. If applicable, add the following below the CDDL\n * Header, with the fields enclosed by brackets [] replaced by your own identifying\n * information: \"Portions copyright [year] [name of copyright owner]\".\n *\n * Copyright 2017 ForgeRock AS.\n */\n\nimport { chain, max } from \"lodash\";\n\nimport { getColumnHeights, HORIZONTAL_NODE_MARGIN, VERTICAL_NODE_MARGIN } from \"./stage\";\n\n/**\n * Given the array of orphan nodes and columns, and all the node dimensions, this function returns\n * positions (x, y) for all orphans.\n *\n * @param {Object[]} orphans array of all orphans\n * @param {Array[]} columns array of columns\n * @param {Object} dimensions heights and widths of the nodes, indexed by node id\n * @returns {Object} object with node ids as keys and their positions as values\n */\nconst getOrphanPositions = (orphans, columns, dimensions) => {\n    const treeHeight = max(getColumnHeights(columns, dimensions));\n    let nextXPosition = HORIZONTAL_NODE_MARGIN;\n    const calculateNextXPosition = (width) => {\n        const xPosition = nextXPosition;\n        nextXPosition = nextXPosition + HORIZONTAL_NODE_MARGIN + width;\n        return xPosition;\n    };\n\n    return chain(orphans)\n        .map((orphan, orphanId) => ({\n            id: orphanId,\n            x: calculateNextXPosition(dimensions[orphanId].width),\n            y: treeHeight + VERTICAL_NODE_MARGIN\n        }))\n        .sortBy(\"id\")\n        .value();\n};\n\nexport default getOrphanPositions;\n"]}