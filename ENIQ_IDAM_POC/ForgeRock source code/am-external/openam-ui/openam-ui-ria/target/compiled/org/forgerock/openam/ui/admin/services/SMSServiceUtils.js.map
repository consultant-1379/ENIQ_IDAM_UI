{"version":3,"sources":["../../../../../../../XUI/org/forgerock/openam/ui/admin/services/SMSServiceUtils.js"],"names":["define","_","Promise","obj","addSchemaType","schema","type","console","warn","isObjectType","object","eachProperty","callbacks","forEach","properties","property","key","callback","removeSchemaDefaults","defaults","transformBooleanTypeToCheckboxFormat","hasOwnProperty","format","transformEnumTypeToString","warnOnInferredPasswordWithoutFormat","name","possiblePassword","toLowerCase","indexOf","length","hasFormat","sanitizeSchema","transformedSchema","cloneDeep","grouped","every","orderedProperties","sortBy","map","value","_id","sortResultBy","attribute","data","result","schemaWithDefaults","delegate","url","all","serviceCall","headers","then","results","values","schemaWithValues"],"mappings":"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","file":"SMSServiceUtils.js","sourcesContent":["/*\n * The contents of this file are subject to the terms of the Common Development and\n * Distribution License (the License). You may not use this file except in compliance with the\n * License.\n *\n * You can obtain a copy of the License at legal/CDDLv1.0.txt. See the License for the\n * specific language governing permission and limitations under the License.\n *\n * When distributing Covered Software, include this CDDL Header Notice in each file and include\n * the License file at legal/CDDLv1.0.txt. If applicable, add the following below the CDDL\n * Header, with the fields enclosed by brackets [] replaced by your own identifying\n * information: \"Portions copyright [year] [name of copyright owner]\".\n *\n * Copyright 2015-2017 ForgeRock AS.\n */\n\n/**\n * @module org/forgerock/openam/ui/admin/services/SMSServiceUtils\n */\ndefine([\n    \"lodash\",\n    \"org/forgerock/openam/ui/common/util/Promise\"\n], (_, Promise) => {\n    const obj = {};\n\n    /**\n     * Adds a type attribute of <code>object</code> if not present\n     * @param {Object} schema Schema to check\n     */\n    function addSchemaType (schema) {\n        if (!schema.type) {\n            console.warn(\"JSON schema detected without root type attribute! Defaulting to \\\"object\\\" type.\");\n            schema.type = \"object\";\n        }\n    }\n    /**\n     * Determines whether the specified object is of type <code>object</code>\n     * @param   {Object}  object Object to determine the type of\n     * @returns {Boolean}        Whether the object is of type <code>object</code>\n     */\n    function isObjectType (object) {\n        return object.type === \"object\";\n    }\n    /**\n     * Recursively invokes the specified functions over each object's properties\n     * @param {Object} object   Object with properties\n     * @param {Array} callbacks Array of functions\n     */\n    function eachProperty (object, callbacks) {\n        if (isObjectType(object)) {\n            _.forEach(object.properties, function (property, key) {\n                _.forEach(callbacks, function (callback) {\n                    callback(property, key);\n                });\n\n                if (isObjectType(property)) {\n                    eachProperty(property, callbacks);\n                }\n            });\n        }\n    }\n    /**\n    * Removes schema <code>defaults</code> attribute if present\n    * @param {Object} schema Schema to check\n    */\n    function removeSchemaDefaults (schema) {\n        if (schema.properties.defaults) {\n            console.warn(\"JSON schema detected with a \\\"defaults\\\" section present in it's properties. Removing.\");\n            delete schema.properties.defaults;\n        }\n    }\n    /**\n    * Transforms boolean types to checkbox format\n    * FIXME: To fix server side? Visual only?\n    * @param {Object} property Property to transform\n    */\n    function transformBooleanTypeToCheckboxFormat (property) {\n        if (property.hasOwnProperty(\"type\") && property.type === \"boolean\") {\n            property.format = \"checkbox\";\n        }\n    }\n    /**\n    * Recursively add string type to enum\n    * FIXME: To fix server side\n    * @param {Object} property Property to transform\n    */\n    function transformEnumTypeToString (property) {\n        if (property.hasOwnProperty(\"enum\")) {\n            property.type = \"string\";\n        }\n    }\n    /**\n     * Warns if a property is inferred to be a password and does not have a format of password\n     * @param {Object} property Property to transform\n     * @param {String} name Raw property name\n     */\n    function warnOnInferredPasswordWithoutFormat (property, name) {\n        var possiblePassword = name.toLowerCase().indexOf(\"password\", name.length - 8) !== -1,\n            hasFormat = property.format === \"password\";\n        if (property.type === \"string\" && possiblePassword && !hasFormat) {\n            console.warn(\"JSON schema password property detected (inferred) without format of \\\"password\\\"\");\n        }\n    }\n\n    /**\n     * Sanitizes JSON Schemas.\n     * @param  {Object} schema Schema to sanitize\n     * @returns {Object}       Sanitized schema\n     * @deprecated\n     */\n    obj.sanitizeSchema = function (schema) {\n        console.warn(\"[SMSServiceUtils] \\\"#sanitizeSchema\\\" is deprecated. Use JSONSchema model instead.\");\n        var transformedSchema = _.cloneDeep(schema);\n\n        /**\n         * Missing and superfluous attribute checks\n         */\n        addSchemaType(transformedSchema);\n        removeSchemaDefaults(transformedSchema);\n\n        /**\n         * Property transforms & warnings\n         */\n        eachProperty(transformedSchema, [\n            transformBooleanTypeToCheckboxFormat,\n            transformEnumTypeToString,\n            warnOnInferredPasswordWithoutFormat\n        ]);\n\n        /**\n         * Additional attributes\n         */\n        // Adds attribute indicating if all the schema properties are of the type \"object\" (hence grouped)\n        transformedSchema.grouped = _.every(transformedSchema.properties, isObjectType);\n        // Create ordered array\n        transformedSchema.orderedProperties = _.sortBy(_.map(transformedSchema.properties, function (value, key) {\n            value._id = key;\n            return value;\n        }), \"propertyOrder\");\n\n        return transformedSchema;\n    };\n\n    obj.sortResultBy = function (attribute) {\n        return function (data) {\n            data.result = _.sortBy(data.result, attribute);\n        };\n    };\n\n    obj.schemaWithDefaults = (delegate, url) =>\n        Promise.all([\n            delegate.serviceCall({\n                url: `${url}?_action=schema`,\n                headers: { \"Accept-API-Version\": \"protocol=1.0,resource=1.0\" },\n                type: \"POST\"\n            }),\n            delegate.serviceCall({\n                url: `${url}?_action=template`,\n                headers: { \"Accept-API-Version\": \"protocol=1.0,resource=1.0\" },\n                type: \"POST\"\n            })\n        ]).then(function (results) {\n            return {\n                schema: obj.sanitizeSchema(results[0][0]),\n                values: results[1][0]\n            };\n        });\n\n    obj.schemaWithValues = function (delegate, url) {\n        return Promise.all([\n            delegate.serviceCall({\n                url: `${url}?_action=schema`,\n                headers: { \"Accept-API-Version\": \"protocol=1.0,resource=1.0\" },\n                type: \"POST\"\n            }),\n            delegate.serviceCall({\n                url,\n                headers: { \"Accept-API-Version\": \"protocol=1.0,resource=1.0\" }\n            })\n        ]).then(function (results) {\n            return {\n                schema: obj.sanitizeSchema(results[0][0]),\n                values: results[1][0]\n            };\n        });\n    };\n\n    return obj;\n});\n"]}