{"version":3,"sources":["../../../../../../../../../../../XUI/org/forgerock/openam/ui/admin/views/realms/authentication/trees/new/NewTreeContainer.jsx"],"names":["NewTreeContainer","state","isFetching","treeName","handleCreate","bind","handleTreeNameChange","realm","props","router","params","then","schema","template","setState","setSchema","setTemplate","response","addMessage","type","TYPE_DANGER","formData","routeTo","configuration","routes","realmsAuthenticationTreesEdit","args","encodeURIComponent","trigger","propTypes","objectOf","object","isRequired","func","remote","authentication","trees","dispatch"],"mappings":"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","file":"NewTreeContainer.js","sourcesContent":["/*\n * The contents of this file are subject to the terms of the Common Development and\n * Distribution License (the License). You may not use this file except in compliance with the\n * License.\n *\n * You can obtain a copy of the License at legal/CDDLv1.0.txt. See the License for the\n * specific language governing permission and limitations under the License.\n *\n * When distributing Covered Software, include this CDDL Header Notice in each file and include\n * the License file at legal/CDDLv1.0.txt. If applicable, add the following below the CDDL\n * Header, with the fields enclosed by brackets [] replaced by your own identifying\n * information: \"Portions copyright [year] [name of copyright owner]\".\n *\n * Copyright 2017 ForgeRock AS.\n */\nimport { bindActionCreators } from \"redux\";\nimport { isEmpty, map } from \"lodash\";\nimport React, { Component, PropTypes } from \"react\";\n\nimport {\n    create,\n    getInitialState\n} from \"org/forgerock/openam/ui/admin/services/realm/authentication/TreeService\";\nimport { set as setSchema } from \"store/modules/remote/authentication/trees/schema\";\nimport { set as setTemplate } from \"store/modules/remote/authentication/trees/template\";\nimport connectWithStore from \"components/redux/connectWithStore\";\nimport Messages from \"org/forgerock/commons/ui/common/components/Messages\";\nimport NewTree from \"./NewTree\";\nimport Router from \"org/forgerock/commons/ui/common/main/Router\";\nimport withRouter from \"org/forgerock/commons/ui/common/components/hoc/withRouter\";\nimport withRouterPropType from \"org/forgerock/commons/ui/common/components/hoc/withRouterPropType\";\n\nclass NewTreeContainer extends Component {\n    constructor () {\n        super();\n        this.state = {\n            isFetching: true,\n            treeName: \"\"\n        };\n        this.handleCreate = this.handleCreate.bind(this);\n        this.handleTreeNameChange = this.handleTreeNameChange.bind(this);\n    }\n\n    componentDidMount () {\n        const realm = this.props.router.params[0];\n\n        getInitialState(realm).then(({ schema, template }) => {\n            this.setState({ isFetching: false });\n            this.props.setSchema(schema[0]);\n            this.props.setTemplate(template[0]);\n        }, (response) => {\n            this.setState({ isFetching: false });\n            Messages.addMessage({ response, type: Messages.TYPE_DANGER });\n        });\n    }\n\n    handleCreate (formData) {\n        const realm = this.props.router.params[0];\n        // This doesn't have the values.removeNullPasswords fix from OPENAM-11834 as not required for this view.\n        // However it might need adding in the future.\n        create(realm, formData, this.state.treeName).then(() => {\n            Router.routeTo(Router.configuration.routes.realmsAuthenticationTreesEdit,\n                { args: map([realm, this.state.treeName], encodeURIComponent), trigger: true });\n        }, (response) => Messages.addMessage({ response, type: Messages.TYPE_DANGER }));\n    }\n\n    handleTreeNameChange (treeName) {\n        this.setState({ treeName });\n    }\n\n    render () {\n        return (\n            <NewTree\n                isCreateAllowed={ !isEmpty(this.state.treeName) }\n                isFetching={ this.state.isFetching }\n                onCreate={ this.handleCreate }\n                onTreeNameChange={ this.handleTreeNameChange }\n                schema={ this.props.schema }\n                template={ this.props.template }\n                treeName={ this.state.treeName }\n            />\n        );\n    }\n}\n\nNewTreeContainer.propTypes = {\n    router: withRouterPropType,\n    schema: PropTypes.objectOf(PropTypes.object).isRequired,\n    setSchema: PropTypes.func.isRequired,\n    setTemplate: PropTypes.func.isRequired,\n    template: PropTypes.objectOf(PropTypes.object).isRequired\n};\n\nNewTreeContainer = connectWithStore(NewTreeContainer,\n    (state) => ({\n        schema: state.remote.authentication.trees.schema,\n        template: state.remote.authentication.trees.template\n    }),\n    (dispatch) => ({\n        setSchema: bindActionCreators(setSchema, dispatch),\n        setTemplate: bindActionCreators(setTemplate, dispatch)\n    })\n);\nNewTreeContainer = withRouter(NewTreeContainer);\n\nexport default NewTreeContainer;\n"]}