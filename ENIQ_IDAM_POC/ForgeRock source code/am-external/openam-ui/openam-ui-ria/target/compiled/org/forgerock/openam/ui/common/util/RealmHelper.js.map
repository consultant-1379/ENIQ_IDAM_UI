{"version":3,"sources":["../../../../../../../XUI/org/forgerock/openam/ui/common/util/RealmHelper.js"],"names":["define","_","Configuration","URIUtils","obj","decorateURLWithOverrideRealm","uri","overrideRealm","getOverrideRealm","prepend","idx","fragment","indexOf","slice","decorateURIWithRealm","decorateURIWithSubRealm","persisted","globalData","persistedSubRealm","auth","subRealm","undefined","console","warn","replace","getRealm","realm","getSubRealm","substring","parseQueryString","getCurrentQueryString","getCurrentFragmentQueryString","subRealmSplit","getCurrentFragment","split","page","shift","subRealmSpecifiablePages","include","join","encodeRealm","path","encodedPath","realmPath","each","pathFragment","push","encodeURIComponent"],"mappings":"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","file":"RealmHelper.js","sourcesContent":["/*\n * The contents of this file are subject to the terms of the Common Development and\n * Distribution License (the License). You may not use this file except in compliance with the\n * License.\n *\n * You can obtain a copy of the License at legal/CDDLv1.0.txt. See the License for the\n * specific language governing permission and limitations under the License.\n *\n * When distributing Covered Software, include this CDDL Header Notice in each file and include\n * the License file at legal/CDDLv1.0.txt. If applicable, add the following below the CDDL\n * Header, with the fields enclosed by brackets [] replaced by your own identifying\n * information: \"Portions copyright [year] [name of copyright owner]\".\n *\n * Copyright 2014-2017 ForgeRock AS.\n */\n\ndefine([\n    \"lodash\",\n    \"org/forgerock/commons/ui/common/main/Configuration\",\n    \"org/forgerock/commons/ui/common/util/URIUtils\"\n], function (_, Configuration, URIUtils) {\n    /**\n     * @exports org/forgerock/openam/ui/common/util/RealmHelper\n     */\n    var obj = {};\n\n    /**\n     * Decorates a URI with an override realm\n     * <p>\n     * Appends a realm override to the query string if an override exists\n     * @param {String} uri A URI to decorate\n     * @returns {String} Decorated URI\n     */\n    obj.decorateURLWithOverrideRealm = function (uri) {\n        var overrideRealm = obj.getOverrideRealm(),\n            prepend, idx, fragment;\n\n        if (overrideRealm) {\n            if (uri.indexOf(\"realm=\") !== -1) {\n                // URI is already decorated by some other means\n                return uri;\n            }\n            idx = uri.indexOf(\"#\");\n            if (idx !== -1) {\n                fragment = uri.slice(idx);\n                uri = uri.slice(0, idx);\n            }\n\n            prepend = uri.indexOf(\"?\") === -1 ? \"?\" : \"&\";\n            uri = `${uri}${prepend}realm=${overrideRealm}`;\n            if (fragment) {\n                uri = uri + fragment;\n            }\n        }\n\n        return uri;\n    };\n\n    /**\n     * Decorates a URI with realm information\n     * <p>\n     * Delegates to #decorateURIWithSubRealm & #decorateURLWithOverrideRealm\n     * @param {String} uri A URI to decorate\n     * @returns {String} Decorated URI\n     */\n    obj.decorateURIWithRealm = function (uri) {\n        uri = obj.decorateURIWithSubRealm(uri);\n        uri = obj.decorateURLWithOverrideRealm(uri);\n\n        return uri;\n    };\n\n    /**\n     * Decorates a URI with a sub realm\n     * <p>\n     * Replaces any occurance of '__subrealm__/' in the URI with the sub realm\n     * @param {String} uri A URI to decorate\n     * @returns {String} Decorated URI\n     */\n    obj.decorateURIWithSubRealm = function (uri) {\n        var persisted = Configuration.globalData,\n            persistedSubRealm = persisted && persisted.auth ? persisted.auth.subRealm : \"\",\n            subRealm = persistedSubRealm ? `${persistedSubRealm}/` : \"\";\n\n        if (persisted &&\n            persisted.auth &&\n            (persisted.auth.subRealm === undefined || persisted.auth.subRealm === null)) {\n            console.warn(\"Unable to decorate URI, Configuration.globalData.auth.subRealm not yet set\");\n        }\n\n        uri = uri.replace(\"__subrealm__/\", subRealm);\n\n        return uri;\n    };\n\n    /**\n     * Determines the current realm by examining both the override realm and the subRealm.\n     * The subRealm is determined from the /XUI/#login/realmName format.\n     * The overrideRealm is determined from either the /XUI/?realm=/realmName#login/ or /XUI/#login/&realm=/realmName\n     * format.\n     *\n     * Please note that the realm value determined by XUI does not take DNS aliases into account, hence it can be\n     * potentially incorrect when overrideRealm is not specified in the request.\n     *\n     * @returns {String} The realm determined from the request without the leading '/'.\n     */\n    obj.getRealm = function () {\n        var realm = obj.getOverrideRealm() || obj.getSubRealm();\n        return realm.substring(0, 1) === \"/\" ? realm.substring(1) : realm;\n    };\n\n    /**\n     * Determines the current override realm from the URI query string and hash fragment query string\n     * @returns {String} Override realm AS IS (no slash modification) (e.g. <code>/</code> or <code>/realm1</code>)\n     */\n    obj.getOverrideRealm = function () {\n        // Note: unlike in other places, the URI query parameter takes precedence over the fragment query parameter\n        var uri = URIUtils.parseQueryString(URIUtils.getCurrentQueryString()).realm,\n            fragment = URIUtils.parseQueryString(URIUtils.getCurrentFragmentQueryString()).realm;\n\n        return uri ? uri : fragment;\n    };\n\n    /**\n     * Determines the current sub realm from the URI hash fragment\n     * @returns {String} Sub realm WITHOUT any leading or trailing slash (e.g. <code>realm1/realm2</code>)\n     */\n    obj.getSubRealm = function () {\n        var subRealmSplit = URIUtils.getCurrentFragment().split(\"/\"),\n            page = subRealmSplit.shift().split(\"&\")[0],\n            subRealmSpecifiablePages =\n                [\"login\", \"passwordReset\", \"continuePasswordReset\", \"register\", \"continueRegister\"],\n            subRealm;\n\n        if (page && _.include(subRealmSpecifiablePages, page)) {\n            subRealm = subRealmSplit.join(\"/\").split(\"&\")[0];\n            subRealm = subRealm.slice(-1) === \"/\" ? subRealm.slice(0, -1) : subRealm;\n        } else if (Configuration.globalData.auth.subRealm) {\n            subRealm = Configuration.globalData.auth.subRealm;\n        } else {\n            subRealm = \"\";\n        }\n\n        return subRealm;\n    };\n\n    /**\n     * Encode a realm's path.\n     * @param  {String} path - realm path\n     * @returns {String} Encoded realm path e.g. /myRealm/Realm%232\n     */\n    obj.encodeRealm = function (path) {\n        var encodedPath = [],\n            realmPath = path.split(\"/\");\n\n        _.each(realmPath, function (pathFragment) {\n            if (pathFragment !== \"\") {\n                encodedPath.push(encodeURIComponent(pathFragment));\n            }\n        });\n\n        return `/${encodedPath.join(\"/\")}`;\n    };\n\n    return obj;\n});\n"]}