{"version":3,"sources":["../../XUI/components/EmphasizedText.jsx"],"names":["emphasizeMatchingText","children","match","isOdd","number","snippets","split","RegExp","snippet","index","EmphasizedText","propTypes","string","isRequired"],"mappings":";;;;;;;;;;;;;;;AAmBA;;;;;;;;;;;AAnBA;;;;;;;;;;;;;;;;AA8BA,aAASA,qBAAT,CAAgCC,QAAhC,EAA0CC,KAA1C,EAAiD;AAC7C,YAAMC,QAAQ,SAARA,KAAQ,CAACC,MAAD;AAAA,mBAAaA,SAAS,CAAV,KAAiB,CAA7B;AAAA,SAAd;AACA,YAAMC,WAAWJ,SAASK,KAAT,CAAe,IAAIC,MAAJ,OAAeL,KAAf,QAAyB,IAAzB,CAAf,CAAjB;AACA,eAAO,iBAAIG,QAAJ,EAAc,UAACG,OAAD,EAAUC,KAAV,EAAoB;AACrC,mBAAON,MAAMM,KAAN,IAAe;AAAA;AAAA;AAASD;AAAT,aAAf,GAA4CA,OAAnD;AACH,SAFM,CAAP;AAGH;;AAED,QAAME,iBAAiB,SAAjBA,cAAiB,OAAyB;AAAA,YAAtBT,QAAsB,QAAtBA,QAAsB;AAAA,YAAZC,KAAY,QAAZA,KAAY;;AAC5C,YAAIA,KAAJ,EAAW;AACP,mBAAO;AAAA;AAAA;AAAQF,sCAAsBC,QAAtB,EAAgCC,KAAhC;AAAR,aAAP;AACH,SAFD,MAEO;AACH,mBAAO;AAAA;AAAA;AAAQD;AAAR,aAAP;AACH;AACJ,KAND;;AAQAS,mBAAeC,SAAf,GAA2B;AACvBV,kBAAU,iBAAUW,MAAV,CAAiBC,UADJ;AAEvBX,eAAO,iBAAUU;AAFM,KAA3B;;sBAKeF,c","file":"EmphasizedText.js","sourcesContent":["/*\n * The contents of this file are subject to the terms of the Common Development and\n * Distribution License (the License). You may not use this file except in compliance with the\n * License.\n *\n * You can obtain a copy of the License at legal/CDDLv1.0.txt. See the License for the\n * specific language governing permission and limitations under the License.\n *\n * When distributing Covered Software, include this CDDL Header Notice in each file and include\n * the License file at legal/CDDLv1.0.txt. If applicable, add the following below the CDDL\n * Header, with the fields enclosed by brackets [] replaced by your own identifying\n * information: \"Portions copyright [year] [name of copyright owner]\".\n *\n * Copyright 2017 ForgeRock AS.\n */\n\nimport React, { PropTypes } from \"react\";\nimport { map } from \"lodash\";\n\n/**\n * This function creates an array of snippets, with the odd array snippets being the ones with matched characters,\n * and the even snippets being the characters inbetween. The matched snippets are then wrapped in the <strong> element.\n * @param {string} children The string to which the emphasized text will be applied.\n * @param {string} match The characters of the string to emphasize.\n * @returns {Array<String|ReactElement>} An array of alternating strings and react elements.\n * @example\n * Given the string \"/applications\",\n *      a match of \"a\" will return the snippet array [\"/\", \"a\", \"pplic\", \"a\", \"tions\"]\n *      a match of \"/AP\" will return the snippet array [\"\", \"/ap\", \"plications\"]\n */\nfunction emphasizeMatchingText (children, match) {\n    const isOdd = (number) => (number % 2) === 1;\n    const snippets = children.split(new RegExp(`(${match})`, \"gi\"));\n    return map(snippets, (snippet, index) => {\n        return isOdd(index) ? <strong>{snippet}</strong> : snippet;\n    });\n}\n\nconst EmphasizedText = ({ children, match }) => {\n    if (match) {\n        return <span>{ emphasizeMatchingText(children, match) }</span>;\n    } else {\n        return <span>{ children }</span>;\n    }\n};\n\nEmphasizedText.propTypes = {\n    children: PropTypes.string.isRequired,\n    match: PropTypes.string\n};\n\nexport default EmphasizedText;\n"]}