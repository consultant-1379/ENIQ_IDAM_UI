{"version":3,"sources":["../../../../../../../XUI/org/forgerock/commons/ui/common/util/URIUtils.js"],"names":["define","_","obj","getCurrentCompositeQueryString","urlQueryString","getCurrentQueryString","fragmentQueryString","getCurrentFragmentQueryString","length","getCurrentFragment","getCurrentUrl","split","fragment","queryString","indexOf","substring","getCurrentOrigin","window","location","protocol","host","getCurrentPathName","pathname","getCurrentQueryParam","paramName","urlParams","parseQueryString","hasOwnProperty","search","substr","href","object","map","pair","decodeURIComponent"],"mappings":";;AAAA;;;;;;;;;;;;;;;AAeA;AACCA,OAAO,CACJ,QADI,CAAP,EAEE,UAAUC,CAAV,EAAa;AACZ;;;AAGA,QAAIC,MAAM,EAAV;AACA;;;;;;;;AAQAA,QAAIC,8BAAJ,GAAqC,YAAY;AAC7C,YAAIC,iBAAiBF,IAAIG,qBAAJ,EAArB;AAAA,YACIC,sBAAsBJ,IAAIK,6BAAJ,EAD1B;;AAGA,eAAOD,oBAAoBE,MAApB,GAA6BF,mBAA7B,GAAmDF,cAA1D;AACH,KALD;;AAOA;;;;;;;AAOAF,QAAIO,kBAAJ,GAAyB,YAAW;AAChC,eAAOP,IAAIQ,aAAJ,GAAoBC,KAApB,CAA0B,GAA1B,EAA+B,CAA/B,KAAqC,EAA5C;AACH,KAFD;;AAIA;;;;AAIAT,QAAIK,6BAAJ,GAAoC,YAAW;AAC3C,YAAIK,WAAWV,IAAIO,kBAAJ,EAAf;AAAA,YACII,cAAc,EADlB;;AAGA,YAAGD,SAASE,OAAT,CAAiB,GAAjB,IAAwB,CAAC,CAA5B,EAA+B;AAC3BD,0BAAcD,SAASG,SAAT,CAAmBH,SAASE,OAAT,CAAiB,GAAjB,IAAwB,CAA3C,CAAd;AACH;;AAED,eAAOD,WAAP;AACH,KATD;;AAWA;;;;AAIAX,QAAIc,gBAAJ,GAAuB,YAAW;AAC9B,eAAOC,OAAOC,QAAP,CAAgBC,QAAhB,GAA2B,IAA3B,GAAkCF,OAAOC,QAAP,CAAgBE,IAAzD;AACH,KAFD;;AAIA;;;;AAIAlB,QAAImB,kBAAJ,GAAyB,YAAW;AAChC,eAAOJ,OAAOC,QAAP,CAAgBI,QAAvB;AACH,KAFD;;AAIA;;;;;AAKApB,QAAIqB,oBAAJ,GAA2B,UAASC,SAAT,EAAoB;AAC3C,YAAIC,YAAYvB,IAAIwB,gBAAJ,CAAqBxB,IAAIC,8BAAJ,EAArB,CAAhB;AACA,YAAIsB,aAAaA,UAAUE,cAAV,CAAyBH,SAAzB,CAAjB,EAAsD;AAClD,mBAAOC,UAAUD,SAAV,CAAP;AACH,SAFD,MAEO;AACH,mBAAO,IAAP;AACH;AACJ,KAPD;;AASA;;;;AAIAtB,QAAIG,qBAAJ,GAA4B,YAAW;AACnC,YAAIQ,cAAcI,OAAOC,QAAP,CAAgBU,MAAlC;;AAEA,eAAOf,YAAYgB,MAAZ,CAAmB,CAAnB,EAAsBhB,YAAYL,MAAlC,CAAP;AACH,KAJD;;AAMA;;;;AAIAN,QAAIQ,aAAJ,GAAoB,YAAW;AAC3B,eAAOO,OAAOC,QAAP,CAAgBY,IAAvB;AACH,KAFD;;AAIA;;;;;AAKA5B,QAAIwB,gBAAJ,GAAuB,UAAUb,WAAV,EAAuB;AAC1C,YAAIA,WAAJ,EAAiB;AACb,mBAAOZ,EAAE8B,MAAF,CAAS9B,EAAE+B,GAAF,CAAMnB,YAAYF,KAAZ,CAAkB,GAAlB,CAAN,EAA8B,UAAUsB,IAAV,EAAgB;AAC1D,uBAAOhC,EAAE+B,GAAF,CAAMC,KAAKtB,KAAL,CAAW,GAAX,EAAgB,CAAhB,CAAN,EAA0BuB,kBAA1B,CAAP;AACH,aAFe,CAAT,CAAP;AAGH;AACD,eAAO,EAAP;AACH,KAPD;;AASA,WAAOhC,GAAP;AACH,CA/GA","file":"URIUtils.js","sourcesContent":["/**\r\n * The contents of this file are subject to the terms of the Common Development and\r\n * Distribution License (the License). You may not use this file except in compliance with the\r\n * License.\r\n *\r\n * You can obtain a copy of the License at legal/CDDLv1.0.txt. See the License for the\r\n * specific language governing permission and limitations under the License.\r\n *\r\n * When distributing Covered Software, include this CDDL Header Notice in each file and include\r\n * the License file at legal/CDDLv1.0.txt. If applicable, add the following below the CDDL\r\n * Header, with the fields enclosed by brackets [] replaced by your own identifying\r\n * information: \"Portions copyright [year] [name of copyright owner]\".\r\n *\r\n * Copyright 2015-2016 ForgeRock AS.\r\n */\r\n/* eslint-disable */\r\n define([\r\n    \"lodash\"\r\n], function (_) {\r\n    /**\r\n     * @exports org/forgerock/commons/ui/common/util/URIUtils\r\n     */\r\n    var obj = {};\r\n    /**\r\n     * Returns an unescaped composite query string constructed from:<br>\r\n     * <ul><li>Fragment query string</li>\r\n     * <li>URL query string</li></ul>\r\n     * <p>\r\n     * If a fragment query string is present it overrides the URL query string entirely\r\n     * @returns {string} Unescaped query string\r\n     */\r\n    obj.getCurrentCompositeQueryString = function () {\r\n        var urlQueryString = obj.getCurrentQueryString(),\r\n            fragmentQueryString = obj.getCurrentFragmentQueryString();\r\n\r\n        return fragmentQueryString.length ? fragmentQueryString : urlQueryString;\r\n    };\r\n\r\n    /**\r\n     * Returns the fragment component of the current URI\r\n     *\r\n     * Use instead of the inconsistent window.location.hash as Firefox unescapes this parameter incorrectly\r\n     * @see {@link https://bugzilla.mozilla.org/show_bug.cgi?id=135309}\r\n     * @returns {String} Unescaped fragment or empty string if no fragment was found\r\n     */\r\n    obj.getCurrentFragment = function() {\r\n        return obj.getCurrentUrl().split('#')[1] || '';\r\n    };\r\n\r\n    /**\r\n     * Returns the query string from the fragment component\r\n     * @returns {String} Unescaped query string or empty string if no query string was found\r\n     */\r\n    obj.getCurrentFragmentQueryString = function() {\r\n        var fragment = obj.getCurrentFragment(),\r\n            queryString = '';\r\n\r\n        if(fragment.indexOf('&') > -1) {\r\n            queryString = fragment.substring(fragment.indexOf('&') + 1);\r\n        }\r\n\r\n        return queryString;\r\n    };\r\n\r\n    /**\r\n     * Returns the current origin (http://host:8080 in http://host:8080/foo/bar)\r\n     * @returns {string} the current origin\r\n     */\r\n    obj.getCurrentOrigin = function() {\r\n        return window.location.protocol + \"//\" + window.location.host;\r\n    };\r\n\r\n    /**\r\n     * Returns the current path name (/foo/bar in http://host:8080/foo/bar)\r\n     * @returns {string} the current path name\r\n     */\r\n    obj.getCurrentPathName = function() {\r\n        return window.location.pathname;\r\n    };\r\n\r\n    /**\r\n     * Returns the value a single query parameter from the current URL\r\n     * @param {string} paramName the name of the query parameter to find\r\n     * @returns {string} the value of the query parameter or null if there is no matching parameter\r\n     */\r\n    obj.getCurrentQueryParam = function(paramName) {\r\n        var urlParams = obj.parseQueryString(obj.getCurrentCompositeQueryString());\r\n        if (urlParams && urlParams.hasOwnProperty(paramName)) {\r\n            return urlParams[paramName];\r\n        } else {\r\n            return null;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Returns the query string from the URI\r\n     * @returns {string} Unescaped query string or empty string if no query string was found\r\n     */\r\n    obj.getCurrentQueryString = function() {\r\n        var queryString = window.location.search;\r\n\r\n        return queryString.substr(1, queryString.length);\r\n    };\r\n\r\n    /**\r\n     * Returns the current full URL\r\n     * @returns {string} the current full URL\r\n     */\r\n    obj.getCurrentUrl = function() {\r\n        return window.location.href;\r\n    };\r\n\r\n    /**\r\n     * Converts a string of query parameters (key1=value&key2=value) into an object of key/value pairs\r\n     * @param {string} queryString An encoded query string\r\n     * @returns {object} An object of key/value pairs\r\n     */\r\n    obj.parseQueryString = function (queryString) {\r\n        if (queryString) {\r\n            return _.object(_.map(queryString.split(\"&\"), function (pair) {\r\n                return _.map(pair.split(\"=\", 2), decodeURIComponent);\r\n            }));\r\n        }\r\n        return {};\r\n    };\r\n\r\n    return obj;\r\n});"]}