{"version":3,"sources":["../../../../../../../../../XUI/org/forgerock/openam/ui/common/views/jsonSchema/editors/TogglableJSONEditorView.js"],"names":["define","$","_","Backbone","JSONSchema","JSONValues","UIUtils","JSONEditorView","TogglableJSONEditorView","View","extend","className","initialize","options","schema","TypeError","values","enablePropertyKey","getEnableKey","enablePropertyValue","raw","omit","onEnabledChange","event","ANIMATION_DURATION_IN_MILLISECONDS","enabled","currentTarget","checked","$el","find","toggleClass","isEmpty","slideDown","slideUp","render","template","compileTemplate","then","html","change","bind","jsonEditor","el","displayTitle","hide","getData","clone"],"mappings":"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","file":"TogglableJSONEditorView.js","sourcesContent":["/*\n * The contents of this file are subject to the terms of the Common Development and\n * Distribution License (the License). You may not use this file except in compliance with the\n * License.\n *\n * You can obtain a copy of the License at legal/CDDLv1.0.txt. See the License for the\n * specific language governing permission and limitations under the License.\n *\n * When distributing Covered Software, include this CDDL Header Notice in each file and include\n * the License file at legal/CDDLv1.0.txt. If applicable, add the following below the CDDL\n * Header, with the fields enclosed by brackets [] replaced by your own identifying\n * information: \"Portions copyright [year] [name of copyright owner]\".\n *\n * Copyright 2016-2017 ForgeRock AS.\n */\n\ndefine([\n    \"jquery\",\n    \"lodash\",\n    \"backbone\",\n    \"org/forgerock/openam/ui/common/models/JSONSchema\",\n    \"org/forgerock/openam/ui/common/models/JSONValues\",\n    \"org/forgerock/commons/ui/common/util/UIUtils\",\n    \"org/forgerock/openam/ui/common/views/jsonSchema/editors/JSONEditorView\"\n], ($, _, Backbone, JSONSchema, JSONValues, UIUtils, JSONEditorView) => {\n    const TogglableJSONEditorView = Backbone.View.extend({\n        className: \"jsoneditor-block\",\n        initialize (options) {\n            if (!(options.schema instanceof JSONSchema)) {\n                throw new TypeError(\"[TogglableJSONEditorView] \\\"schema\\\" argument is not an instance of JSONSchema.\");\n            }\n            if (!(options.values instanceof JSONValues)) {\n                throw new TypeError(\"[TogglableJSONEditorView] \\\"values\\\" argument is not an instance of JSONValues.\");\n            }\n\n            this.options = options;\n            this.options.enablePropertyKey = this.options.schema.getEnableKey();\n            this.options.enablePropertyValue = this.options.values.raw[this.options.enablePropertyKey];\n            this.options.schema = options.schema.omit(this.options.enablePropertyKey);\n            this.options.values = options.values.omit(this.options.enablePropertyKey);\n        },\n        onEnabledChange (event) {\n            const ANIMATION_DURATION_IN_MILLISECONDS = 250;\n            const enabled = event.currentTarget.checked;\n\n            this.options.enablePropertyValue = enabled;\n\n            this.$el.find(\".block-header\").toggleClass(\"block-header-inactive\");\n\n            if (!this.options.schema.isEmpty()) {\n                if (enabled) {\n                    this.$el.find(\"[data-toggleable-json-editor]\").slideDown(ANIMATION_DURATION_IN_MILLISECONDS);\n                } else {\n                    this.$el.find(\"[data-toggleable-json-editor]\").slideUp(ANIMATION_DURATION_IN_MILLISECONDS);\n                }\n            }\n        },\n        render () {\n            const template = \"templates/common/jsonSchema/editors/TogglableJSONEditorTemplate.html\";\n            UIUtils.compileTemplate(template, this.options).then((html) => {\n                this.$el.html(html);\n\n                this.$el.find(\"[data-json-editor-toggle]\").change(_.bind(this.onEnabledChange, this));\n\n                this.jsonEditor = new JSONEditorView({\n                    el: this.$el.find(\"[data-toggleable-json-editor]\"),\n                    displayTitle: false,\n                    schema: this.options.schema,\n                    values: this.options.values\n                });\n\n                if (!this.options.enablePropertyValue) {\n                    this.$el.find(\"[data-toggleable-json-editor]\").hide();\n                }\n                this.jsonEditor.render();\n            });\n\n            return this;\n        },\n        getData () {\n            const values = _.clone(this.jsonEditor.getData());\n            values[this.options.enablePropertyKey] = this.options.enablePropertyValue;\n\n            return values;\n        }\n    });\n\n    return TogglableJSONEditorView;\n});\n"]}