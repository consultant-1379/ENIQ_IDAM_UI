{"version":3,"sources":["../../../../../../../XUI/org/forgerock/openam/ui/common/util/NavigationHelper.jsm"],"names":["hideAPILinksOnAPIDescriptionsDisabled","response","get","toLowerCase","has","configuration","links","admin","urls","helpLinks","reload","populateRealmsDropdown","data","maxRealms","name","realms","reject","result","filter","sortBy","take","forEach","realm","addLink","getLink","routes","realmDefault","encodeURIComponent","path","run"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;AAgBA;;;AASO,QAAMA,wFAAwC,SAAxCA,qCAAwC,CAACC,QAAD,EAAc;AAC/D,YAAI,iBAAEC,GAAF,CAAMD,QAAN,EAAgB,8BAAhB,EAAgD,EAAhD,EAAoDE,WAApD,OAAsE,UAA1E,EAAsF;AAClF,gBAAI,iBAAEC,GAAF,uBAAkB,0CAAlB,CAAJ,EAAmE;AAC/D,qCAAWC,aAAX,CAAyBC,KAAzB,CAA+BC,KAA/B,CAAqCC,IAArC,CAA0CC,SAA1C,GAAsD,EAAtD;AACA,qCAAWC,MAAX;AACH;AACJ;AACJ,KAPM;;AASP;;;;;;;AAOO,QAAMC,0DAAyB,SAAzBA,sBAAyB,CAACC,IAAD,EAAU;AAC5C,YAAMC,YAAY,CAAlB;AACA,YAAIC,aAAJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAI,iBAAEV,GAAF,uBAAkB,4CAAlB,CAAJ,EAAqE;AACjE,iCAAWC,aAAX,CAAyBC,KAAzB,CAA+BC,KAA/B,CAAqCC,IAArC,CAA0CO,MAA1C,CAAiDP,IAAjD,GAAwD,iBAAEQ,MAAF,CACpD,qBAAWX,aAAX,CAAyBC,KAAzB,CAA+BC,KAA/B,CAAqCC,IAArC,CAA0CO,MAA1C,CAAiDP,IADG,EACG,aADH,EACkB,IADlB,CAAxD;AAEH;;AAED,8BAAEI,KAAKK,MAAP,EAAeC,MAAf,CAAsB,QAAtB,EAAgCC,MAAhC,CAAuC,MAAvC,EAA+CC,IAA/C,CAAoDP,SAApD,EAA+DQ,OAA/D,CAAuE,UAACC,KAAD,EAAW;AAC9ER,mBAAOQ,MAAMR,IAAN,KAAe,GAAf,GAAqB,gBAAE,8BAAF,CAArB,GAAyDQ,MAAMR,IAAtE;AACA,iCAAWS,OAAX,CAAmB;AACf,6BAAW,iBAAOC,OAAP,CAAe,iBAAOnB,aAAP,CAAqBoB,MAArB,CAA4BC,YAA3C,EACP,CAACC,mBAAmBL,MAAMM,IAAzB,CAAD,CADO,CADI;AAGfd,0BAHe;AAIf,4BAAY,cAJG;AAKf,+BAAe;AALA,aAAnB,EAMG,OANH,EAMY,QANZ;AAOH,SATD,EASGe,GATH;;AAWA,6BAAWN,OAAX,CAAmB;AACf,yBAAW,iBAAOC,OAAP,CAAe,iBAAOnB,aAAP,CAAqBoB,MAArB,CAA4BV,MAA3C,CADI;AAEf,oBAAQ,gBAAE,yDAAF,CAFO;AAGf,wBAAY,cAHG;AAIf,2BAAe;AAJA,SAAnB,EAKG,OALH,EAKY,QALZ;;AAOA,6BAAWL,MAAX;AACH,KAnCM","file":"NavigationHelper.js","sourcesContent":["/*\n * The contents of this file are subject to the terms of the Common Development and\n * Distribution License (the License). You may not use this file except in compliance with the\n * License.\n *\n * You can obtain a copy of the License at legal/CDDLv1.0.txt. See the License for the\n * specific language governing permission and limitations under the License.\n *\n * When distributing Covered Software, include this CDDL Header Notice in each file and include\n * the License file at legal/CDDLv1.0.txt. If applicable, add the following below the CDDL\n * Header, with the fields enclosed by brackets [] replaced by your own identifying\n * information: \"Portions copyright [year] [name of copyright owner]\".\n *\n * Copyright 2015-2017 ForgeRock AS.\n */\n\n/**\n * @module org/forgerock/openam/ui/common/util/NavigationHelper\n */\nimport _ from \"lodash\";\nimport { t } from \"i18next\";\n\nimport Navigation from \"org/forgerock/commons/ui/common/components/Navigation\";\nimport Router from \"org/forgerock/commons/ui/common/main/Router\";\n\nexport const hideAPILinksOnAPIDescriptionsDisabled = (response) => {\n    if (_.get(response, \"values.raw.descriptionsState\", \"\").toLowerCase() === \"disabled\") {\n        if (_.has(Navigation, \"configuration.links.admin.urls.helpLinks\")) {\n            Navigation.configuration.links.admin.urls.helpLinks = [];\n            Navigation.reload();\n        }\n    }\n};\n\n/**\n * Reset and populate the realm dynamic links in the navigation realms dropdown\n * @param  {Object} data Result of the service call\n * @param  {Array} data.result List of the available realms\n * @example\n *   RealmsService.realms.all().then(NavigationHelper.populateRealmsDropdown);\n */\nexport const populateRealmsDropdown = (data) => {\n    const maxRealms = 4;\n    let name;\n\n    // Remove any previously added dynamic navigation links.\n    // The reason why this is required is because we override the values in the AppConfiguration when we\n    // add new links at runtime via the common Navigation module. This stops us from being able to reset the\n    // navigation's configuration upon log out or session end. Which in turn means that the next user to log in\n    // will get the altered configuration.\n    // FIXME: The correct fix would be to change the way the Navigation works so that the original configuration\n    // remains intact and we just call Navigation.reset() when a users session ends or a new one begins.\n    if (_.has(Navigation, \"configuration.links.admin.urls.realms.urls\")) {\n        Navigation.configuration.links.admin.urls.realms.urls = _.reject(\n            Navigation.configuration.links.admin.urls.realms.urls, \"dynamicLink\", true);\n    }\n\n    _(data.result).filter(\"active\").sortBy(\"path\").take(maxRealms).forEach((realm) => {\n        name = realm.name === \"/\" ? t(\"console.common.topLevelRealm\") : realm.name;\n        Navigation.addLink({\n            \"url\": `#${Router.getLink(Router.configuration.routes.realmDefault,\n                [encodeURIComponent(realm.path)])}`,\n            name,\n            \"cssClass\": \"dropdown-sub\",\n            \"dynamicLink\": true\n        }, \"admin\", \"realms\");\n    }).run();\n\n    Navigation.addLink({\n        \"url\": `#${Router.getLink(Router.configuration.routes.realms)}`,\n        \"name\": t(\"config.AppConfiguration.Navigation.links.realms.viewAll\"),\n        \"cssClass\": \"dropdown-sub\",\n        \"dynamicLink\": true\n    }, \"admin\", \"realms\");\n\n    Navigation.reload();\n};\n"]}