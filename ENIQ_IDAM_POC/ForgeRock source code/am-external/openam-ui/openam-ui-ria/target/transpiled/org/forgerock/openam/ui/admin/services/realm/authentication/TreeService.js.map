{"version":3,"sources":["../../../../../../../../../XUI/org/forgerock/openam/ui/admin/services/realm/authentication/TreeService.jsm"],"names":["create","update","get","getAll","getInitialState","remove","obj","host","context","PATH","HEADERS","getCreateOrUpdatePayload","data","omitReadOnlyProperties","prop","key","nodes","node","realm","id","serviceCall","url","type","headers","JSON","stringify","errorsHandlers","status","suppressSpinner","schemaPromise","templatePromise","all","then","schema","template","ids","promises"],"mappings":"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","file":"TreeService.js","sourcesContent":["/*\n * The contents of this file are subject to the terms of the Common Development and\n * Distribution License (the License). You may not use this file except in compliance with the\n * License.\n *\n * You can obtain a copy of the License at legal/CDDLv1.0.txt. See the License for the\n * specific language governing permission and limitations under the License.\n *\n * When distributing Covered Software, include this CDDL Header Notice in each file and include\n * the License file at legal/CDDLv1.0.txt. If applicable, add the following below the CDDL\n * Header, with the fields enclosed by brackets [] replaced by your own identifying\n * information: \"Portions copyright [year] [name of copyright owner]\".\n *\n * Copyright 2017 ForgeRock AS.\n */\n\n/**\n * @module org/forgerock/openam/ui/admin/services/realm/authentication/TreeService\n */\nimport { map, mapValues, omit, startsWith } from \"lodash\";\n\nimport AbstractDelegate from \"org/forgerock/commons/ui/common/main/AbstractDelegate\";\nimport Constants from \"org/forgerock/commons/ui/common/util/Constants\";\nimport fetchUrl from \"org/forgerock/openam/ui/common/services/fetchUrl\";\nimport Promise from \"org/forgerock/openam/ui/common/util/Promise\";\n\nconst obj = new AbstractDelegate(`${Constants.host}${Constants.context}/json`);\nconst PATH = \"/realm-config/authentication/authenticationtrees/trees\";\nconst HEADERS = { \"Accept-API-Version\": \"protocol=2.0,resource=1.0\" };\n\nfunction getCreateOrUpdatePayload (data) {\n    const omitReadOnlyProperties = (obj) => omit(obj, (prop, key) => startsWith(key, \"_\"));\n    return {\n        ...omitReadOnlyProperties(data),\n        nodes: mapValues(data.nodes, (node) => omitReadOnlyProperties(node))\n    };\n}\n\nexport function create (realm, data, id) {\n    return obj.serviceCall({\n        url: fetchUrl(`${PATH}/${id}`, { realm }),\n        type: \"PUT\",\n        headers: { ...HEADERS, \"If-None-Match\": \"*\" },\n        data: JSON.stringify(getCreateOrUpdatePayload(data)),\n        // Prevent the default message for 412 to be shown. Instead print a custom message coming from the HTTP response\n        errorsHandlers: { \"incorrectRevisionError\": { status: 412 } }\n    });\n}\n\nexport function update (realm, data, id) {\n    return obj.serviceCall({\n        url: fetchUrl(`${PATH}/${id}`, { realm }),\n        type: \"PUT\",\n        headers: HEADERS,\n        data: JSON.stringify(getCreateOrUpdatePayload(data))\n    });\n}\n\nexport function get (realm, id) {\n    return obj.serviceCall({\n        url: fetchUrl(`${PATH}/${id}?forUI=true`, { realm }),\n        headers: HEADERS\n    });\n}\n\nexport function getAll (realm) {\n    return obj.serviceCall({\n        url: fetchUrl(`${PATH}?_action=getIds`, { realm }),\n        headers: HEADERS,\n        suppressSpinner: true,\n        type: \"POST\"\n    });\n}\n\nexport function getInitialState (realm) {\n    const schemaPromise = obj.serviceCall({\n        url: fetchUrl(`${PATH}?_action=schema`, { realm }),\n        headers: HEADERS,\n        type: \"POST\"\n    });\n\n    const templatePromise = obj.serviceCall({\n        url: fetchUrl(`${PATH}?_action=template`, { realm }),\n        headers: HEADERS,\n        type: \"POST\"\n    });\n\n    return Promise.all([schemaPromise, templatePromise]).then(([schema, template]) => ({ schema, template }));\n}\n\nexport function remove (realm, ids) {\n    const promises = map(ids, (id) => obj.serviceCall({\n        url: fetchUrl(`${PATH}/${id}`, { realm }),\n        headers: HEADERS,\n        type: \"DELETE\"\n    }));\n\n    return Promise.all(promises);\n}\n"]}