{"version":3,"sources":["../../../../../../../XUI/org/forgerock/openam/ui/common/components/SelectComponent.jsm"],"names":["SELECTIZE_VALUE_KEY","TEMPLATE_PATH","requiredField","value","name","Error","getRenderer","component","data","setData","render","$el","html","undefined","SelectComponent","options","searchFields","labelField","selectedOption","onChange","itemComponent","optionComponent","placeholderText","t","assign","compileTemplate","placeholder","then","map","option","index","internalOption","clone","find","selectize","items","indexOf","valueField","searchField","item"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsBA,QAAMA,sBAAsB,iBAA5B;AACA,QAAMC,gBAAgB,kDAAtB;;AAEA,aAASC,aAAT,CAAwBC,KAAxB,EAA+BC,IAA/B,EAAqC;AACjC,YAAID,SAAS,IAAb,EAAmB;AACf,kBAAM,IAAIE,KAAJ,YAAmBD,IAAnB,kBAAN;AACH;AACJ;;AAED,aAASE,WAAT,CAAsBC,SAAtB,EAAiC;AAC7B,eAAOA,YAAY,UAACC,IAAD,EAAU;AACzBD,sBAAUE,OAAV,CAAkBD,IAAlB;AACA,mBAAOD,UAAUG,MAAV,GAAmBC,GAAnB,CAAuBC,IAAvB,EAAP;AACH,SAHM,GAGHC,SAHJ;AAIH;;AAED;;;;;;;QAMqBC,e;;;;;;;;;;;6CAqBkC;AAAA,oBADrCC,OACqC,QADrCA,OACqC;AAAA,oBAD5BC,YAC4B,QAD5BA,YAC4B;AAAA,oBADdC,UACc,QADdA,UACc;AAAA,oBADFC,cACE,QADFA,cACE;AAAA,oBADcC,QACd,QADcA,QACd;AAAA,oBADwBC,aACxB,QADwBA,aACxB;AAAA,oBADuCC,eACvC,QADuCA,eACvC;AAAA,gDAA/CC,eAA+C;AAAA,oBAA/CA,eAA+C,wCAA7B,iBAAEC,CAAF,CAAI,oBAAJ,CAA6B;;AAC/CrB,8BAAca,OAAd,EAAuB,SAAvB;AACAb,8BAAca,OAAd,EAAuB,cAAvB;AACA,oBAAIK,iBAAiB,IAAjB,IAAyBC,mBAAmB,IAAhD,EAAsD;AAClDnB,kCAAca,OAAd,EAAuB,YAAvB;AACH;AACD,iCAAES,MAAF,CAAS,IAAT,EAAe,EAAET,gBAAF,EAAWC,0BAAX,EAAyBC,sBAAzB,EAAqCC,8BAArC,EAAqDC,kBAArD,EAA+DC,4BAA/D,EAA8EC,gCAA9E;AACXC,oDADW,EAAf;AAEH;;;qCACS;AAAA;;AACN,kCAAQG,eAAR,CAAwBxB,aAAxB,EAAuC,EAAEyB,aAAa,KAAKJ,eAApB,EAAvC,EAA8EK,IAA9E,CAAmF,UAACf,IAAD,EAAU;AACzF,wBAAMG,UAAU,iBAAEa,GAAF,CAAM,OAAKb,OAAX,EAAoB,UAACc,MAAD,EAASC,KAAT,EAAmB;AACnD,4BAAMC,iBAAiB,iBAAEC,KAAF,CAAQH,MAAR,CAAvB;AACAE,uCAAe/B,mBAAf,IAAsC8B,KAAtC;AACA,+BAAOC,cAAP;AACH,qBAJe,CAAhB;AAKA,2BAAKpB,GAAL,CAASC,IAAT,CAAcA,IAAd,EAAoBqB,IAApB,CAAyB,QAAzB,EAAmCC,SAAnC,CAA6C;AACzCnB,wCADyC;AAEzCoB,+BAAO,CAAC,iBAAEC,OAAF,CAAU,OAAKrB,OAAf,EAAwB,OAAKG,cAA7B,CAAD,CAFkC;AAGzCmB,oCAAYrC,mBAH6B;AAIzCsC,qCAAa,OAAKtB,YAJuB;AAKzCC,oCAAY,OAAKA,UALwB;AAMzCP,gCAAQ;AACJ6B,kCAAMjC,YAAY,OAAKc,aAAjB,CADF;AAEJS,oCAAQvB,YAAY,OAAKe,eAAjB;AAFJ,yBANiC;AAUzCF,kCAAU,kBAACW,KAAD,EAAW;AACjB,mCAAKX,QAAL,CAAc,OAAKJ,OAAL,CAAae,KAAb,CAAd;AACH;AAZwC,qBAA7C;AAcH,iBApBD;AAqBA,uBAAO,IAAP;AACH;;;;;;sBArDgBhB,e","file":"SelectComponent.js","sourcesContent":["/*\n * The contents of this file are subject to the terms of the Common Development and\n * Distribution License (the License). You may not use this file except in compliance with the\n * License.\n *\n * You can obtain a copy of the License at legal/CDDLv1.0.txt. See the License for the\n * specific language governing permission and limitations under the License.\n *\n * When distributing Covered Software, include this CDDL Header Notice in each file and include\n * the License file at legal/CDDLv1.0.txt. If applicable, add the following below the CDDL\n * Header, with the fields enclosed by brackets [] replaced by your own identifying\n * information: \"Portions copyright [year] [name of copyright owner]\".\n *\n * Copyright 2016-2017 ForgeRock AS.\n */\n\nimport \"selectize\";\nimport $ from \"jquery\";\nimport UIUtils from \"org/forgerock/commons/ui/common/util/UIUtils\";\nimport { View } from \"backbone\";\nimport _ from \"lodash\";\n\nconst SELECTIZE_VALUE_KEY = \"__selectize_key\";\nconst TEMPLATE_PATH = \"templates/common/components/SelectComponent.html\";\n\nfunction requiredField (value, name) {\n    if (value == null) {\n        throw new Error(`Field ${name} is required`);\n    }\n}\n\nfunction getRenderer (component) {\n    return component ? (data) => {\n        component.setData(data);\n        return component.render().$el.html();\n    } : undefined;\n}\n\n/**\n * A component for a \"combobox\" - a single-value select box with a textfield to allow the user to search for a\n * value.\n *\n * The user must select an existing option. i.e. They cannot enter whatever text they want.\n */\nexport default class SelectComponent extends View {\n    /**\n     * @callback SelectComponent~onChange\n     * @param [Object] selectedOption - The object\n     */\n\n    /**\n     * Constructs a new SelectComponent.\n     *\n     * If itemComponent and optionComponent are not specified, labelField must be specified.\n     *\n     * @param {Object[]} options - An array of objects that represent the available options the user can select.\n     * @param {String[]} searchFields - The fields of the options objects to match the users input against.\n     * @param {SelectComponent~onChange} onChange - Called when the selected option changes.\n     * @param {String} [labelField] - The field of the options objects to be used to display in the list of options.\n     * @param {Component} [itemComponent] - A component for rendering the currently selected option.\n     * @param {Component} [optionComponent] - A component for rendering an option in the list of options.\n     * @param {Object} [selectedOption] - The selected option (i.e. the current value of element).\n     * @param {String} [placeholderText] - A string to display when no value has been selected.\n     */\n    initialize ({ options, searchFields, labelField, selectedOption, onChange, itemComponent, optionComponent,\n        placeholderText = $.t(\"common.form.select\") }) {\n        requiredField(options, \"options\");\n        requiredField(options, \"searchFields\");\n        if (itemComponent == null || optionComponent == null) {\n            requiredField(options, \"labelField\");\n        }\n        _.assign(this, { options, searchFields, labelField, selectedOption, onChange, itemComponent, optionComponent,\n            placeholderText });\n    }\n    render () {\n        UIUtils.compileTemplate(TEMPLATE_PATH, { placeholder: this.placeholderText }).then((html) => {\n            const options = _.map(this.options, (option, index) => {\n                const internalOption = _.clone(option);\n                internalOption[SELECTIZE_VALUE_KEY] = index;\n                return internalOption;\n            });\n            this.$el.html(html).find(\"select\").selectize({\n                options,\n                items: [_.indexOf(this.options, this.selectedOption)],\n                valueField: SELECTIZE_VALUE_KEY,\n                searchField: this.searchFields,\n                labelField: this.labelField,\n                render: {\n                    item: getRenderer(this.itemComponent),\n                    option: getRenderer(this.optionComponent)\n                },\n                onChange: (index) => {\n                    this.onChange(this.options[index]);\n                }\n            });\n        });\n        return this;\n    }\n}\n"]}