{"version":3,"sources":["../../../../../../../../XUI/org/forgerock/openam/ui/admin/services/global/RealmsService.js"],"names":["define","_","AbstractDelegate","Constants","SMSServiceUtils","fetchUrl","Promise","store","realmsActionCreators","obj","host","context","getRealmPath","realm","parentPath","name","encodePath","path","btoa","replace","realms","all","serviceCall","url","default","headers","done","response","dispatch","setRealms","result","map","sortBy","value","create","data","type","suppressEvents","JSON","stringify","get","collectionUrl","then","results","realmValues","addRealm","schema","sanitizeSchema","values","schemaWithDefaults","remove","removeRealm","update"],"mappings":"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","file":"RealmsService.js","sourcesContent":["/*\n * The contents of this file are subject to the terms of the Common Development and\n * Distribution License (the License). You may not use this file except in compliance with the\n * License.\n *\n * You can obtain a copy of the License at legal/CDDLv1.0.txt. See the License for the\n * specific language governing permission and limitations under the License.\n *\n * When distributing Covered Software, include this CDDL Header Notice in each file and include\n * the License file at legal/CDDLv1.0.txt. If applicable, add the following below the CDDL\n * Header, with the fields enclosed by brackets [] replaced by your own identifying\n * information: \"Portions copyright [year] [name of copyright owner]\".\n *\n * Copyright 2016-2017 ForgeRock AS.\n */\n\n/**\n * @module org/forgerock/openam/ui/admin/services/global/RealmsService\n */\ndefine([\n    \"lodash\",\n    \"org/forgerock/commons/ui/common/main/AbstractDelegate\",\n    \"org/forgerock/commons/ui/common/util/Constants\",\n    \"org/forgerock/openam/ui/admin/services/SMSServiceUtils\",\n    \"org/forgerock/openam/ui/common/services/fetchUrl\",\n    \"org/forgerock/openam/ui/common/util/Promise\",\n    \"store/index\",\n    \"store/modules/remote/realms\"\n], (_, AbstractDelegate, Constants, SMSServiceUtils, fetchUrl, Promise, store, realmsActionCreators) => {\n    const obj = new AbstractDelegate(`${Constants.host}${Constants.context}/json`);\n\n    function getRealmPath (realm) {\n        if (realm.parentPath === \"/\") {\n            return realm.parentPath + realm.name;\n        } else if (realm.parentPath) {\n            return `${realm.parentPath}/${realm.name}`;\n        } else {\n            return \"/\";\n        }\n    }\n\n    /**\n     * This function encodes a path. It uses base64url encoding.\n     * @param {string} path the path\n     * @returns {string} the encoded path\n     */\n    function encodePath (path) {\n        return btoa(path)\n            .replace(/\\+/g, \"-\")\n            .replace(/\\//g, \"_\")\n            .replace(/=+$/, \"\");\n    }\n\n    obj.realms = {\n        /**\n         * Gets all realms.\n         * @returns {Promise.<Object>} Service promise\n         */\n        all () {\n            return obj.serviceCall({\n                url: fetchUrl.default(\"/global-config/realms?_queryFilter=true\", { realm: false }),\n                headers: { \"Accept-API-Version\": \"protocol=1.0,resource=1.0\" }\n            }).done((response) => {\n                store.default.dispatch(realmsActionCreators.setRealms(response.result));\n                response.result = _(response.result).map((realm) => ({\n                    ...realm,\n                    path: getRealmPath(realm)\n                })).sortBy(\"path\").value();\n            });\n        },\n\n        /**\n         * Creates a realm.\n         * @param  {Object} data Complete representation of realm\n         * @returns {Promise} Service promise\n         */\n        create (data) {\n            return obj.serviceCall({\n                url: fetchUrl.default(\n                    \"/global-config/realms?_action=create\",\n                    { realm: false }),\n                headers: { \"Accept-API-Version\": \"protocol=1.0,resource=1.0\" },\n                type: \"POST\",\n                suppressEvents: true,\n                data: JSON.stringify(data)\n            });\n        },\n\n        /**\n         * Gets a realm's schema together with it's values.\n         * @param  {String} path Encoded realm path\n         * @returns {Promise.<Object>} Service promise\n         */\n        get (path) {\n            const collectionUrl = fetchUrl.default(\"/global-config/realms\", { realm: false });\n\n            return Promise.all([\n                obj.serviceCall({\n                    url: `${collectionUrl}?_action=schema`,\n                    headers: { \"Accept-API-Version\": \"protocol=1.0,resource=1.0\" },\n                    type: \"POST\"\n                }),\n                obj.serviceCall({\n                    url: `${collectionUrl}/${encodePath(path)}`,\n                    headers: { \"Accept-API-Version\": \"protocol=1.0,resource=1.0\" }\n                })\n            ]).then((results) => {\n                const realmValues = results[1][0];\n                store.default.dispatch(realmsActionCreators.addRealm({ ...realmValues }));\n                return {\n                    schema: SMSServiceUtils.sanitizeSchema(results[0][0]),\n                    values: realmValues\n                };\n            });\n        },\n\n        /**\n         * Gets a blank realm's schema together with it's values.\n         * @returns {Promise.<Object>} Service promise\n         */\n        schema () {\n            return SMSServiceUtils.schemaWithDefaults(obj, fetchUrl.default(\"/global-config/realms\", {\n                realm: false\n            }));\n        },\n\n        /**\n         * Removes a realm.\n         * @param  {String} path Encoded realm path\n         * @returns {Promise} Service promise\n         */\n        remove (path) {\n            return obj.serviceCall({\n                url: fetchUrl.default(`/global-config/realms/${encodePath(path)}`, { realm: false }),\n                headers: { \"Accept-API-Version\": \"protocol=1.0,resource=1.0\" },\n                type: \"DELETE\",\n                suppressEvents: true\n            }).then((response) => {\n                store.default.dispatch(realmsActionCreators.removeRealm(response));\n            });\n        },\n\n        /**\n         * Updates a realm.\n         * @param  {Object} data Complete representation of realm\n         * @returns {Promise} Service promise\n         */\n        update (data) {\n            return obj.serviceCall({\n                url: fetchUrl.default(\n                    `/global-config/realms/${encodePath(getRealmPath(data))}`, { realm: false }),\n                headers: { \"Accept-API-Version\": \"protocol=1.0,resource=1.0\" },\n                type: \"PUT\",\n                data: JSON.stringify(data),\n                suppressEvents: true\n            }).then((response) => {\n                store.default.dispatch(realmsActionCreators.addRealm(response));\n                return response;\n            });\n        }\n    };\n\n    return obj;\n});\n"]}