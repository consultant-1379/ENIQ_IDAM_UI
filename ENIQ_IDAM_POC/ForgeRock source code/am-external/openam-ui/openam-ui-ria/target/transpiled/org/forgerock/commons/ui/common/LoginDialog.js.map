{"version":3,"sources":["../../../../../../XUI/org/forgerock/commons/ui/common/LoginDialog.js"],"names":["define","$","_","BootstrapDialog","UIUtils","Configuration","Constants","EventManager","SessionManager","ViewManager","AbstractView","LoginDialog","extend","template","element","render","options","dialogBody","authenticatedCallback","$el","find","append","setElement","show","closable","title","t","type","TYPE_DEFAULT","message","onshown","bind","renderTemplate","globalData","data","noop","buttons","id","label","cssClass","hotkey","action","dialog","userName","password","$modalBody","val","login","user","setProperty","sendEvent","EVENT_AUTHENTICATION_DATA_CHANGED","anonymousMode","EVENT_DISPLAY_MESSAGE_REQUEST","close"],"mappings":";;AAAA;;;;;;;;;;;;;;;AAeA;AACCA,OAAO,CACJ,QADI,EAEJ,YAFI,EAGJ,4DAHI,EAIJ,8CAJI,EAKJ,oDALI,EAMJ,gDANI,EAOJ,mDAPI,EAQJ,qDARI,EASJ,kDATI,EAUJ,mDAVI,CAAP,EAWE,UAAUC,CAAV,EAAaC,CAAb,EAAgBC,eAAhB,EAAiCC,OAAjC,EAA0CC,aAA1C,EAAyDC,SAAzD,EAAoEC,YAApE,EAAkFC,cAAlF,EAAkGC,WAAlG,EACUC,YADV,EACwB;AACvB,QAAIC,cAAcD,aAAaE,MAAb,CAAoB;AAClCC,kBAAU,mCADwB;AAElCC,iBAAS,UAFyB;;AAIlCC,gBAAQ,gBAAUC,OAAV,EAAmB;AACvB,gBAAIC,aAAahB,EAAE,8BAAF,CAAjB;AAAA,gBACIiB,wBAAwBF,QAAQE,qBADpC;;AAGA,iBAAKC,GAAL,CAASC,IAAT,CAAc,UAAd,EAA0BC,MAA1B,CAAiCJ,UAAjC;AACA;AACA,iBAAKK,UAAL,CAAgBL,UAAhB;AACAd,4BAAgBoB,IAAhB,CAAqB;AACjBC,0BAAU,KADO;AAEjBC,uBAAQxB,EAAEyB,CAAF,CAAI,4BAAJ,CAFS;AAGjBC,sBAAMxB,gBAAgByB,YAHL;AAIjBC,yBAASZ,UAJQ;AAKjBa,yBAAS5B,EAAE6B,IAAF,CAAO,YAAY;AACxB3B,4BAAQ4B,cAAR,CACI,KAAKnB,QADT,EAEI,KAAKM,GAFT,EAGIjB,EAAEU,MAAF,CAAS,EAAT,EAAaP,cAAc4B,UAA3B,EAAuC,KAAKC,IAA5C,CAHJ,EAIIhC,EAAEiC,IAJN,EAKA,SALA;AAMH,iBAPQ,EAON,IAPM,CALQ;AAajBC,yBAAS,CAAC;AACNC,wBAAI,yBADE;AAENC,2BAAOrC,EAAEyB,CAAF,CAAI,mBAAJ,CAFD;AAGNa,8BAAU,aAHJ;AAINC,4BAAQ,EAJF;AAKNC,4BAAQ,gBAASC,MAAT,EAAiB;AACrB,4BAAIC,QAAJ,EACIC,QADJ;;AAGAD,mCAAWD,OAAOG,UAAP,CAAkBzB,IAAlB,CAAuB,mBAAvB,EAA4C0B,GAA5C,EAAX;AACAF,mCAAWF,OAAOG,UAAP,CAAkBzB,IAAlB,CAAuB,sBAAvB,EAA+C0B,GAA/C,EAAX;;AAEAtC,uCAAeuC,KAAf,CAAqB,EAAC,YAAWJ,QAAZ,EAAsB,YAAWC,QAAjC,EAArB,EAAiE,UAASI,IAAT,EAAe;AAC5E3C,0CAAc4C,WAAd,CAA0B,YAA1B,EAAwCD,IAAxC;AACAzC,yCAAa2C,SAAb,CAAuB5C,UAAU6C,iCAAjC,EAAoE;AAChEC,+CAAe;AADiD,6BAApE;AAGA7C,yCAAa2C,SAAb,CAAuB5C,UAAU+C,6BAAjC,EAAgE,UAAhE;AACAX,mCAAOY,KAAP;;AAEA,gCAAIpC,qBAAJ,EAA2B;AACvBA;AACH;AACJ,yBAXD,EAWG,YAAW;AACVX,yCAAa2C,SAAb,CAAuB5C,UAAU+C,6BAAjC,EAAgE,sBAAhE;AACH,yBAbD;AAcH;AA1BK,iBAAD;AAbQ,aAArB;AA0CH;AArDiC,KAApB,CAAlB;AAuDA,WAAO,IAAI1C,WAAJ,EAAP;AACH,CArEA","file":"LoginDialog.js","sourcesContent":["/**\r\n * The contents of this file are subject to the terms of the Common Development and\r\n * Distribution License (the License). You may not use this file except in compliance with the\r\n * License.\r\n *\r\n * You can obtain a copy of the License at legal/CDDLv1.0.txt. See the License for the\r\n * specific language governing permission and limitations under the License.\r\n *\r\n * When distributing Covered Software, include this CDDL Header Notice in each file and include\r\n * the License file at legal/CDDLv1.0.txt. If applicable, add the following below the CDDL\r\n * Header, with the fields enclosed by brackets [] replaced by your own identifying\r\n * information: \"Portions copyright [year] [name of copyright owner]\".\r\n *\r\n * Copyright 2011-2016 ForgeRock AS.\r\n */\r\n/* eslint-disable */\r\n define([\r\n    \"jquery\",\r\n    \"underscore\",\r\n    \"org/forgerock/commons/ui/common/components/BootstrapDialog\",\r\n    \"org/forgerock/commons/ui/common/util/UIUtils\",\r\n    \"org/forgerock/commons/ui/common/main/Configuration\",\r\n    \"org/forgerock/commons/ui/common/util/Constants\",\r\n    \"org/forgerock/commons/ui/common/main/EventManager\",\r\n    \"org/forgerock/commons/ui/common/main/SessionManager\",\r\n    \"org/forgerock/commons/ui/common/main/ViewManager\",\r\n    \"org/forgerock/commons/ui/common/main/AbstractView\"\r\n], function( $, _, BootstrapDialog, UIUtils, Configuration, Constants, EventManager, SessionManager, ViewManager,\r\n             AbstractView) {\r\n    var LoginDialog = AbstractView.extend({\r\n        template: \"templates/common/LoginDialog.html\",\r\n        element: \"#dialogs\",\r\n\r\n        render: function (options) {\r\n            var dialogBody = $('<div id=\"loginDialog\"></div>'),\r\n                authenticatedCallback = options.authenticatedCallback;\r\n\r\n            this.$el.find('#dialogs').append(dialogBody);\r\n            // attaching BootstrapDialog via '#dialogs' so that it is encapsulated withing the qunit-fixture for testing\r\n            this.setElement(dialogBody);\r\n            BootstrapDialog.show({\r\n                closable: false,\r\n                title:  $.t(\"common.form.sessionExpired\"),\r\n                type: BootstrapDialog.TYPE_DEFAULT,\r\n                message: dialogBody,\r\n                onshown: _.bind(function () {\r\n                    UIUtils.renderTemplate(\r\n                        this.template,\r\n                        this.$el,\r\n                        _.extend({}, Configuration.globalData, this.data),\r\n                        _.noop,\r\n                    \"replace\");\r\n                }, this),\r\n                buttons: [{\r\n                    id: \"loginDialogSubmitButton\",\r\n                    label: $.t(\"common.user.login\"),\r\n                    cssClass: \"btn-primary\",\r\n                    hotkey: 13,\r\n                    action: function(dialog) {\r\n                        var userName,\r\n                            password;\r\n\r\n                        userName = dialog.$modalBody.find(\"input[name=login]\").val();\r\n                        password = dialog.$modalBody.find(\"input[name=password]\").val();\r\n\r\n                        SessionManager.login({\"userName\":userName, \"password\":password}, function(user) {\r\n                            Configuration.setProperty('loggedUser', user);\r\n                            EventManager.sendEvent(Constants.EVENT_AUTHENTICATION_DATA_CHANGED, {\r\n                                anonymousMode: false\r\n                            });\r\n                            EventManager.sendEvent(Constants.EVENT_DISPLAY_MESSAGE_REQUEST, \"loggedIn\");\r\n                            dialog.close();\r\n\r\n                            if (authenticatedCallback) {\r\n                                authenticatedCallback();\r\n                            }\r\n                        }, function() {\r\n                            EventManager.sendEvent(Constants.EVENT_DISPLAY_MESSAGE_REQUEST, \"authenticationFailed\");\r\n                        });\r\n                    }\r\n                }]\r\n            });\r\n        }\r\n    });\r\n    return new LoginDialog();\r\n});"]}