{"version":3,"sources":["../../../../../../../XUI/org/forgerock/openam/ui/common/components/TreeNavigation.js"],"names":["define","$","_","ReactDOM","React","AbstractView","ModuleLoader","URIUtils","normaliseModule","contentElementId","isBackbonePage","view","prototype","isReactPage","Component","WrappedComponent","isFunction","TreeNavigation","extend","template","partials","events","findContentElement","$el","find","findActiveNavItem","fragment","element","length","parent","removeClass","parentsUntil","addClass","hasClass","fragmentSections","split","slice","join","navigateToPage","event","currentTarget","nextRenderPage","setElement","call","route","load","page","then","bind","module","renderPage","args","render","callback","unmountComponentAtNode","parentRender","getCurrentFragment","Module","default","delegateEvents","createElement","Error"],"mappings":"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","file":"TreeNavigation.js","sourcesContent":["/*\n * The contents of this file are subject to the terms of the Common Development and\n * Distribution License (the License). You may not use this file except in compliance with the\n * License.\n *\n * You can obtain a copy of the License at legal/CDDLv1.0.txt. See the License for the\n * specific language governing permission and limitations under the License.\n *\n * When distributing Covered Software, include this CDDL Header Notice in each file and include\n * the License file at legal/CDDLv1.0.txt. If applicable, add the following below the CDDL\n * Header, with the fields enclosed by brackets [] replaced by your own identifying\n * information: \"Portions copyright [year] [name of copyright owner]\".\n *\n * Copyright 2015-2017 ForgeRock AS.\n */\n\ndefine([\n    \"jquery\",\n    \"lodash\",\n    \"react-dom\",\n    \"react\",\n    \"org/forgerock/commons/ui/common/main/AbstractView\",\n    \"org/forgerock/commons/ui/common/util/ModuleLoader\",\n    \"org/forgerock/commons/ui/common/util/URIUtils\",\n    \"org/forgerock/openam/ui/common/util/es6/normaliseModule\"\n], ($, _, ReactDOM, React, AbstractView, ModuleLoader, URIUtils, normaliseModule) => {\n    const contentElementId = \"#sidePageContent\";\n    const isBackbonePage = (view) => view.prototype instanceof AbstractView;\n    const isReactPage = (view) =>\n        view.prototype instanceof React.Component || view.WrappedComponent || _.isFunction(view);\n    const TreeNavigation = AbstractView.extend({\n        template: \"templates/admin/views/common/navigation/TreeNavigationTemplate.html\",\n        partials: [\n            \"partials/breadcrumb/_Breadcrumb.html\",\n            \"templates/admin/views/common/navigation/_TreeNavigationLeaf.html\"\n        ],\n        events: {\n            \"click .sidenav a[href]:not([data-toggle])\": \"navigateToPage\"\n        },\n        findContentElement () {\n            return this.$el.find(contentElementId)[0];\n        },\n        findActiveNavItem (fragment) {\n            const element = this.$el.find(`.sidenav ol > li > a[href^=\"#${fragment}\"]`);\n            if (element.length) {\n                const parent = element.parent();\n\n                this.$el.find(\".sidenav ol > li\").removeClass(\"active\");\n                element.parentsUntil(this.$el.find(\".sidenav\"), \"li\").addClass(\"active\");\n\n                // Expand any collapsed element direct above. Only works one level up\n                if (parent.parent().hasClass(\"collapse\")) {\n                    parent.parent().addClass(\"in\");\n                }\n            } else {\n                const fragmentSections = fragment.split(\"/\");\n                this.findActiveNavItem(fragmentSections.slice(0, -1).join(\"/\"));\n            }\n        },\n        navigateToPage (event) {\n            this.$el.find(\".sidenav ol > li\").removeClass(\"active\");\n            $(event.currentTarget).parentsUntil(this.$el.find(\".sidenav\"), \"li\").addClass(\"active\");\n            this.nextRenderPage = true;\n        },\n        setElement (element) {\n            AbstractView.prototype.setElement.call(this, element);\n            if (this.route && this.nextRenderPage) {\n                ModuleLoader.load(this.route.page).then(\n                    _.bind((module) => {\n                        this.renderPage(module, this.args);\n                    }, this),\n                    _.bind(() => {\n                        throw `Unable to render page for module ${this.route.page}`;\n                    }, this)\n                );\n            }\n        },\n\n        render (args, callback) {\n            this.args = args;\n\n            const element = this.findContentElement();\n            if (element) {\n                ReactDOM.unmountComponentAtNode(element);\n            }\n\n            this.parentRender(() => {\n                this.$el.find(\".sidenav li\").removeClass(\"active\");\n                this.findActiveNavItem(URIUtils.getCurrentFragment());\n                if (!this.nextRenderPage) {\n                    ModuleLoader.load(this.route.page).then((page) => {\n                        this.renderPage(page, args, callback);\n                    });\n                }\n            });\n        },\n        renderPage (Module, args, callback) {\n            Module = normaliseModule.default(Module);\n\n            if (isBackbonePage(Module)) {\n                const page = new Module();\n                page.element = contentElementId;\n                page.render(args, callback);\n                this.delegateEvents();\n            } else if (isReactPage(Module)) {\n                ReactDOM.render(React.createElement(Module), this.findContentElement());\n            } else {\n                throw new Error(\"[TreeNavigation] Unable to determine page type (Backbone or React).\");\n            }\n\n            this.nextRenderPage = false;\n        }\n    });\n\n    return TreeNavigation;\n});\n"]}