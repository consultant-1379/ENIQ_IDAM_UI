{"version":3,"sources":["../../../../../../../../../XUI/org/forgerock/openam/ui/admin/views/realms/sessions/SessionsView.jsx"],"names":["fetchUsersByPartialUsername","debounce","realm","username","callback","isEmpty","options","then","response","map","user","label","value","error","statusText","SessionsView","props","handleSelectAsyncOnChange","bind","handleInvalidateSessions","fetchSessionsByUsernameAndRealm","state","sessions","handles","pluck","setState","newValue","get","content","router","params","length","partial","id","propTypes"],"mappings":"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","file":"SessionsView.js","sourcesContent":["/*\n * The contents of this file are subject to the terms of the Common Development and\n * Distribution License (the License). You may not use this file except in compliance with the\n * License.\n *\n * You can obtain a copy of the License at legal/CDDLv1.0.txt. See the License for the\n * specific language governing permission and limitations under the License.\n *\n * When distributing Covered Software, include this CDDL Header Notice in each file and include\n * the License file at legal/CDDLv1.0.txt. If applicable, add the following below the CDDL\n * Header, with the fields enclosed by brackets [] replaced by your own identifying\n * information: \"Portions copyright [year] [name of copyright owner]\".\n *\n * Copyright 2016-2017 ForgeRock AS.\n */\n\nimport _ from \"lodash\";\nimport { Panel, FormGroup, ControlLabel } from \"react-bootstrap\";\nimport { t } from \"i18next\";\nimport React, { Component } from \"react\";\nimport Select from \"react-select\";\nimport {\n    getByRealmAndUsername,\n    invalidateByHandles\n} from \"org/forgerock/openam/ui/admin/services/global/SessionsService\";\nimport { getByUsernameStartsWith } from \"org/forgerock/openam/ui/admin/services/realm/UsersService\";\nimport CallToAction from \"components/CallToAction\";\nimport PageDescription from \"components/PageDescription\";\nimport SessionsTable from \"./SessionsTable\";\nimport PageHeader from \"components/PageHeader\";\nimport withRouter from \"org/forgerock/commons/ui/common/components/hoc/withRouter\";\nimport withRouterPropType from \"org/forgerock/commons/ui/common/components/hoc/withRouterPropType\";\n\nconst fetchUsersByPartialUsername = _.debounce((realm, username, callback) => {\n    if (_.isEmpty(username)) {\n        callback(null, { options: [] });\n    } else {\n        getByUsernameStartsWith(realm, username).then((response) => {\n            callback(null, {\n                options: _.map(response, (user) => ({ label: user, value: user }))\n            });\n        }, (error) => callback(error.statusText));\n    }\n}, 300);\n\nclass SessionsView extends Component {\n    constructor (props) {\n        super(props);\n\n        this.handleSelectAsyncOnChange = this.handleSelectAsyncOnChange.bind(this);\n        this.handleInvalidateSessions = this.handleInvalidateSessions.bind(this);\n        this.fetchSessionsByUsernameAndRealm = this.fetchSessionsByUsernameAndRealm.bind(this);\n        this.state = {\n            sessions: []\n        };\n    }\n\n    handleInvalidateSessions (realm, sessions) {\n        const handles = _.pluck(sessions, \"sessionHandle\");\n\n        invalidateByHandles(handles).then(() => this.fetchSessionsByUsernameAndRealm(realm, this.state.username));\n    }\n\n    fetchSessionsByUsernameAndRealm (realm, username) {\n        getByRealmAndUsername(realm, username).then((response) => {\n            this.setState({ sessions: response });\n        });\n    }\n\n    handleSelectAsyncOnChange (realm, newValue) {\n        const username = _.get(newValue, \"value\");\n        this.setState({\n            sessions: [],\n            username\n        });\n\n        if (username) {\n            this.fetchSessionsByUsernameAndRealm(realm, username);\n        }\n    }\n\n    render () {\n        let content;\n        const realm = this.props.router.params[0];\n\n        if (this.state.sessions.length) {\n            content = (\n                <SessionsTable\n                    data={ this.state.sessions }\n                    onSessionsInvalidate={ _.partial(this.handleInvalidateSessions, realm) }\n                    username={ this.state.username }\n                />\n            );\n        } else if (this.state.username) {\n            content = <Panel><CallToAction><h3>{ t(\"console.sessions.table.noResults\") }</h3></CallToAction></Panel>;\n        }\n\n        return (\n            <div>\n                <PageHeader title={ t(\"console.sessions.title\") } />\n\n                <PageDescription>{ t(\"console.sessions.search.intro\") }</PageDescription>\n\n                <FormGroup controlId=\"findAUser\">\n                    <ControlLabel srOnly>{ t(\"console.sessions.search.title\") }</ControlLabel>\n                    <Select.Async\n                        autoload={ false }\n                        inputProps={ {\n                            id: \"findAUser\"\n                        } }\n                        isLoading\n                        loadOptions={ _.partial(fetchUsersByPartialUsername, realm) }\n                        noResultsText={ t(\"console.sessions.search.noResults\") }\n                        onChange={ _.partial(this.handleSelectAsyncOnChange, realm) }\n                        placeholder={ t(\"console.sessions.search.placeholder\") }\n                        searchPromptText={ t(\"console.sessions.search.searchPrompt\") }\n                        value={ this.state.username }\n                    />\n                </FormGroup>\n                { content }\n            </div>\n        );\n    }\n}\n\nSessionsView.propTypes = {\n    router: withRouterPropType\n};\n\nexport default withRouter(SessionsView);\n"]}