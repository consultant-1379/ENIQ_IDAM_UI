{"version":3,"sources":["../../../../../../../XUI/org/forgerock/commons/ui/common/main/AbstractModel.js"],"names":["define","$","_","Backbone","ObjectUtil","ServiceInvoker","Model","extend","idAttribute","additionalParameters","getMVCCRev","get","key","indexOf","substring","reduce","split","attr","attributes","sync","method","model","options","parseResponse","response","parse","set","toJSON","restCall","data","JSON","stringify","isUndefined","id","url","param","then","generatePatchSet","previousAttributes","setAdditionalParameters","parametersMap","each","keys","isString"],"mappings":"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","file":"AbstractModel.js","sourcesContent":["/**\r\n * The contents of this file are subject to the terms of the Common Development and\r\n * Distribution License (the License). You may not use this file except in compliance with the\r\n * License.\r\n *\r\n * You can obtain a copy of the License at legal/CDDLv1.0.txt. See the License for the\r\n * specific language governing permission and limitations under the License.\r\n *\r\n * When distributing Covered Software, include this CDDL Header Notice in each file and include\r\n * the License file at legal/CDDLv1.0.txt. If applicable, add the following below the CDDL\r\n * Header, with the fields enclosed by brackets [] replaced by your own identifying\r\n * information: \"Portions copyright [year] [name of copyright owner]\".\r\n *\r\n * Copyright 2015-2016 ForgeRock AS.\r\n */\r\n/* eslint-disable */\r\n define([\r\n    \"jquery\",\r\n    \"underscore\",\r\n    \"backbone\",\r\n    \"org/forgerock/commons/ui/common/util/ObjectUtil\",\r\n    \"org/forgerock/commons/ui/common/main/ServiceInvoker\"\r\n], function($, _, Backbone, ObjectUtil, ServiceInvoker) {\r\n    /**\r\n     * @exports org/forgerock/commons/ui/common/main/AbstractModel\r\n     */\r\n    return Backbone.Model.extend({\r\n        idAttribute: \"_id\",\r\n        additionalParameters: {},\r\n        /**\r\n         * @returns {string} The multiversion concurrency control revision associated with this object, or \"*\" if\r\n         * undefined\r\n         */\r\n        getMVCCRev : function () {\r\n            return this.get(\"_rev\") || \"*\";\r\n        },\r\n        /**\r\n         * Overrides default backbone 'get' method to also accept JSONPointer syntax for property names\r\n         * @param {string} key Either the simple property name or the JSONPointer to the property into a complex object\r\n         * @example\r\n         * this.get(\"simpleKey\")\r\n         * @example\r\n         * this.get(\"/emailAddresses/0/type\")\r\n         */\r\n        get: function(key) {\r\n            //if the key has a leading \"/\" then trim it off\r\n            if (key.indexOf(\"/\") === 0) {\r\n                key = key.substring(1);\r\n            }\r\n\r\n            return _.reduce(key.split(\"/\"), function(attr, key) {\r\n                if (attr instanceof Backbone.Model) {\r\n                    return attr.attributes[key];\r\n                }\r\n\r\n                return attr[key];\r\n            }, this.attributes);\r\n        },\r\n        /**\r\n         * Overrides default sync to align with ForgeRock REST API\r\n         */\r\n        sync: function (method, model, options) {\r\n            var parseResponse = function (response) {\r\n                if (options.parse) {\r\n                    model.set(model.parse(response, options));\r\n                    return model.toJSON();\r\n                } else {\r\n                    return response;\r\n                }\r\n            };\r\n            switch (method) {\r\n                case \"create\":\r\n                    return ServiceInvoker.restCall(_.extend(\r\n                        {\r\n                            data: JSON.stringify(model.toJSON())\r\n                        },\r\n                        (function () {\r\n                            if (!_.isUndefined(model.id)) {\r\n                                return {\r\n                                    \"type\": \"PUT\",\r\n                                    \"headers\": {\r\n                                        \"If-None-Match\": \"*\"\r\n                                    },\r\n                                    \"url\": model.url + \"/\" + model.id + \"?\" + $.param(model.additionalParameters)\r\n                                };\r\n                            } else {\r\n                                return {\r\n                                    \"type\": \"POST\",\r\n                                    \"url\": model.url + \"?_action=create&\" + $.param(model.additionalParameters)\r\n                                };\r\n                            }\r\n                        }()),\r\n                        options\r\n                    )).then(parseResponse);\r\n                case \"read\":\r\n                    return ServiceInvoker.restCall(_.extend(\r\n                        {\r\n                            \"url\" : model.url + \"/\" + model.id + \"?\" + $.param(model.additionalParameters),\r\n                            \"type\": \"GET\"\r\n                        },\r\n                        options\r\n                    )).then(parseResponse);\r\n                case \"update\":\r\n                    return ServiceInvoker.restCall(_.extend(\r\n                        {\r\n                            \"type\": \"PUT\",\r\n                            \"data\": JSON.stringify(model.toJSON()),\r\n                            \"url\": model.url + \"/\" + model.id + \"?\" + $.param(model.additionalParameters),\r\n                            \"headers\": {\r\n                                \"If-Match\": model.getMVCCRev()\r\n                            }\r\n                        },\r\n                        options\r\n                    )).then(parseResponse);\r\n                case \"patch\":\r\n                    return ServiceInvoker.restCall(_.extend(\r\n                        {\r\n                            \"url\" : model.url + \"/\" + model.id + \"?\" + $.param(model.additionalParameters),\r\n                            \"type\": \"PATCH\",\r\n                            \"data\": JSON.stringify(ObjectUtil.generatePatchSet(model.toJSON(),\r\n                                model.previousAttributes())),\r\n                            \"headers\": {\r\n                                \"If-Match\": model.getMVCCRev()\r\n                            }\r\n                        },\r\n                        options\r\n                    )).then(parseResponse);\r\n                case \"delete\":\r\n                    return ServiceInvoker.restCall(_.extend(\r\n                        {\r\n                            \"url\" : model.url + \"/\" + model.id + \"?\" + $.param(model.additionalParameters),\r\n                            \"type\": \"DELETE\",\r\n                            \"headers\": {\r\n                                \"If-Match\": model.getMVCCRev()\r\n                            }\r\n                        },\r\n                        options\r\n                    )).then(parseResponse);\r\n            }\r\n        },\r\n        /**\r\n         * Provide additional url parameters to be included in REST calls\r\n         * @param {Object} A simple map of string:string pairs to be included in the URL of subsequent REST calls\r\n         * @example\r\n         *\r\n            {\r\n                \"_fields\": \"_id,sn\",\r\n                \"_mimeType\": \"text/plain\",\r\n                \"realm\": \"myRealm\"\r\n            }\r\n         */\r\n        setAdditionalParameters: function (parametersMap) {\r\n            _.each(_.keys(parametersMap), function (key) {\r\n                if (!_.isString(parametersMap[key])) {\r\n                    throw \"Cannot set non-string value as additional parameter \" + key;\r\n                }\r\n            });\r\n            this.additionalParameters = parametersMap;\r\n        }\r\n    });\r\n});"]}