{"version":3,"sources":["../../../../../../../../../../../../XUI/org/forgerock/openam/ui/admin/views/realms/authentication/trees/edit/autoLayout/index.jsm"],"names":["autoLayout","entryNodeId","nodes","dimensions","paths","columns","orphans","treeNodeMeasurements","orphanMeasurements","concat"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAwBA;;;;;;;;;;;;;;;;AAxBA;;;;;;;;;;;;;;;;AAwCA,MAAMA,aAAa,SAAbA,UAAa,CAACC,WAAD,EAAcC,KAAd,EAAqBC,UAArB,EAAoC;AACnD,QAAMC,QAAQ,2BAAYH,WAAZ,EAAyBC,KAAzB,CAAd;AACA,QAAMG,UAAU,0BAAWD,KAAX,CAAhB;AACA,QAAME,UAAU,0BAAWJ,KAAX,EAAkBG,OAAlB,CAAhB;;AAEA,QAAME,uBAAuB,oCAAqBF,OAArB,EAA8BF,UAA9B,CAA7B;AACA,QAAMK,qBAAqB,kCAAmBF,OAAnB,EAA4BD,OAA5B,EAAqCF,UAArC,CAA3B;;AAEA,WAAO,qBAAQI,qBAAqBE,MAArB,CAA4BD,kBAA5B,CAAR,EAAyD,IAAzD,CAAP;AACH,GATD;;oBAWeR,U","file":"index.js","sourcesContent":["/*\n * The contents of this file are subject to the terms of the Common Development and\n * Distribution License (the License). You may not use this file except in compliance with the\n * License.\n *\n * You can obtain a copy of the License at legal/CDDLv1.0.txt. See the License for the\n * specific language governing permission and limitations under the License.\n *\n * When distributing Covered Software, include this CDDL Header Notice in each file and include\n * the License file at legal/CDDLv1.0.txt. If applicable, add the following below the CDDL\n * Header, with the fields enclosed by brackets [] replaced by your own identifying\n * information: \"Portions copyright [year] [name of copyright owner]\".\n *\n * Copyright 2017 ForgeRock AS.\n */\n\nimport { indexBy } from \"lodash\";\n\nimport getAllPaths from \"./layout/getAllPaths\";\nimport getColumns from \"./layout/getColumns\";\nimport getOrphanPositions from \"./positions/getOrphanPositions\";\nimport getOrphans from \"./nodes/getOrphans\";\nimport getTreeNodePositions from \"./positions/getTreeNodePositions\";\n\n/**\n * Given the entry node id, a collection of the nodes, and the dimensions of all the nodes, this function returns\n * the positions (x, y) for all the nodes - both connected nodes and orphans.\n * @example\n * autoLayout(entryNodeId, nodes, dimensions) =>\n * {\n *     \"one\": { \"id\": \"one\", \"x\": 25, \"y\": 125 },\n *     \"two\": { \"id\": \"two\", \"x\": 205, \"y\": 37.5 },\n *     \"three\": { \"id\": \"three\", \"x\": 205, \"y\": 237.5 },\n *     ...\n * }\n * @param {String} entryNodeId Entry node ID\n * @param {Object} nodes Object of all nodes, indexed by node ID\n * @param {Object} dimensions heights and widths of the nodes, indexed by node ID\n * @returns {Object} Object, indexed by node ID, with a value object of dimensions\n */\nconst autoLayout = (entryNodeId, nodes, dimensions) => {\n    const paths = getAllPaths(entryNodeId, nodes);\n    const columns = getColumns(paths);\n    const orphans = getOrphans(nodes, columns);\n\n    const treeNodeMeasurements = getTreeNodePositions(columns, dimensions);\n    const orphanMeasurements = getOrphanPositions(orphans, columns, dimensions);\n\n    return indexBy(treeNodeMeasurements.concat(orphanMeasurements), \"id\");\n};\n\nexport default autoLayout;\n"]}