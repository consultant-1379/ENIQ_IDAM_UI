{"version":3,"sources":["../../../../../../../../XUI/org/forgerock/openam/ui/admin/services/global/ScriptsService.js"],"names":["define","_","AbstractDelegate","Constants","fetchUrl","obj","host","context","scripts","getAllDefault","subSchemaType","serviceCall","url","default","realm","headers","then","response","sortBy","result","getAllContexts","getDefaultGlobalContext","getSchema","type","getContextSchema"],"mappings":";;AAAA;;;;;;;;;;;;;;;;AAgBA;;;AAGAA,OAAO,CACH,QADG,EAEH,uDAFG,EAGH,gDAHG,EAIH,kDAJG,CAAP,EAKG,UAACC,CAAD,EAAIC,gBAAJ,EAAsBC,SAAtB,EAAiCC,QAAjC,EAA8C;AAC7C,QAAMC,MAAM,IAAIH,gBAAJ,MAAwBC,UAAUG,IAAlC,GAAyCH,UAAUI,OAAnD,WAAZ;;AAEAF,QAAIG,OAAJ,GAAc;;AAEV;;;;;AAKAC,qBAPU,yBAOKC,aAPL,EAOoB;AAC1B,mBAAOL,IAAIM,WAAJ,CAAgB;AACnBC,qBAAKR,SAASS,OAAT,CAAiB,8FACXH,aADW,8BAAjB,EAC8C,EAAEI,OAAO,KAAT,EAD9C,CADc;AAGnBC,yBAAS,EAAE,sBAAsB,2BAAxB;AAHU,aAAhB,EAIJC,IAJI,CAIC,UAACC,QAAD;AAAA,uBAAchB,EAAEiB,MAAF,CAASD,SAASE,MAAlB,EAA0B,MAA1B,CAAd;AAAA,aAJD,CAAP;AAKH,SAbS;;;AAeV;;;;AAIAC,sBAnBU,4BAmBQ;AACd,mBAAOf,IAAIM,WAAJ,CAAgB;AACnBC,qBAAKR,SAASS,OAAT,CAAiB,8DAAjB,EAAiF,EAAEC,OAAO,KAAT,EAAjF,CADc;AAEnBC,yBAAS,EAAE,sBAAsB,2BAAxB;AAFU,aAAhB,CAAP;AAIH,SAxBS;;;AA0BV;;;;AAIAM,+BA9BU,qCA8BiB;AACvB,mBAAOhB,IAAIM,WAAJ,CAAgB;AACnBC,qBAAKR,SAASS,OAAT,CAAiB,mCAAjB,EAAsD,EAAEC,OAAO,KAAT,EAAtD,CADc;AAEnBC,yBAAS,EAAE,sBAAsB,2BAAxB;AAFU,aAAhB,CAAP;AAIH,SAnCS;;;AAqCV;;;;AAIAO,iBAzCU,uBAyCG;AACT,mBAAOjB,IAAIM,WAAJ,CAAgB;AACnBC,qBAAKR,SAASS,OAAT,CAAiB,kDAAjB,EAAqE,EAAEC,OAAO,KAAT,EAArE,CADc;AAEnBC,yBAAS,EAAE,sBAAsB,2BAAxB,EAFU;AAGnBQ,sBAAM;AAHa,aAAhB,CAAP;AAKH,SA/CS;;;AAiDV;;;;AAIAC,wBArDU,8BAqDU;AAChB,mBAAOnB,IAAIM,WAAJ,CAAgB;AACnBC,qBAAKR,SAASS,OAAT,CAAiB,2DAAjB,EAA8E,EAAEC,OAAO,KAAT,EAA9E,CADc;AAEnBC,yBAAS,EAAE,sBAAsB,2BAAxB,EAFU;AAGnBQ,sBAAM;AAHa,aAAhB,CAAP;AAKH;AA3DS,KAAd;;AA8DA,WAAOlB,GAAP;AACH,CAvED","file":"ScriptsService.js","sourcesContent":["/*\n * The contents of this file are subject to the terms of the Common Development and\n * Distribution License (the License). You may not use this file except in compliance with the\n * License.\n *\n * You can obtain a copy of the License at legal/CDDLv1.0.txt. See the License for the\n * specific language governing permission and limitations under the License.\n *\n * When distributing Covered Software, include this CDDL Header Notice in each file and include\n * the License file at legal/CDDLv1.0.txt. If applicable, add the following below the CDDL\n * Header, with the fields enclosed by brackets [] replaced by your own identifying\n * information: \"Portions copyright [year] [name of copyright owner]\".\n *\n * Copyright 2016-2017 ForgeRock AS.\n */\n\n/**\n * @module org/forgerock/openam/ui/admin/services/global/ScriptsService\n */\ndefine([\n    \"lodash\",\n    \"org/forgerock/commons/ui/common/main/AbstractDelegate\",\n    \"org/forgerock/commons/ui/common/util/Constants\",\n    \"org/forgerock/openam/ui/common/services/fetchUrl\"\n], (_, AbstractDelegate, Constants, fetchUrl) => {\n    const obj = new AbstractDelegate(`${Constants.host}${Constants.context}/json`);\n\n    obj.scripts = {\n\n        /**\n         * Gets the list of default scripts.\n         * @param {String} subSchemaType SubSchema type\n         * @returns {Promise.<Object>} promise with the list of default scripts\n         */\n        getAllDefault (subSchemaType) {\n            return obj.serviceCall({\n                url: fetchUrl.default(\"/scripts?_pageSize=10&_sortKeys=name&_queryFilter=default eq true and context \" +\n                    `eq \"${subSchemaType}\"&_pagedResultsOffset=0`, { realm: false }),\n                headers: { \"Accept-API-Version\": \"protocol=1.0,resource=1.0\" }\n            }).then((response) => _.sortBy(response.result, \"name\"));\n        },\n\n        /**\n         * Gets all script's contexts.\n         * @returns {Promise.<Object>} Service promise\n         */\n        getAllContexts () {\n            return obj.serviceCall({\n                url: fetchUrl.default(\"/global-config/services/scripting/contexts?_queryFilter=true\", { realm: false }),\n                headers: { \"Accept-API-Version\": \"protocol=1.0,resource=1.0\" }\n            });\n        },\n\n        /**\n         * Gets a default global script's context.\n         * @returns {Promise.<Object>} Service promise\n         */\n        getDefaultGlobalContext () {\n            return obj.serviceCall({\n                url: fetchUrl.default(\"/global-config/services/scripting\", { realm: false }),\n                headers: { \"Accept-API-Version\": \"protocol=1.0,resource=1.0\" }\n            });\n        },\n\n        /**\n         * Gets a script's schema.\n         * @returns {Promise.<Object>} Service promise\n         */\n        getSchema () {\n            return obj.serviceCall({\n                url: fetchUrl.default(\"/global-config/services/scripting?_action=schema\", { realm: false }),\n                headers: { \"Accept-API-Version\": \"protocol=1.0,resource=1.0\" },\n                type: \"POST\"\n            });\n        },\n\n        /**\n         * Gets a script context's schema.\n         * @returns {Promise.<Object>} Service promise\n         */\n        getContextSchema () {\n            return obj.serviceCall({\n                url: fetchUrl.default(\"/global-config/services/scripting/contexts?_action=schema\", { realm: false }),\n                headers: { \"Accept-API-Version\": \"protocol=1.0,resource=1.0\" },\n                type: \"POST\"\n            });\n        }\n    };\n\n    return obj;\n});\n"]}