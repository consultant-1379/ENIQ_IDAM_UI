{"version":3,"sources":["../../../../../../../../../../../XUI/org/forgerock/openam/ui/admin/views/realms/authentication/trees/edit/EditTree.jsx"],"names":["calculateTreeContainerHeight","isFullscreen","NAVBAR_HEIGHT","FOOTER_HEIGHT","SUBNAV_HEIGHT","TOOLBAR_HEIGHT","window","innerHeight","calculateCanvasDimensions","measurements","containerHeight","containerWidth","furthestBottom","measurement","y","height","furthestRight","x","width","canvasHeight","canvasWidth","EditTree","props","state","handleTreeMeasure","bind","handleWindowResize","addEventListener","removeEventListener","forceUpdate","dimensions","setState","handleNodeDelete","onNodeDelete","selectedNode","id","isFetching","nodeTypes","selectedNodeSchema","onAutoLayout","onFullscreenToggle","onTreeSave","nodes","onNewConnection","onNewNodeCreate","onNodeDeselect","onNodeDimensionsChange","onNodeMove","onNodeSelect","type","onNodePropertiesFieldChange","onNodePropertiesChange","selectedNodeProperties","propTypes","bool","isRequired","objectOf","object","func","shape","string","any"],"mappings":"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","file":"EditTree.js","sourcesContent":["/*\n * The contents of this file are subject to the terms of the Common Development and\n * Distribution License (the License). You may not use this file except in compliance with the\n * License.\n *\n * You can obtain a copy of the License at legal/CDDLv1.0.txt. See the License for the\n * specific language governing permission and limitations under the License.\n *\n * When distributing Covered Software, include this CDDL Header Notice in each file and include\n * the License file at legal/CDDLv1.0.txt. If applicable, add the following below the CDDL\n * Header, with the fields enclosed by brackets [] replaced by your own identifying\n * information: \"Portions copyright [year] [name of copyright owner]\".\n *\n * Copyright 2017 ForgeRock AS.\n */\nimport { DragDropContext } from \"react-dnd\";\nimport { debounce, get, max, reduce } from \"lodash\";\nimport { Grid, Row } from \"react-bootstrap\";\nimport classnames from \"classnames\";\nimport HTML5Backend from \"react-dnd-html5-backend\";\nimport React, { Component, PropTypes } from \"react\";\nimport Measure from \"react-measure\";\n\nimport EditTreeNodeTypes from \"./EditTreeNodeTypes\";\nimport EditTreeNodeProperties from \"./EditTreeNodeProperties\";\nimport EditTreeToolbar from \"./toolbar/EditTreeToolbar\";\nimport Fullscreen from \"components/Fullscreen\";\nimport Loading from \"components/Loading\";\nimport SubNav from \"components/SubNav\";\nimport SubNavRealmHomeLink from \"org/forgerock/openam/ui/admin/views/realms/SubNavRealmHomeLink\";\nimport Tree from \"./tree/Tree\";\nimport { TREE_PADDING } from \"./tree/TreePadding\";\n\nconst calculateTreeContainerHeight = (isFullscreen) => {\n    const NAVBAR_HEIGHT = 76;\n    const FOOTER_HEIGHT = 80;\n    const SUBNAV_HEIGHT = 57;\n    const TOOLBAR_HEIGHT = 55;\n\n    return isFullscreen\n        ? window.innerHeight - TOOLBAR_HEIGHT\n        : window.innerHeight - TOOLBAR_HEIGHT - SUBNAV_HEIGHT - NAVBAR_HEIGHT - FOOTER_HEIGHT;\n};\n\nconst calculateCanvasDimensions = (measurements, containerHeight, containerWidth) => {\n    const furthestBottom = reduce(measurements, (furthestBottom, measurement) => {\n        return max([furthestBottom, measurement.y + measurement.height]);\n    }, 0);\n    const furthestRight = reduce(measurements, (furthestRight, measurement) => {\n        return max([furthestRight, measurement.x + measurement.width]);\n    }, 0);\n\n    const canvasHeight = max([containerHeight, furthestBottom + TREE_PADDING]);\n    const canvasWidth = max([containerWidth, furthestRight + TREE_PADDING]);\n\n    return { canvasWidth, canvasHeight };\n};\n\nclass EditTree extends Component {\n    constructor (props) {\n        super(props);\n        this.state = { containerWidth: 0 };\n        this.handleTreeMeasure = this.handleTreeMeasure.bind(this);\n        this.handleWindowResize = this.handleWindowResize.bind(this);\n    }\n\n    componentWillMount () {\n        window.addEventListener(\"resize\", debounce(this.handleWindowResize, 100));\n    }\n\n    componentWillUnmount () {\n        window.removeEventListener(\"resize\", this.handleWindowResize);\n    }\n\n    handleWindowResize () {\n        this.forceUpdate();\n    }\n\n    handleTreeMeasure (dimensions) {\n        this.setState({\n            containerWidth: dimensions.width\n        });\n    }\n\n    render () {\n        const handleNodeDelete = () => this.props.onNodeDelete(this.props.selectedNode.id);\n        const containerHeight = calculateTreeContainerHeight(this.props.isFullscreen);\n        const { canvasHeight, canvasWidth } =\n            calculateCanvasDimensions(this.props.measurements, containerHeight, this.state.containerWidth);\n\n        if (this.props.isFetching) {\n            return <Loading />;\n        } else {\n            return (\n                <div>\n                    <SubNav fluid>\n                        <SubNavRealmHomeLink />\n                    </SubNav>\n                    <Grid fluid>\n                        <Row>\n                            <Fullscreen isFullscreen={ this.props.isFullscreen }>\n                                <div className=\"authtree-container\">\n                                    <EditTreeNodeTypes\n                                        nodeTypes={ this.props.nodeTypes }\n                                    />\n                                    <div\n                                        className={ classnames({\n                                            \"authtree-content-centre\": true,\n                                            \"collapsed-right\": !!this.props.selectedNodeSchema\n                                        }) }\n                                    >\n                                        <EditTreeToolbar\n                                            invertTooltipPlacement={ this.props.isFullscreen }\n                                            isDeleteNodeEnabled={ !!this.props.selectedNode.id }\n                                            onAutoLayout={ this.props.onAutoLayout }\n                                            onFullscreenToggle={ this.props.onFullscreenToggle }\n                                            onNodeDelete={ handleNodeDelete }\n                                            onTreeSave={ this.props.onTreeSave }\n                                        />\n                                        <Measure onMeasure={ this.handleTreeMeasure }>\n                                            <Tree\n                                                canvasHeight={ canvasHeight }\n                                                canvasWidth={ canvasWidth }\n                                                containerHeight={ containerHeight }\n                                                measurements={ this.props.measurements }\n                                                nodes={ this.props.nodes }\n                                                onNewConnection={ this.props.onNewConnection }\n                                                onNewNodeCreate={ this.props.onNewNodeCreate }\n                                                onNodeDeselect={ this.props.onNodeDeselect }\n                                                onNodeDimensionsChange={ this.props.onNodeDimensionsChange }\n                                                onNodeMove={ this.props.onNodeMove }\n                                                onNodeSelect={ this.props.onNodeSelect }\n                                                selectedNodeId={ this.props.selectedNode.id }\n                                            />\n                                        </Measure>\n                                    </div>\n                                    <EditTreeNodeProperties\n                                        isExpanded={ !!this.props.selectedNodeSchema }\n                                        nodeId={ this.props.selectedNode.id }\n                                        nodeName={ get(this.props.nodes[this.props.selectedNode.id], \"displayName\") }\n                                        nodeType={ this.props.selectedNode.type }\n                                        onFieldChange={ this.props.onNodePropertiesFieldChange }\n                                        onPropertiesChange={ this.props.onNodePropertiesChange }\n                                        properties={ this.props.selectedNodeProperties }\n                                        schema={ this.props.selectedNodeSchema }\n                                    />\n                                </div>\n                            </Fullscreen>\n                        </Row>\n                    </Grid>\n                </div>\n            );\n        }\n    }\n}\n\nEditTree.propTypes = {\n    isFetching: PropTypes.bool.isRequired,\n    isFullscreen: PropTypes.bool.isRequired,\n    measurements: PropTypes.objectOf(PropTypes.object).isRequired,\n    nodeTypes: PropTypes.objectOf(PropTypes.object).isRequired,\n    nodes: PropTypes.objectOf(PropTypes.object).isRequired,\n    onAutoLayout: PropTypes.func.isRequired,\n    onFullscreenToggle: PropTypes.func.isRequired,\n    onNewConnection: PropTypes.func.isRequired,\n    onNewNodeCreate: PropTypes.func.isRequired,\n    onNodeDelete: PropTypes.func.isRequired,\n    onNodeDeselect: PropTypes.func.isRequired,\n    onNodeDimensionsChange: PropTypes.func.isRequired,\n    onNodeMove: PropTypes.func.isRequired,\n    onNodePropertiesChange: PropTypes.func.isRequired,\n    onNodePropertiesFieldChange: PropTypes.func.isRequired,\n    onNodeSelect: PropTypes.func.isRequired,\n    onTreeSave: PropTypes.func.isRequired,\n    selectedNode: PropTypes.shape({\n        id: PropTypes.string,\n        type: PropTypes.string\n    }),\n    selectedNodeProperties: PropTypes.objectOf(PropTypes.any),\n    selectedNodeSchema: PropTypes.objectOf(PropTypes.any)\n};\n\nexport default DragDropContext(HTML5Backend)(EditTree);\n"]}