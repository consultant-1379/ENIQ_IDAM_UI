{"version":3,"sources":["../../../../../../../XUI/org/forgerock/commons/ui/common/util/Base64-1.js"],"names":["define","obj","ALPHABET","B64CODES","EQUALS","i","push","length","charCodeAt","encodeUTF8","str","utf","unescape","encodeURIComponent","len","result","c0","c1","c2","b0","b1","b2","b3","btoa","isNaN","charAt","join","decodeUTF8","encoded","atob","String","fromCharCode","decodeURIComponent","escape"],"mappings":"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","file":"Base64-1.js","sourcesContent":["/**\r\n * The contents of this file are subject to the terms of the Common Development and\r\n * Distribution License (the License). You may not use this file except in compliance with the\r\n * License.\r\n *\r\n * You can obtain a copy of the License at legal/CDDLv1.0.txt. See the License for the\r\n * specific language governing permission and limitations under the License.\r\n *\r\n * When distributing Covered Software, include this CDDL Header Notice in each file and include\r\n * the License file at legal/CDDLv1.0.txt. If applicable, add the following below the CDDL\r\n * Header, with the fields enclosed by brackets [] replaced by your own identifying\r\n * information: \"Portions copyright [year] [name of copyright owner]\".\r\n *\r\n * Copyright 2014-2016 ForgeRock AS.\r\n */\r\n/* eslint-disable */\r\n define([\r\n], function () {\r\n\r\n    var obj = {},\r\n        ALPHABET = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\",\r\n        B64CODES = [],\r\n        EQUALS = 64, // index of '=' in ALPHABET\r\n        i;\r\n\r\n    // Initialise reverse lookup table from base64 char code to 6-bit sequence\r\n    for (i = 0; i < 256; i++) {\r\n        B64CODES.push(-1);\r\n    }\r\n    for (i = 0; i < ALPHABET.length; i++) {\r\n        B64CODES[ALPHABET.charCodeAt(i)] = i;\r\n    }\r\n    B64CODES[\"=\".charCodeAt(0)] = 0;\r\n\r\n    /**\r\n     * Encodes a string as base-64 encoded UTF-8 bytes.\r\n     *\r\n     * @param str the string to encode\r\n     * @returns {string} the base-64 encoded UTF-8 bytes of the string.\r\n     */\r\n    obj.encodeUTF8 = function (str) {\r\n        // See: http://ecmanaut.blogspot.co.uk/2006/07/encoding-decoding-utf8-in-javascript.html\r\n        var utf = unescape(encodeURIComponent(str)),\r\n            len = utf.length,\r\n            result = [],\r\n            i, c0, c1, c2, b0, b1, b2, b3;\r\n\r\n        if (typeof(btoa) === \"function\") {\r\n            return btoa(utf);\r\n        } else {\r\n            // Fallback on own implementation of b64 encoding if btoa not available.\r\n            for (i = 0; i < len;) {\r\n                // Encode 3 bytes at a time\r\n                c0 = utf.charCodeAt(i++);\r\n                c1 = utf.charCodeAt(i++);\r\n                c2 = utf.charCodeAt(i++);\r\n                // Split into 6-bit chunks (pad with =/64 if not enough bytes):\r\n                b0 = c0 >>> 2;\r\n                b1 = ((c0 & 0x03) << 4) | (c1 >>> 4);\r\n                b2 = isNaN(c1) ? EQUALS : ((c1 & 0x0F) << 2) | (c2 >>> 6);\r\n                b3 = isNaN(c1) || isNaN(c2) ? EQUALS : c2 & 0x3F;\r\n\r\n                result.push(ALPHABET.charAt(b0));\r\n                result.push(ALPHABET.charAt(b1));\r\n                result.push(ALPHABET.charAt(b2));\r\n                result.push(ALPHABET.charAt(b3));\r\n            }\r\n\r\n            return result.join(\"\");\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Decodes a base-64 encoded UTF-8 byte array into a string.\r\n     * @param encoded the base-64 encoded UTF-8 bytes.\r\n     * @returns {string} the decoded string.\r\n     */\r\n    obj.decodeUTF8 = function (encoded) {\r\n        var utf = [],\r\n            len = encoded.length,\r\n            i, b0, b1, b2, b3, c0, c1, c2;\r\n        if (typeof(atob) === \"function\") {\r\n            utf = atob(encoded);\r\n        } else {\r\n\r\n            for (i = 0; i < len;) {\r\n                // Decode 4-char blocks into 3 bytes\r\n                b0 = B64CODES[encoded.charCodeAt(i++)];\r\n                b1 = B64CODES[encoded.charCodeAt(i++)];\r\n                b2 = B64CODES[encoded.charCodeAt(i++)];\r\n                b3 = B64CODES[encoded.charCodeAt(i++)];\r\n\r\n                c0 = (b0 << 2) | (b1 >>> 4);\r\n                c1 = ((b1 & 0x0F) << 4) | (b2 >>> 2);\r\n                c2 = ((b2 & 0x03) << 6) | b3;\r\n\r\n                utf.push(String.fromCharCode(c0));\r\n                if (c1 !== 0) {\r\n                    utf.push(String.fromCharCode(c1));\r\n                }\r\n                if (c2 !== 0) {\r\n                    utf.push(String.fromCharCode(c2));\r\n                }\r\n            }\r\n\r\n            utf = utf.join(\"\");\r\n        }\r\n\r\n        // See: http://ecmanaut.blogspot.co.uk/2006/07/encoding-decoding-utf8-in-javascript.html\r\n        return decodeURIComponent(escape(utf));\r\n    };\r\n\r\n    return obj;\r\n});"]}