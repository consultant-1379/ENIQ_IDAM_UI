{"version":3,"sources":["../../../../../../../../../../../XUI/org/forgerock/openam/ui/admin/views/realms/authentication/trees/edit/EditTreeContainer.jsx"],"names":["containsNode","tree","id","connections","nodes","values","pluck","map","flatten","value","indexOf","entryNodeId","EditTreeContainer","state","isFetching","isFullscreen","handleAutoLayout","bind","handleFullscreenToggle","handleTreeSave","performAutoLayout","props","removeCurrentTree","realm","router","params","then","response","setNodeTypes","result","reason","addMessage","type","TYPE_DANGER","treeId","updateTree","inLocal","inRemote","hasSuccessNode","hasFailureNode","setNodes","toLocal","toRemote","setState","nextProps","hasDimensions","measurements","height","width","propsHasDimensions","nextPropsHasDimensions","newPositions","localNodes","x","y","handleNodeMove","nodeCreateOrUpdatePromises","localNodeProperties","properties","nodeId","_type","_id","node","addNodeProperties","all","nodesToDelete","remoteNodes","nodeDeletePromises","nodeType","removeNodePropertiesFromRemote","messages","displayMessageFromConfig","handleNodeDimensionsChange","handleNewConnection","nodeID","outcomeID","destinationNodeId","addOrUpdateConnection","updateLocalEntryNodeId","handleNodeDelete","removeNode","handleNodeSelect","addNodeSchema","isNew","handleNodePropertiesFieldChange","handleNodePropertiesChange","currentOutcomes","_outcomes","currentOutcomeKeys","newOutcomeKeys","setNodeOutcomes","removeConnection","handleNewNode","newNode","position","addNodeToLocal","nodeTypes","handleNodeDeselect","selectedNode","selectedNodeProperties","selectedNodeSchema","propTypes","func","isRequired","objectOf","shape","string","object","any","ownProps","local","authentication","trees","current","selected","remote","list","schema","dispatch"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8DA,QAAMA,eAAe,SAAfA,YAAe,CAACC,IAAD,EAAOC,EAAP,EAAc;AAC/B,YAAMC,cAAc,mBAAMF,KAAKG,KAAX,EACfC,MADe,GAEfC,KAFe,CAET,aAFS,EAGfC,GAHe,CAGX,UAACJ,WAAD;AAAA,mBAAiB,oBAAOA,WAAP,CAAjB;AAAA,SAHW,EAIfK,OAJe,GAKfC,KALe,EAApB;;AAOA,eAAON,YAAYO,OAAZ,CAAoBR,EAApB,MAA4B,CAAC,CAA7B,IAAkCD,KAAKU,WAAL,KAAqBT,EAA9D;AACH,KATD;;QAWMU,iB;;;AACF,qCAAe;AAAA;;AAAA;;AAEX,kBAAKC,KAAL,GAAa;AACTC,4BAAY,IADH;AAETC,8BAAc;AAFL,aAAb;AAIA,kBAAKC,gBAAL,GAAwB,MAAKA,gBAAL,CAAsBC,IAAtB,OAAxB;AACA,kBAAKC,sBAAL,GAA8B,MAAKA,sBAAL,CAA4BD,IAA5B,OAA9B;AACA,kBAAKE,cAAL,GAAsB,MAAKA,cAAL,CAAoBF,IAApB,OAAtB;AACA,kBAAKG,iBAAL,GAAyB,MAAKA,iBAAL,CAAuBH,IAAvB,OAAzB;AATW;AAUd;;;;gDAEoB;AAAA;;AACjB,qBAAKI,KAAL,CAAWC,iBAAX;AACA,oBAAMC,QAAQ,KAAKF,KAAL,CAAWG,MAAX,CAAkBC,MAAlB,CAAyB,CAAzB,CAAd;;AAEA,8CAAgBF,KAAhB,EAAuBG,IAAvB,CAA4B,UAACC,QAAD,EAAc;AACtC,2BAAKN,KAAL,CAAWO,YAAX,CAAwBD,SAASE,MAAjC;AACH,iBAFD,EAEG,UAACC,MAAD;AAAA,2BAAY,mBAASC,UAAT,CAAoB,EAAEJ,UAAUG,MAAZ,EAAoBE,MAAM,mBAASC,WAAnC,EAApB,CAAZ;AAAA,iBAFH;;AAIA,oBAAMC,SAAS,KAAKb,KAAL,CAAWG,MAAX,CAAkBC,MAAlB,CAAyB,CAAzB,CAAf;AACA,sCAAQF,KAAR,EAAeW,MAAf,EAAuBR,IAAvB,CAA4B,UAACzB,IAAD,EAAU;AAClC,2BAAKoB,KAAL,CAAWc,UAAX,CAAsBC,OAAtB,CAA8BnC,IAA9B;AACA,2BAAKoB,KAAL,CAAWc,UAAX,CAAsBE,QAAtB,CAA+BpC,IAA/B;;AAEA,wBAAMqC,iBAAiBtC,aAAaC,IAAb,0BAAvB;AACA,wBAAMsC,iBAAiBvC,aAAaC,IAAb,0BAAvB;;AAEA,2BAAKoB,KAAL,CAAWmB,QAAX,CAAoBC,OAApB,CAA4BxC,KAAKG,KAAjC,EAAwCH,KAAKU,WAA7C,EAA0D2B,cAA1D,EAA0EC,cAA1E;AACA,2BAAKlB,KAAL,CAAWmB,QAAX,CAAoBE,QAApB,CAA6BzC,KAAKG,KAAlC;;AAEA,2BAAKuC,QAAL,CAAc,EAAE7B,YAAY,KAAd,EAAd;AACH,iBAXD,EAWG,UAACgB,MAAD,EAAY;AACX,uCAASC,UAAT,CAAoB,EAAEJ,UAAUG,MAAZ,EAAoBE,MAAM,mBAASC,WAAnC,EAApB;AACA,2BAAKU,QAAL,CAAc,EAAE7B,YAAY,KAAd,EAAd;AACH,iBAdD;AAeH;;;sDAE0B8B,S,EAAW;AAClC,oBAAMC,gBAAgB,SAAhBA,aAAgB,CAACC,YAAD,EAAkB;AACpC,2BAAO,CAAC,qBAAQA,YAAR,CAAD,IAA0B,mBAAMA,YAAN,EAAoB,gBAAuB;AAAA,4BAApBC,MAAoB,QAApBA,MAAoB;AAAA,4BAAZC,KAAY,QAAZA,KAAY;;AACxE,+BAAOD,SAAS,CAAT,IAAcC,QAAQ,CAA7B;AACH,qBAFgC,CAAjC;AAGH,iBAJD;;AAMA,oBAAMC,qBAAqBJ,cAAc,KAAKxB,KAAL,CAAWyB,YAAzB,CAA3B;AACA,oBAAMI,yBAAyBL,cAAcD,UAAUE,YAAxB,CAA/B;;AAEA,oBAAI,CAACG,kBAAD,IAAuBC,sBAA3B,EAAmD;AAC/C,yBAAK9B,iBAAL,CAAuBwB,UAAUE,YAAjC;AACH;AACJ;;;gDAE0D;AAAA;;AAAA,oBAAxCA,YAAwC,uEAAzB,KAAKzB,KAAL,CAAWyB,YAAc;;AACvD,oBAAMK,eAAe,qBACjB,qBAAQ,mBAAM,KAAK9B,KAAL,CAAWpB,IAAX,CAAgBU,WAAtB,CAAR,CADiB,EAEjB,KAAKU,KAAL,CAAW+B,UAFM,EAGjBN,YAHiB,CAArB;;AAMA,kCAAKK,YAAL,EAAmB,iBAAWjD,EAAX,EAAkB;AAAA,wBAAfmD,CAAe,SAAfA,CAAe;AAAA,wBAAZC,CAAY,SAAZA,CAAY;;AACjC,2BAAKjC,KAAL,CAAWkC,cAAX,CAA0B,EAAErD,MAAF,EAAMmD,IAAN,EAASC,IAAT,EAA1B;AACH,iBAFD;AAGH;;;+CAEmB;AAChB,qBAAKlC,iBAAL,CAAuB,KAAKC,KAAL,CAAWyB,YAAlC;AACH;;;qDAEyB;AACtB,qBAAKH,QAAL,CAAc,EAAE5B,cAAc,CAAC,KAAKF,KAAL,CAAWE,YAA5B,EAAd;AACH;;;6CAEiB;AAAA;;AACd,oBAAMQ,QAAQ,KAAKF,KAAL,CAAWG,MAAX,CAAkBC,MAAlB,CAAyB,CAAzB,CAAd;AACA,oBAAM+B,6BAA6B,iBAAI,KAAKnC,KAAL,CAAWoC,mBAAf,EAAoC,UAACC,UAAD,EAAaC,MAAb;AAAA,2BACnE,iCAAmBpC,KAAnB,EAA0BmC,UAA1B,EAAsCA,WAAWE,KAAX,CAAiBC,GAAvD,EAA4DF,MAA5D,EAAoEjC,IAApE,CAAyE,UAACoC,IAAD,EAAU;AAC/E,+BAAKzC,KAAL,CAAW0C,iBAAX,CAA6BrB,QAA7B,CAAsCoB,IAAtC;AACH,qBAFD,CADmE;AAAA,iBAApC,CAAnC;;AAKA,kCAAQE,GAAR,CAAYR,0BAAZ,EAAwC9B,IAAxC,CAA6C,YAAM;AAC/C,6CAAWH,KAAX,eACO,OAAKF,KAAL,CAAWpB,IADlB;AAEIG,+BAAO,kBAAK,OAAKiB,KAAL,CAAW+B,UAAhB,EAA4B,0BAE/B,qBAAQ,oBAAR,CAF+B,0BAA5B;AAFX,wBAOG,OAAK/B,KAAL,CAAWpB,IAAX,CAAgB4D,GAPnB,EAOwBnC,IAPxB,CAO6B,UAACzB,IAAD,EAAU;AACnC,4BAAMgE,gBAAgB,wBAAW,kBAAK,OAAK5C,KAAL,CAAW6C,WAAhB,CAAX,EAAyC,kBAAK,OAAK7C,KAAL,CAAW+B,UAAhB,CAAzC,CAAtB;AACA,4BAAMe,qBAAqB,iBAAIF,aAAJ,EAAmB,UAACN,MAAD;AAAA,mCAC1C,yBAAWpC,KAAX,EAAkB,OAAKF,KAAL,CAAW6C,WAAX,CAAuBP,MAAvB,EAA+BS,QAAjD,EAA2DT,MAA3D,EAAmEjC,IAAnE,CAAwE,YAAM;AAC1E,uCAAKL,KAAL,CAAWgD,8BAAX,CAA0CV,MAA1C;AACH,6BAFD,CAD0C;AAAA,yBAAnB,CAA3B;;AAKA,+BAAKtC,KAAL,CAAWc,UAAX,CAAsBE,QAAtB,CAA+BpC,IAA/B;AACA,+BAAKoB,KAAL,CAAWmB,QAAX,CAAoBE,QAApB,CAA6BzC,KAAKG,KAAlC;;AAEA,0CAAQ4D,GAAR,CAAYG,kBAAZ,EAAgCzC,IAAhC,CAAqC,YAAM;AACvC,+CAAS4C,QAAT,CAAkBC,wBAAlB,CAA2C,cAA3C;AACH,yBAFD,EAEG,UAACzC,MAAD,EAAY;AACX,+CAASC,UAAT,CAAoB,EAAEJ,UAAUG,MAAZ,EAAoBE,MAAM,mBAASC,WAAnC,EAApB;AACH,yBAJD;AAKH,qBAtBD,EAsBG,UAACH,MAAD,EAAY;AACX,2CAASC,UAAT,CAAoB,EAAEJ,UAAUG,MAAZ,EAAoBE,MAAM,mBAASC,WAAnC,EAApB;AACH,qBAxBD;AAyBH,iBA1BD,EA0BG,UAACH,MAAD,EAAY;AACX,uCAASC,UAAT,CAAoB,EAAEJ,UAAUG,MAAZ,EAAoBE,MAAM,mBAASC,WAAnC,EAApB;AACH,iBA5BD;AA6BH;;;mDAEuBtB,W,EAAa;AACjC,qBAAKU,KAAL,CAAWc,UAAX,CAAsBC,OAAtB,cACO,KAAKf,KAAL,CAAWpB,IADlB;AAEIU;AAFJ;AAIH;;;qCAES;AAAA;;AACN,oBAAM6D,6BAA6B,SAA7BA,0BAA6B,CAACtE,EAAD,EAAK6C,MAAL,EAAaC,KAAb;AAAA,2BAC/B,OAAK3B,KAAL,CAAWmD,0BAAX,CAAsC,EAAEtE,MAAF,EAAM6C,cAAN,EAAcC,YAAd,EAAtC,CAD+B;AAAA,iBAAnC;AAEA,oBAAMO,iBAAiB,SAAjBA,cAAiB,CAACrD,EAAD,EAAKmD,CAAL,EAAQC,CAAR;AAAA,2BAAc,OAAKjC,KAAL,CAAWkC,cAAX,CAA0B,EAAErD,MAAF,EAAMmD,IAAN,EAASC,IAAT,EAA1B,CAAd;AAAA,iBAAvB;AACA,oBAAMmB,sBAAsB,SAAtBA,mBAAsB,CAACC,MAAD,EAASC,SAAT,EAAoBC,iBAApB,EAA0C;AAClE,2BAAKvD,KAAL,CAAWwD,qBAAX,qBAAoCF,SAApC,EAAgDC,iBAAhD,GAAqEF,MAArE;AACA,wBAAIA,WAAW,qBAAQ,oBAAR,CAAf,EAAiC;AAC7B,+BAAKI,sBAAL,CAA4BF,iBAA5B;AACH;AACJ,iBALD;AAMA,oBAAMG,mBAAmB,SAAnBA,gBAAmB,CAAC7E,EAAD,EAAQ;AAC7B,wBAAI,OAAKmB,KAAL,CAAWpB,IAAX,CAAgBU,WAAhB,KAAgCT,EAApC,EAAwC;AACpC,+BAAK4E,sBAAL,CAA4B,IAA5B;AACH;AACD,2BAAKzD,KAAL,CAAW2D,UAAX,CAAsB9E,EAAtB;AACH,iBALD;AAMA,oBAAM+E,mBAAmB,SAAnBA,gBAAmB,CAAC/E,EAAD,EAAK8B,IAAL,EAAc;AACnC,2BAAKX,KAAL,CAAW4D,gBAAX,CAA4B,EAAE/E,MAAF,EAAM8B,UAAN,EAA5B;;AAEA,wBAAI,CAAC,8BAAiBA,IAAjB,CAAD,IAA2B,CAAC,OAAKX,KAAL,CAAWoC,mBAAX,CAA+BvD,EAA/B,CAAhC,EAAoE;AAChE,4BAAMqB,QAAQ,OAAKF,KAAL,CAAWG,MAAX,CAAkBC,MAAlB,CAAyB,CAAzB,CAAd;AACA,oDAAkBF,KAAlB,EAAyBS,IAAzB,EAA+BN,IAA/B,CAAoC,UAACC,QAAD;AAAA,mCAAc,OAAKN,KAAL,CAAW6D,aAAX,CAAyBvD,QAAzB,EAAmCK,IAAnC,CAAd;AAAA,yBAApC;;AAEA,4BAAMmD,QAAQ,CAAC,OAAK9D,KAAL,CAAW6C,WAAX,CAAuBhE,EAAvB,CAAf;AACA,4BAAIiF,KAAJ,EAAW;AACP,0DAAoB5D,KAApB,EAA2BS,IAA3B,EAAiCN,IAAjC,CAAsC,UAACC,QAAD,EAAc;AAChD,uCAAKN,KAAL,CAAW0C,iBAAX,CAA6BtB,OAA7B,cACOd,QADP;AAEIkC,yCAAK3D,EAFT;AAGI0D,2CAAO,EAAEC,KAAK7B,IAAP;AAHX;AAKH,6BAND;AAOH,yBARD,MAQO;AACH,kDAAkBT,KAAlB,EAAyBS,IAAzB,EAA+B9B,EAA/B,EAAmCwB,IAAnC,CAAwC,UAACC,QAAD,EAAc;AAClD,uCAAKN,KAAL,CAAW0C,iBAAX,CAA6BrB,QAA7B,CAAsCf,QAAtC;AACA,uCAAKN,KAAL,CAAW0C,iBAAX,CAA6BtB,OAA7B,CAAqCd,QAArC;AACH,6BAHD;AAIH;AACJ;AACJ,iBAvBD;AAwBA,oBAAMyD,kCAAkC,KAAK/D,KAAL,CAAW0C,iBAAX,CAA6BtB,OAArE;AACA,oBAAM4C,6BAA6B,SAA7BA,0BAA6B,CAACnF,EAAD,EAAK8B,IAAL,EAAW0B,UAAX,EAA0B;AACzD,wBAAMnC,QAAQ,OAAKF,KAAL,CAAWG,MAAX,CAAkBC,MAAlB,CAAyB,CAAzB,CAAd;AACA,mDAAiBF,KAAjB,EAAwBmC,UAAxB,EAAoC1B,IAApC,EAA0CN,IAA1C,CAA+C,UAACC,QAAD,EAAc;AACzD,4BAAM2D,kBAAkB,OAAKjE,KAAL,CAAW+B,UAAX,CAAsBlD,EAAtB,EAA0BqF,SAAlD;AACA,4BAAMC,qBAAqB,mBAAMF,eAAN,EAAuB,IAAvB,CAA3B;AACA,4BAAMG,iBAAiB,mBAAM9D,QAAN,EAAgB,IAAhB,CAAvB;;AAEA,+BAAKN,KAAL,CAAWqE,eAAX,CAA2B/D,QAA3B,EAAqCzB,EAArC;AACA,+BAAKmB,KAAL,CAAWsE,gBAAX,CAA4B,wBAAWH,kBAAX,EAA+BC,cAA/B,CAA5B,EAA4EvF,EAA5E;AACH,qBAPD,EAOG,UAAC4B,MAAD;AAAA,+BAAY,mBAASC,UAAT,CAAoB,EAAEJ,UAAUG,MAAZ,EAAoBE,MAAM,mBAASC,WAAnC,EAApB,CAAZ;AAAA,qBAPH;AAQH,iBAVD;AAWA,oBAAM2D,gBAAgB,SAAhBA,aAAgB,CAACC,OAAD,EAAUC,QAAV,EAAuB;AACzC,wBAAI5F,WAAJ;;AAEA,4BAAQ2F,QAAQzB,QAAhB;AACI;AAAwBlE,yDAAsB;AAC9C;AAAwBA,yDAAsB;AAC9C;AAASA,iCAAK,qBAAL;AAHb;;AAMA,2BAAKmB,KAAL,CAAW0E,cAAX,qBAA6B7F,EAA7B,eACO2F,OADP;AAEIN,mCAAW;AAFf;AAIA,2BAAKlE,KAAL,CAAWkC,cAAX,YAA4BrD,MAA5B,IAAmC4F,QAAnC;AACA,wBAAI,CAAC,8BAAiBD,QAAQzB,QAAzB,CAAL,EAAyC;AACrCa,yCAAiB/E,EAAjB,EAAqB2F,QAAQzB,QAA7B,EAAuC,IAAvC;AACAiB,mDAA2BnF,EAA3B,EAA+B2F,QAAQzB,QAAvC;AACH;AACJ,iBAlBD;;AAoBA,uBACI;AACI,gCAAa,KAAKvD,KAAL,CAAWC,UAD5B;AAEI,kCAAe,KAAKD,KAAL,CAAWE,YAF9B;AAGI,kCAAe,KAAKM,KAAL,CAAWyB,YAH9B;AAII,+BAAY,KAAKzB,KAAL,CAAW2E,SAJ3B;AAKI,2BAAQ,KAAK3E,KAAL,CAAW+B,UALvB;AAMI,kCAAe,KAAKpC,gBANxB;AAOI,wCAAqB,KAAKE,sBAP9B;AAQI,qCAAkBuD,mBARtB;AASI,qCAAkBmB,aATtB;AAUI,kCAAeb,gBAVnB;AAWI,oCAAiB,KAAK1D,KAAL,CAAW4E,kBAXhC;AAYI,4CAAyBzB,0BAZ7B;AAaI,gCAAajB,cAbjB;AAcI,4CAAyB8B,0BAd7B;AAeI,iDAA8BD,+BAflC;AAgBI,kCAAeH,gBAhBnB;AAiBI,gCAAa,KAAK9D,cAjBtB;AAkBI,kCAAe,KAAKE,KAAL,CAAW6E,YAlB9B;AAmBI,4CAAyB,KAAK7E,KAAL,CAAW8E,sBAnBxC;AAoBI,wCAAqB,KAAK9E,KAAL,CAAW+E;AApBpC,kBADJ;AAwBH;;;;;;AAGLxF,sBAAkByF,SAAlB,GAA8B;AAC1BtC,2BAAmB,iBAAUuC,IAAV,CAAeC,UADR;AAE1BrB,uBAAe,iBAAUoB,IAAV,CAAeC,UAFJ;AAG1BR,wBAAgB,iBAAUO,IAAV,CAAeC,UAHL;AAI1B1B,+BAAuB,iBAAUyB,IAAV,CAAeC,UAJZ;AAK1BN,4BAAoB,iBAAUK,IAAV,CAAeC,UALT;AAM1B/B,oCAA4B,iBAAU8B,IAAV,CAAeC,UANjB;AAO1BhD,wBAAgB,iBAAU+C,IAAV,CAAeC,UAPL;AAQ1BtB,0BAAkB,iBAAUqB,IAAV,CAAeC,UARP;AAS1B9C,6BAAqB,iBAAU+C,QAAV,CAAmB,iBAAUC,KAAV,CAAgB;AACpD7C,mBAAO,iBAAU6C,KAAV,CAAgB;AACnB5C,qBAAK,iBAAU6C;AADI,aAAhB;AAD6C,SAAhB,CAAnB,EAIjBH,UAbsB;AAc1BnD,oBAAY,iBAAUoD,QAAV,CAAmB,iBAAUG,MAA7B,EAAqCJ,UAdvB;AAe1BzD,sBAAc,iBAAU0D,QAAV,CAAmB,iBAAUG,MAA7B,EAAqCJ,UAfzB;AAgB1BP,mBAAW,iBAAUQ,QAAV,CAAmB,iBAAUG,MAA7B,EAAqCJ,UAhBtB;AAiB1BrC,qBAAa,iBAAUsC,QAAV,CAAmB,iBAAUG,MAA7B,EAAqCJ,UAjBxB;AAkB1BZ,0BAAkB,iBAAUW,IAAV,CAAeC,UAlBP;AAmB1BjF,2BAAmB,iBAAUgF,IAAV,CAAeC,UAnBR;AAoB1BvB,oBAAY,iBAAUsB,IAAV,CAAeC,UApBD;AAqB1BlC,wCAAgC,iBAAUiC,IAAV,CAAeC,UArBrB;AAsB1B/E,4CAtB0B;AAuB1B0E,sBAAc,iBAAUO,KAAV,CAAgB;AAC1BvG,gBAAI,iBAAUwG,MADY;AAE1B1E,kBAAM,iBAAU0E;AAFU,SAAhB,CAvBY;AA2B1BP,gCAAwB,iBAAUK,QAAV,CAAmB,iBAAUI,GAA7B,CA3BE;AA4B1BR,4BAAoB,iBAAUI,QAAV,CAAmB,iBAAUI,GAA7B,CA5BM;AA6B1BlB,yBAAiB,iBAAUY,IAAV,CAAeC,UA7BN;AA8B1B3E,sBAAc,iBAAU0E,IAAV,CAAeC,UA9BH;AA+B1B/D,kBAAU,iBAAUgE,QAAV,CAAmB,iBAAUF,IAAV,CAAeC,UAAlC,EAA8CA,UA/B9B;AAgC1BtG,cAAM,iBAAUwG,KAAV,CAAgB;AAClB5C,iBAAK,iBAAU6C,MAAV,CAAiBH,UADJ;AAElB5F,yBAAa,iBAAU+F;AAFL,SAAhB,CAhCoB;AAoC1BvE,oBAAY,iBAAUmE,IAAV,CAAeC;AApCD,KAA9B;;AAuCA3F,wBAAoB,gCAAiBA,iBAAjB,EAChB,UAACC,KAAD,EAAQgG,QAAR,EAAqB;AACjB,YAAM3E,SAAS2E,SAASrF,MAAT,CAAgBC,MAAhB,CAAuB,CAAvB,CAAf;AACA,YAAMyE,eAAerF,MAAMiG,KAAN,CAAYC,cAAZ,CAA2BC,KAA3B,CAAiCC,OAAjC,CAAyC7G,KAAzC,CAA+C8G,QAApE;AACA,YAAMzD,sBAAsB5C,MAAMiG,KAAN,CAAYC,cAAZ,CAA2BC,KAA3B,CAAiCC,OAAjC,CAAyC7G,KAAzC,CAA+CsD,UAA3E;;AAEA,eAAO;AACHD,oDADG;AAEHL,wBAAYvC,MAAMiG,KAAN,CAAYC,cAAZ,CAA2BC,KAA3B,CAAiCC,OAAjC,CAAyChH,IAFlD;AAGH6C,0BAAcjC,MAAMiG,KAAN,CAAYC,cAAZ,CAA2BC,KAA3B,CAAiCC,OAAjC,CAAyC7G,KAAzC,CAA+C0C,YAH1D;AAIHkD,uBAAWnF,MAAMsG,MAAN,CAAaJ,cAAb,CAA4BC,KAA5B,CAAkChB,SAAlC,CAA4CoB,IAJpD;AAKHlD,yBAAarD,MAAMsG,MAAN,CAAaJ,cAAb,CAA4BC,KAA5B,CAAkCC,OAAlC,CAA0ChH,IALpD;AAMHiG,sCANG;AAOHC,oCAAwB1C,oBAAoByC,aAAahG,EAAjC,CAPrB;AAQHkG,gCAAoBvF,MAAMsG,MAAN,CAAaJ,cAAb,CAA4BC,KAA5B,CAAkChB,SAAlC,CAA4CqB,MAA5C,CAAmDnB,aAAalE,IAAhE,CARjB;AASH/B,kBAAMY,MAAMiG,KAAN,CAAYC,cAAZ,CAA2BC,KAA3B,CAAiCI,IAAjC,CAAsClF,MAAtC;AATH,SAAP;AAWH,KAjBe,EAkBhB,UAACoF,QAAD;AAAA,eAAe;AACXvD,+BAAmB,+BAAmB,EAAErB,kCAAF,EAAgCD,gCAAhC,EAAnB,EAAiF6E,QAAjF,CADR;AAEXpC,2BAAe,0DAAkCoC,QAAlC,CAFJ;AAGXvB,4BAAgB,sDAAmCuB,QAAnC,CAHL;AAIXzC,mCAAuB,4DAAsCyC,QAAtC,CAJZ;AAKXrB,gCAAoB,iDAAmCqB,QAAnC,CALT;AAMX9C,wCAA4B,+DAAqC8C,QAArC,CANjB;AAOX/D,4BAAgB,6DAAmC+D,QAAnC,CAPL;AAQXrC,8BAAkB,8CAAgCqC,QAAhC,CARP;AASX3B,8BAAkB,uDAAyC2B,QAAzC,CATP;AAUXhG,+BAAmB,yDAAsCgG,QAAtC,CAVR;AAWXtC,wBAAY,kDAA+BsC,QAA/B,CAXD;AAYXjD,4CAAgC,oDAA+CiD,QAA/C,CAZrB;AAaX5B,6BAAiB,kDAAoC4B,QAApC,CAbN;AAcX9E,sBAAU,+BAAmB,EAAEE,yBAAF,EAA2BD,uBAA3B,EAAnB,EAAuE6E,QAAvE,CAdC;AAeX1F,0BAAc,2CAAiC0F,QAAjC,CAfH;AAgBXnF,wBAAY,+BAAmB,EAAEE,4BAAF,EAA0BD,0BAA1B,EAAnB,EAAqEkF,QAArE;AAhBD,SAAf;AAAA,KAlBgB,CAApB;AAqCA1G,wBAAoB,0BAAWA,iBAAX,CAApB;;sBAEeA,iB","file":"EditTreeContainer.js","sourcesContent":["/*\n * The contents of this file are subject to the terms of the Common Development and\n * Distribution License (the License). You may not use this file except in compliance with the\n * License.\n *\n * You can obtain a copy of the License at legal/CDDLv1.0.txt. See the License for the\n * specific language governing permission and limitations under the License.\n *\n * When distributing Covered Software, include this CDDL Header Notice in each file and include\n * the License file at legal/CDDLv1.0.txt. If applicable, add the following below the CDDL\n * Header, with the fields enclosed by brackets [] replaced by your own identifying\n * information: \"Portions copyright [year] [name of copyright owner]\".\n *\n * Copyright 2017 ForgeRock AS.\n */\nimport { bindActionCreators } from \"redux\";\nimport { chain, difference, each, every, findKey, isEmpty, keys, map, omit, pluck, values } from \"lodash\";\nimport React, { Component, PropTypes } from \"react\";\nimport uuidv4 from \"uuid\";\n\nimport { addOrUpdate as propertiesToLocal } from \"store/modules/local/authentication/trees/current/nodes/properties\";\nimport {\n    addOrUpdate as propertiesToRemote,\n    remove as removePropertiesFromRemote\n} from \"store/modules/remote/authentication/trees/current/nodes/properties\";\nimport { addOrUpdate as treeToLocal } from \"store/modules/local/authentication/trees/list\";\nimport { addOrUpdate as treeToRemote } from \"store/modules/remote/authentication/trees/list\";\nimport { addOrUpdateSchema as addNodeSchema } from \"store/modules/remote/authentication/trees/nodeTypes/schema\";\nimport { set as setNodeTypes } from \"store/modules/remote/authentication/trees/nodeTypes/list\";\nimport { update as updateTree, get as getTree }\n    from \"org/forgerock/openam/ui/admin/services/realm/authentication/TreeService\";\nimport { start, isStaticNodeType, FAILURE_NODE_TYPE, SUCCESS_NODE_TYPE, SUCCESS_NODE_ID, FAILURE_NODE_ID }\n    from \"store/modules/local/authentication/trees/current/nodes/static\";\nimport {\n    createOrUpdate as createOrUpdateNode,\n    get as getNodeProperties,\n    getAllTypes as getAllNodeTypes,\n    getSchema as getNodeTypeSchema,\n    getTemplate as getNodeTypeTemplate,\n    listOutcomes as listNodeOutcomes,\n    remove as deleteNode\n} from \"org/forgerock/openam/ui/admin/services/realm/authentication/NodeService\";\nimport {\n    addOrUpdateNode as addNodeToLocal,\n    setNodes as nodesToLocal,\n    setOutcomes as setNodeOutcomes,\n    removeConnection as removeNodeConnection,\n    addOrUpdateConnection as connectionToLocal\n} from \"store/modules/local/authentication/trees/current/tree\";\nimport { removeNode, removeCurrentTree } from \"store/modules/local/authentication/trees/current/index\";\nimport { setNodes as nodesToRemote } from \"store/modules/remote/authentication/trees/current/tree\";\nimport { remove as removeSelected, set as setSelected }\n    from \"store/modules/local/authentication/trees/current/nodes/selected\";\nimport { updateDimensions, updatePosition } from \"store/modules/local/authentication/trees/current/nodes/measurements\";\nimport autoLayout from \"org/forgerock/openam/ui/admin/views/realms/authentication/trees/edit/autoLayout/index\";\nimport connectWithStore from \"components/redux/connectWithStore\";\nimport EditTree from \"./EditTree\";\nimport Messages from \"org/forgerock/commons/ui/common/components/Messages\";\nimport Promise from \"org/forgerock/openam/ui/common/util/Promise\";\nimport withRouter from \"org/forgerock/commons/ui/common/components/hoc/withRouter\";\nimport withRouterPropType from \"org/forgerock/commons/ui/common/components/hoc/withRouterPropType\";\n\nconst containsNode = (tree, id) => {\n    const connections = chain(tree.nodes)\n        .values()\n        .pluck(\"connections\")\n        .map((connections) => values(connections))\n        .flatten()\n        .value();\n\n    return connections.indexOf(id) !== -1 || tree.entryNodeId === id;\n};\n\nclass EditTreeContainer extends Component {\n    constructor () {\n        super();\n        this.state = {\n            isFetching: true,\n            isFullscreen: false\n        };\n        this.handleAutoLayout = this.handleAutoLayout.bind(this);\n        this.handleFullscreenToggle = this.handleFullscreenToggle.bind(this);\n        this.handleTreeSave = this.handleTreeSave.bind(this);\n        this.performAutoLayout = this.performAutoLayout.bind(this);\n    }\n\n    componentDidMount () {\n        this.props.removeCurrentTree();\n        const realm = this.props.router.params[0];\n\n        getAllNodeTypes(realm).then((response) => {\n            this.props.setNodeTypes(response.result);\n        }, (reason) => Messages.addMessage({ response: reason, type: Messages.TYPE_DANGER }));\n\n        const treeId = this.props.router.params[1];\n        getTree(realm, treeId).then((tree) => {\n            this.props.updateTree.inLocal(tree);\n            this.props.updateTree.inRemote(tree);\n\n            const hasSuccessNode = containsNode(tree, SUCCESS_NODE_ID);\n            const hasFailureNode = containsNode(tree, FAILURE_NODE_ID);\n\n            this.props.setNodes.toLocal(tree.nodes, tree.entryNodeId, hasSuccessNode, hasFailureNode);\n            this.props.setNodes.toRemote(tree.nodes);\n\n            this.setState({ isFetching: false });\n        }, (reason) => {\n            Messages.addMessage({ response: reason, type: Messages.TYPE_DANGER });\n            this.setState({ isFetching: false });\n        });\n    }\n\n    componentWillReceiveProps (nextProps) {\n        const hasDimensions = (measurements) => {\n            return !isEmpty(measurements) && every(measurements, ({ height, width }) => {\n                return height > 0 && width > 0;\n            });\n        };\n\n        const propsHasDimensions = hasDimensions(this.props.measurements);\n        const nextPropsHasDimensions = hasDimensions(nextProps.measurements);\n\n        if (!propsHasDimensions && nextPropsHasDimensions) {\n            this.performAutoLayout(nextProps.measurements);\n        }\n    }\n\n    performAutoLayout (measurements = this.props.measurements) {\n        const newPositions = autoLayout(\n            findKey(start(this.props.tree.entryNodeId)),\n            this.props.localNodes,\n            measurements\n        );\n\n        each(newPositions, ({ x, y }, id) => {\n            this.props.handleNodeMove({ id, x, y });\n        });\n    }\n\n    handleAutoLayout () {\n        this.performAutoLayout(this.props.measurements);\n    }\n\n    handleFullscreenToggle () {\n        this.setState({ isFullscreen: !this.state.isFullscreen });\n    }\n\n    handleTreeSave () {\n        const realm = this.props.router.params[0];\n        const nodeCreateOrUpdatePromises = map(this.props.localNodeProperties, (properties, nodeId) =>\n            createOrUpdateNode(realm, properties, properties._type._id, nodeId).then((node) => {\n                this.props.addNodeProperties.toRemote(node);\n            }));\n\n        Promise.all(nodeCreateOrUpdatePromises).then(() => {\n            updateTree(realm, {\n                ...this.props.tree,\n                nodes: omit(this.props.localNodes, [\n                    FAILURE_NODE_ID,\n                    findKey(start()),\n                    SUCCESS_NODE_ID\n                ])\n            }, this.props.tree._id).then((tree) => {\n                const nodesToDelete = difference(keys(this.props.remoteNodes), keys(this.props.localNodes));\n                const nodeDeletePromises = map(nodesToDelete, (nodeId) =>\n                    deleteNode(realm, this.props.remoteNodes[nodeId].nodeType, nodeId).then(() => {\n                        this.props.removeNodePropertiesFromRemote(nodeId);\n                    }));\n\n                this.props.updateTree.inRemote(tree);\n                this.props.setNodes.toRemote(tree.nodes);\n\n                Promise.all(nodeDeletePromises).then(() => {\n                    Messages.messages.displayMessageFromConfig(\"changesSaved\");\n                }, (reason) => {\n                    Messages.addMessage({ response: reason, type: Messages.TYPE_DANGER });\n                });\n            }, (reason) => {\n                Messages.addMessage({ response: reason, type: Messages.TYPE_DANGER });\n            });\n        }, (reason) => {\n            Messages.addMessage({ response: reason, type: Messages.TYPE_DANGER });\n        });\n    }\n\n    updateLocalEntryNodeId (entryNodeId) {\n        this.props.updateTree.inLocal({\n            ...this.props.tree,\n            entryNodeId\n        });\n    }\n\n    render () {\n        const handleNodeDimensionsChange = (id, height, width) =>\n            this.props.handleNodeDimensionsChange({ id, height, width });\n        const handleNodeMove = (id, x, y) => this.props.handleNodeMove({ id, x, y });\n        const handleNewConnection = (nodeID, outcomeID, destinationNodeId) => {\n            this.props.addOrUpdateConnection({ [outcomeID]: destinationNodeId }, nodeID);\n            if (nodeID === findKey(start())) {\n                this.updateLocalEntryNodeId(destinationNodeId);\n            }\n        };\n        const handleNodeDelete = (id) => {\n            if (this.props.tree.entryNodeId === id) {\n                this.updateLocalEntryNodeId(null);\n            }\n            this.props.removeNode(id);\n        };\n        const handleNodeSelect = (id, type) => {\n            this.props.handleNodeSelect({ id, type });\n\n            if (!isStaticNodeType(type) && !this.props.localNodeProperties[id]) {\n                const realm = this.props.router.params[0];\n                getNodeTypeSchema(realm, type).then((response) => this.props.addNodeSchema(response, type));\n\n                const isNew = !this.props.remoteNodes[id];\n                if (isNew) {\n                    getNodeTypeTemplate(realm, type).then((response) => {\n                        this.props.addNodeProperties.toLocal({\n                            ...response,\n                            _id: id,\n                            _type: { _id: type }\n                        });\n                    });\n                } else {\n                    getNodeProperties(realm, type, id).then((response) => {\n                        this.props.addNodeProperties.toRemote(response);\n                        this.props.addNodeProperties.toLocal(response);\n                    });\n                }\n            }\n        };\n        const handleNodePropertiesFieldChange = this.props.addNodeProperties.toLocal;\n        const handleNodePropertiesChange = (id, type, properties) => {\n            const realm = this.props.router.params[0];\n            listNodeOutcomes(realm, properties, type).then((response) => {\n                const currentOutcomes = this.props.localNodes[id]._outcomes;\n                const currentOutcomeKeys = pluck(currentOutcomes, \"id\");\n                const newOutcomeKeys = pluck(response, \"id\");\n\n                this.props.setNodeOutcomes(response, id);\n                this.props.removeConnection(difference(currentOutcomeKeys, newOutcomeKeys), id);\n            }, (reason) => Messages.addMessage({ response: reason, type: Messages.TYPE_DANGER }));\n        };\n        const handleNewNode = (newNode, position) => {\n            let id;\n\n            switch (newNode.nodeType) {\n                case SUCCESS_NODE_TYPE: id = SUCCESS_NODE_ID; break;\n                case FAILURE_NODE_TYPE: id = FAILURE_NODE_ID; break;\n                default: id = uuidv4();\n            }\n\n            this.props.addNodeToLocal({ [id]: {\n                ...newNode,\n                _outcomes: []\n            } });\n            this.props.handleNodeMove({ id, ...position });\n            if (!isStaticNodeType(newNode.nodeType)) {\n                handleNodeSelect(id, newNode.nodeType, true);\n                handleNodePropertiesChange(id, newNode.nodeType);\n            }\n        };\n\n        return (\n            <EditTree\n                isFetching={ this.state.isFetching }\n                isFullscreen={ this.state.isFullscreen }\n                measurements={ this.props.measurements }\n                nodeTypes={ this.props.nodeTypes }\n                nodes={ this.props.localNodes }\n                onAutoLayout={ this.handleAutoLayout }\n                onFullscreenToggle={ this.handleFullscreenToggle }\n                onNewConnection={ handleNewConnection }\n                onNewNodeCreate={ handleNewNode }\n                onNodeDelete={ handleNodeDelete }\n                onNodeDeselect={ this.props.handleNodeDeselect }\n                onNodeDimensionsChange={ handleNodeDimensionsChange }\n                onNodeMove={ handleNodeMove }\n                onNodePropertiesChange={ handleNodePropertiesChange }\n                onNodePropertiesFieldChange={ handleNodePropertiesFieldChange }\n                onNodeSelect={ handleNodeSelect }\n                onTreeSave={ this.handleTreeSave }\n                selectedNode={ this.props.selectedNode }\n                selectedNodeProperties={ this.props.selectedNodeProperties }\n                selectedNodeSchema={ this.props.selectedNodeSchema }\n            />\n        );\n    }\n}\n\nEditTreeContainer.propTypes = {\n    addNodeProperties: PropTypes.func.isRequired,\n    addNodeSchema: PropTypes.func.isRequired,\n    addNodeToLocal: PropTypes.func.isRequired,\n    addOrUpdateConnection: PropTypes.func.isRequired,\n    handleNodeDeselect: PropTypes.func.isRequired,\n    handleNodeDimensionsChange: PropTypes.func.isRequired,\n    handleNodeMove: PropTypes.func.isRequired,\n    handleNodeSelect: PropTypes.func.isRequired,\n    localNodeProperties: PropTypes.objectOf(PropTypes.shape({\n        _type: PropTypes.shape({\n            _id: PropTypes.string\n        })\n    })).isRequired,\n    localNodes: PropTypes.objectOf(PropTypes.object).isRequired,\n    measurements: PropTypes.objectOf(PropTypes.object).isRequired,\n    nodeTypes: PropTypes.objectOf(PropTypes.object).isRequired,\n    remoteNodes: PropTypes.objectOf(PropTypes.object).isRequired,\n    removeConnection: PropTypes.func.isRequired,\n    removeCurrentTree: PropTypes.func.isRequired,\n    removeNode: PropTypes.func.isRequired,\n    removeNodePropertiesFromRemote: PropTypes.func.isRequired,\n    router: withRouterPropType,\n    selectedNode: PropTypes.shape({\n        id: PropTypes.string,\n        type: PropTypes.string\n    }),\n    selectedNodeProperties: PropTypes.objectOf(PropTypes.any),\n    selectedNodeSchema: PropTypes.objectOf(PropTypes.any),\n    setNodeOutcomes: PropTypes.func.isRequired,\n    setNodeTypes: PropTypes.func.isRequired,\n    setNodes: PropTypes.objectOf(PropTypes.func.isRequired).isRequired,\n    tree: PropTypes.shape({\n        _id: PropTypes.string.isRequired,\n        entryNodeId: PropTypes.string\n    }),\n    updateTree: PropTypes.func.isRequired\n};\n\nEditTreeContainer = connectWithStore(EditTreeContainer,\n    (state, ownProps) => {\n        const treeId = ownProps.router.params[1];\n        const selectedNode = state.local.authentication.trees.current.nodes.selected;\n        const localNodeProperties = state.local.authentication.trees.current.nodes.properties;\n\n        return {\n            localNodeProperties,\n            localNodes: state.local.authentication.trees.current.tree,\n            measurements: state.local.authentication.trees.current.nodes.measurements,\n            nodeTypes: state.remote.authentication.trees.nodeTypes.list,\n            remoteNodes: state.remote.authentication.trees.current.tree,\n            selectedNode,\n            selectedNodeProperties: localNodeProperties[selectedNode.id],\n            selectedNodeSchema: state.remote.authentication.trees.nodeTypes.schema[selectedNode.type],\n            tree: state.local.authentication.trees.list[treeId]\n        };\n    },\n    (dispatch) => ({\n        addNodeProperties: bindActionCreators({ toRemote: propertiesToRemote, toLocal: propertiesToLocal }, dispatch),\n        addNodeSchema: bindActionCreators(addNodeSchema, dispatch),\n        addNodeToLocal: bindActionCreators(addNodeToLocal, dispatch),\n        addOrUpdateConnection: bindActionCreators(connectionToLocal, dispatch),\n        handleNodeDeselect: bindActionCreators(removeSelected, dispatch),\n        handleNodeDimensionsChange: bindActionCreators(updateDimensions, dispatch),\n        handleNodeMove: bindActionCreators(updatePosition, dispatch),\n        handleNodeSelect: bindActionCreators(setSelected, dispatch),\n        removeConnection: bindActionCreators(removeNodeConnection, dispatch),\n        removeCurrentTree: bindActionCreators(removeCurrentTree, dispatch),\n        removeNode: bindActionCreators(removeNode, dispatch),\n        removeNodePropertiesFromRemote: bindActionCreators(removePropertiesFromRemote, dispatch),\n        setNodeOutcomes: bindActionCreators(setNodeOutcomes, dispatch),\n        setNodes: bindActionCreators({ toRemote: nodesToRemote, toLocal: nodesToLocal }, dispatch),\n        setNodeTypes: bindActionCreators(setNodeTypes, dispatch),\n        updateTree: bindActionCreators({ inRemote: treeToRemote, inLocal: treeToLocal }, dispatch)\n    })\n);\nEditTreeContainer = withRouter(EditTreeContainer);\n\nexport default EditTreeContainer;\n"]}