{"version":3,"sources":["../../../../../../../XUI/org/forgerock/commons/ui/user-1/profile/AbstractUserProfileTab.js"],"names":["define","$","_","form2js","js2form","Handlebars","AbstractView","ChangesPending","Configuration","ConfirmPasswordDialog","Constants","EventManager","ValidatorsManager","AbstractUserProfileTab","extend","noBaseTempate","events","initializeChangesPending","changesPendingWidget","watchChanges","element","$el","find","watchedObj","subform","getFormContent","watchedProperties","alertClass","checkChanges","event","target","form","closest","bindValidators","loggedUser","baseEntity","validateAllFields","trigger","attr","makeChanges","prop","reloadFormData","userData","data","user","val","t","clearValidators","resetForm","preventDefault","submit","formData","save","patch","then","bind","submitSuccess","toJSON","sendEvent","EVENT_DISPLAY_MESSAGE_REQUEST","formSubmit","stopPropagation","changedProtected","formValidated","chain","getProtectedAttributes","filter","has","isEmpty","get","isEqual","map","text","value","length","render","currentPassword","setCurrentPassword"],"mappings":"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","file":"AbstractUserProfileTab.js","sourcesContent":["/**\r\n * The contents of this file are subject to the terms of the Common Development and\r\n * Distribution License (the License). You may not use this file except in compliance with the\r\n * License.\r\n *\r\n * You can obtain a copy of the License at legal/CDDLv1.0.txt. See the License for the\r\n * specific language governing permission and limitations under the License.\r\n *\r\n * When distributing Covered Software, include this CDDL Header Notice in each file and include\r\n * the License file at legal/CDDLv1.0.txt. If applicable, add the following below the CDDL\r\n * Header, with the fields enclosed by brackets [] replaced by your own identifying\r\n * information: \"Portions copyright [year] [name of copyright owner]\".\r\n *\r\n * Copyright 2015-2016 ForgeRock AS.\r\n */\r\n/* eslint-disable */\r\n define([\r\n    \"jquery\",\r\n    \"lodash\",\r\n    \"form2js\",\r\n    \"js2form\",\r\n    \"handlebars\",\r\n    \"org/forgerock/commons/ui/common/main/AbstractView\",\r\n    \"org/forgerock/commons/ui/common/components/ChangesPending\",\r\n    \"org/forgerock/commons/ui/common/main/Configuration\",\r\n    \"org/forgerock/commons/ui/user/profile/ConfirmPasswordDialog\",\r\n    \"org/forgerock/commons/ui/common/util/Constants\",\r\n    \"org/forgerock/commons/ui/common/main/EventManager\",\r\n    \"org/forgerock/commons/ui/common/main/ValidatorsManager\"\r\n], function($, _, form2js, js2form, Handlebars,\r\n    AbstractView,\r\n    ChangesPending,\r\n    Configuration,\r\n    ConfirmPasswordDialog,\r\n    Constants,\r\n    EventManager,\r\n    ValidatorsManager) {\r\n\r\n    /**\r\n     * Provides base functionality for all tabs within UserProfileView\r\n     * @exports org/forgerock/commons/ui/user/profile/AbstractUserProfileTab\r\n     */\r\n    var AbstractUserProfileTab = AbstractView.extend({\r\n        noBaseTempate: true,\r\n        events: {\r\n            \"click input[type=submit]\": \"formSubmit\",\r\n            \"click input[type=reset]\": \"resetForm\",\r\n            \"reload form\": \"reloadFormData\",\r\n            \"change :input\": \"checkChanges\"\r\n        },\r\n\r\n        /**\r\n         * Attaches a ChangesPending instance within the view\r\n         * Requires the presence of an element with the \"changes-pending\" class\r\n         * Initializes with the current value from this.getFormContent()\r\n         */\r\n        initializeChangesPending: function () {\r\n            this.changesPendingWidget = ChangesPending.watchChanges({\r\n                element: this.$el.find(\".changes-pending\"),\r\n                watchedObj: { subform: this.getFormContent() },\r\n                watchedProperties: [\"subform\"],\r\n                alertClass: \"alert-warning alert-sm\"\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Works with form validators and changes pending widget to reflect the state of the\r\n         * form as the user makes their edits.\r\n         */\r\n        checkChanges: function (event) {\r\n            var target = $(event.target),\r\n                form = $(target.closest(\"form\"));\r\n\r\n            ValidatorsManager.bindValidators(form, Configuration.loggedUser.baseEntity, function () {\r\n                ValidatorsManager.validateAllFields(form);\r\n            });\r\n\r\n            target.trigger(\"validate\");\r\n            if (!target.attr(\"data-validation-dependents\")) {\r\n                this.changesPendingWidget.makeChanges({subform: this.getFormContent()});\r\n            }\r\n\r\n            form.find(\"input[type='reset']\").prop(\"disabled\", false);\r\n        },\r\n\r\n        /**\r\n         * Generic method for reading content from the view's form. Extend if necessary for more\r\n         * complex form parsing needs.\r\n         */\r\n        getFormContent: function () {\r\n            return form2js(this.$el.find(\"form\")[0], \".\", false);\r\n        },\r\n\r\n        /**\r\n         * Used for populating the form with a \"clean\" set of data, either when first rendered\r\n         * or when the form is reset.\r\n         */\r\n        reloadFormData: function (userData) {\r\n            var form = this.$el.find(\"form\");\r\n            this.data.user = userData || this.data.user;\r\n            js2form(form[0], this.data.user);\r\n            $(\"input[type=password]\", form).val(\"\").attr(\"placeholder\", $.t(\"common.form.passwordPlaceholder\"));\r\n\r\n            ValidatorsManager.clearValidators(form);\r\n            ValidatorsManager.bindValidators(form, Configuration.loggedUser.baseEntity, function () {\r\n                form.find(\"input[type='reset']\").prop(\"disabled\", true);\r\n                form.find(\"input[type='submit']\").prop(\"disabled\", true);\r\n            });\r\n            this.initializeChangesPending();\r\n        },\r\n\r\n        resetForm: function (event) {\r\n            event.preventDefault();\r\n            this.reloadFormData();\r\n        },\r\n\r\n        /**\r\n         * Generic save method  - patch the user model with the local data and persist it\r\n         */\r\n        submit: function (formData) {\r\n            Configuration.loggedUser.save(formData, {patch: true}).then(\r\n                _.bind(function () {\r\n                    this.submitSuccess();\r\n                }, this)\r\n            );\r\n        },\r\n\r\n        /**\r\n         * After a form is saved, reset the content with the most recent data for the user\r\n         */\r\n        submitSuccess: function () {\r\n            this.data.user = Configuration.loggedUser.toJSON();\r\n            this.reloadFormData();\r\n            EventManager.sendEvent(Constants.EVENT_DISPLAY_MESSAGE_REQUEST, \"profileUpdateSuccessful\");\r\n        },\r\n\r\n        /**\r\n         * Attempt to submit the form. If the form is invalid, it will fail. If the user\r\n         * is changing a protected attribute, prompt them to first enter their old password.\r\n         * Finally, attempt to actually submit the form data.\r\n         */\r\n        formSubmit: function (event) {\r\n\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n\r\n            var changedProtected = [],\r\n                form = $(event.target).closest(\"form\"),\r\n                formData = this.getFormContent(form[0]);\r\n\r\n            if (ValidatorsManager.formValidated(form)) {\r\n\r\n                changedProtected = _.chain(Configuration.loggedUser.getProtectedAttributes())\r\n                    .filter(function(attr) {\r\n                        if (_.has(formData, attr)) {\r\n                            if (_.isEmpty(Configuration.loggedUser.get(attr)) && _.isEmpty(formData[attr])) {\r\n                                return false;\r\n                            } else {\r\n                                return !_.isEqual(Configuration.loggedUser.get(attr),formData[attr]);\r\n                            }\r\n                        } else {\r\n                            return false;\r\n                        }\r\n                    }, this)\r\n                    .map(function (attr) {\r\n                        return this.$el.find(\"label[for=input-\"+attr+\"]\").text();\r\n                    }, this)\r\n                    .value();\r\n\r\n                if (changedProtected.length === 0) {\r\n                    this.submit(formData);\r\n                } else {\r\n                    ConfirmPasswordDialog.render(changedProtected, _.bind(function (currentPassword) {\r\n                        Configuration.loggedUser.setCurrentPassword(currentPassword);\r\n                        this.submit(formData);\r\n                    }, this));\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n    });\r\n\r\n    return AbstractUserProfileTab;\r\n});"]}