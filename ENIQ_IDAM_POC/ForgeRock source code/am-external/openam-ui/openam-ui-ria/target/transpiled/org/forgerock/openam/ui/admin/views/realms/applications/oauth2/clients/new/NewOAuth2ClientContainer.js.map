{"version":3,"sources":["../../../../../../../../../../../../XUI/org/forgerock/openam/ui/admin/views/realms/applications/oauth2/clients/new/NewOAuth2ClientContainer.jsx"],"names":["NewOAuth2ClientContainer","props","state","isFetching","clientId","handleClientIdChange","bind","router","params","then","schema","values","setState","setSchema","setTemplate","response","addMessage","type","TYPE_DANGER","handleCreate","formData","realm","valuesWithoutNullPasswords","removeNullPasswords","raw","routeTo","configuration","routes","realmsApplicationsOAuth2ClientsEdit","args","encodeURIComponent","trigger","template","propTypes","shape","string","isRequired","func","remote","oauth2","clients","dispatch"],"mappings":"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","file":"NewOAuth2ClientContainer.js","sourcesContent":["/*\n * The contents of this file are subject to the terms of the Common Development and\n * Distribution License (the License). You may not use this file except in compliance with the\n * License.\n *\n * You can obtain a copy of the License at legal/CDDLv1.0.txt. See the License for the\n * specific language governing permission and limitations under the License.\n *\n * When distributing Covered Software, include this CDDL Header Notice in each file and include\n * the License file at legal/CDDLv1.0.txt. If applicable, add the following below the CDDL\n * Header, with the fields enclosed by brackets [] replaced by your own identifying\n * information: \"Portions copyright [year] [name of copyright owner]\".\n *\n * Copyright 2017 ForgeRock AS.\n */\n\nimport { bindActionCreators } from \"redux\";\nimport { isEmpty, map } from \"lodash\";\nimport React, { Component, PropTypes } from \"react\";\n\nimport { create, getInitialState } from \"org/forgerock/openam/ui/admin/services/realm/AgentsService\";\nimport { OAUTH2_CLIENT } from \"org/forgerock/openam/ui/admin/services/realm/AgentTypes\";\nimport { setSchema } from \"store/modules/remote/oauth2/clients/schema\";\nimport { setTemplate } from \"store/modules/remote/oauth2/clients/template\";\nimport connectWithStore from \"components/redux/connectWithStore\";\nimport JSONValues from \"org/forgerock/openam/ui/common/models/JSONValues\";\nimport JSONSchema from \"org/forgerock/openam/ui/common/models/JSONSchema\";\nimport Messages from \"org/forgerock/commons/ui/common/components/Messages\";\nimport NewOAuth2Client from \"./NewOAuth2Client\";\nimport Router from \"org/forgerock/commons/ui/common/main/Router\";\nimport withRouter from \"org/forgerock/commons/ui/common/components/hoc/withRouter\";\nimport withRouterPropType from \"org/forgerock/commons/ui/common/components/hoc/withRouterPropType\";\n\nclass NewOAuth2ClientContainer extends Component {\n    constructor (props) {\n        super(props);\n\n        this.state = {\n            isFetching: true,\n            clientId: \"\"\n        };\n\n        this.handleClientIdChange = this.handleClientIdChange.bind(this);\n    }\n\n    componentDidMount () {\n        getInitialState(this.props.router.params[0], OAUTH2_CLIENT).then(({ schema, values }) => {\n            this.setState({ isFetching: false });\n            this.props.setSchema(schema[0]);\n            this.props.setTemplate(values[0]);\n        }, (response) => {\n            this.setState({ isFetching: false });\n            Messages.addMessage({ response, type: Messages.TYPE_DANGER });\n        });\n    }\n\n    handleClientIdChange (clientId) {\n        this.setState({ clientId });\n    }\n\n    render () {\n        const handleCreate = (formData) => {\n            const realm = this.props.router.params[0];\n            const values = new JSONValues(formData);\n            const valuesWithoutNullPasswords = values.removeNullPasswords(new JSONSchema(this.props.schema));\n\n            create(realm, OAUTH2_CLIENT, valuesWithoutNullPasswords.raw, this.state.clientId).then(() => {\n                Router.routeTo(Router.configuration.routes.realmsApplicationsOAuth2ClientsEdit,\n                    { args: map([realm, this.state.clientId], encodeURIComponent), trigger: true });\n            }, (response) => {\n                Messages.addMessage({ response, type: Messages.TYPE_DANGER });\n            });\n        };\n\n        return (\n            <NewOAuth2Client\n                clientId={ this.state.clientId }\n                isCreateAllowed={ !isEmpty(this.state.clientId) }\n                isFetching={ this.state.isFetching }\n                onClientIdChange={ this.handleClientIdChange }\n                onCreate={ handleCreate }\n                schema={ this.props.schema }\n                template={ this.props.template }\n            />\n        );\n    }\n}\n\nNewOAuth2ClientContainer.propTypes = {\n    router: withRouterPropType,\n    schema: PropTypes.shape({\n        type: PropTypes.string.isRequired\n    }),\n    setSchema: PropTypes.func.isRequired,\n    setTemplate: PropTypes.func.isRequired,\n    template: PropTypes.shape({\n        type: PropTypes.string.isRequired\n    })\n};\n\nNewOAuth2ClientContainer = connectWithStore(NewOAuth2ClientContainer,\n    (state) => ({\n        schema: state.remote.oauth2.clients.schema,\n        template: state.remote.oauth2.clients.template\n    }),\n    (dispatch) => ({\n        setSchema: bindActionCreators(setSchema, dispatch),\n        setTemplate: bindActionCreators(setTemplate, dispatch)\n    })\n);\nNewOAuth2ClientContainer = withRouter(NewOAuth2ClientContainer);\n\nexport default NewOAuth2ClientContainer;\n"]}