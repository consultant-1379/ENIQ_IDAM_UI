{"version":3,"sources":["../../../../../../../XUI/org/forgerock/commons/ui/common/util/OAuth.js"],"names":["define","_","URIUtils","obj","getRedirectURI","returnFileName","getCurrentOrigin","getCurrentPathName","replace","getRequestURL","authorization_endpoint","client_id","scopes","state","encodeURIComponent","generateNonce","nonce","Math","random","toString","substr","sessionStorage","setItem","getCurrentNonce","getItem","removeItem"],"mappings":";;AAAA;;;;;;;;;;;;;;;AAeA;AACCA,OAAO,CACJ,QADI,EAEJ,YAFI,CAAP,EAGE,UAAUC,CAAV,EAAaC,QAAb,EAAuB;AACtB;;;;AAIA,QAAIC,MAAM,EAAV;;AAEA;;;;;AAKAA,QAAIC,cAAJ,GAAqB,UAAUC,cAAV,EAA0B;AAC3C,eAAOH,SAASI,gBAAT,KACCJ,SAASK,kBAAT,GAA8BC,OAA9B,CAAsC,uBAAtC,EAA+D,OAC9DH,kBAAkB,kBAD4C,CAA/D,CADR;AAGH,KAJD;;AAMA;;;;;;;;;AASAF,QAAIM,aAAJ,GAAoB,UAAUC,sBAAV,EAAkCC,SAAlC,EAA6CC,MAA7C,EAAqDC,KAArD,EAA4D;AAC5E,eAAOH,yBACH,4BADG,GAC4BI,mBAAmBF,MAAnB,CAD5B,GAEH,gBAFG,GAEgB,KAAKR,cAAL,EAFhB,GAGH,SAHG,GAGSU,mBAAmBD,KAAnB,CAHT,GAIH,SAJG,GAIS,KAAKE,aAAL,CAAmBJ,SAAnB,CAJT,GAKH,aALG,GAKaA,SALpB;AAMH,KAPD;;AASAR,QAAIY,aAAJ,GAAoB,YAAY;AAC5B;AACA;AACA;AACA;AACA,YAAIC,QAAQC,KAAKC,MAAL,GAAcC,QAAd,CAAuB,EAAvB,EAA2BC,MAA3B,CAAkC,CAAlC,EAAqC,EAArC,CAAZ;AACAC,uBAAeC,OAAf,CAAuB,YAAvB,EAAqCN,KAArC;AACA,eAAOA,KAAP;AACH,KARD;;AAUAb,QAAIoB,eAAJ,GAAsB,YAAW;AAC7B,YAAIP,QAAQK,eAAeG,OAAf,CAAuB,YAAvB,CAAZ;AACAH,uBAAeI,UAAf,CAA0B,YAA1B;AACA,eAAOT,KAAP;AACH,KAJD;;AAMA,WAAOb,GAAP;AACH,CAxDA","file":"OAuth.js","sourcesContent":["/**\r\n * The contents of this file are subject to the terms of the Common Development and\r\n * Distribution License (the License). You may not use this file except in compliance with the\r\n * License.\r\n *\r\n * You can obtain a copy of the License at legal/CDDLv1.0.txt. See the License for the\r\n * specific language governing permission and limitations under the License.\r\n *\r\n * When distributing Covered Software, include this CDDL Header Notice in each file and include\r\n * the License file at legal/CDDLv1.0.txt. If applicable, add the following below the CDDL\r\n * Header, with the fields enclosed by brackets [] replaced by your own identifying\r\n * information: \"Portions copyright [year] [name of copyright owner]\".\r\n *\r\n * Copyright 2016 ForgeRock AS.\r\n */\r\n/* eslint-disable */\r\n define([\r\n    \"lodash\",\r\n    \"./URIUtils\"\r\n], function (_, URIUtils) {\r\n    /**\r\n     * Provides generic methods for interacting with oAuth endpoints\r\n     * @exports org/forgerock/commons/ui/common/util/OAuth\r\n     */\r\n    var obj = {};\r\n\r\n    /**\r\n        Provides the redirect_url value relative to the browser's current location\r\n        @param {string} returnFileName - a file relative to the current application\r\n        that will be used to accept the incoming oauth response; defaults to \"oauthReturn.html\"\r\n     */\r\n    obj.getRedirectURI = function (returnFileName) {\r\n        return URIUtils.getCurrentOrigin() +\r\n                URIUtils.getCurrentPathName().replace(/(\\/index\\.html)|(\\/$)/, \"/\" +\r\n                (returnFileName || \"oauthReturn.html\"));\r\n    };\r\n\r\n    /**\r\n      Generates a URL to take the user to an oAuth IDP in order to obtain an authorization code,\r\n      to be subsequently presented to the token endpoint (likely, by a server process).\r\n      @param {string} authorization_endpoint - the base URL to the IDP endpoint used for obtaining access codes\r\n      @param {string} client_id - client (RP) identifier registered with the IDP\r\n      @param {string} scopes - space-separated list of scopes requested by this client to obtain for this user\r\n      @param {string} state - whatever details are useful to get back from the IDP upon return, so\r\n                                    the local processing logic can resume\r\n    */\r\n    obj.getRequestURL = function (authorization_endpoint, client_id, scopes, state) {\r\n        return authorization_endpoint +\r\n            '?response_type=code&scope=' + encodeURIComponent(scopes) +\r\n            '&redirect_uri=' + this.getRedirectURI() +\r\n            '&state=' + encodeURIComponent(state) +\r\n            '&nonce=' + this.generateNonce(client_id) +\r\n            '&client_id=' + client_id;\r\n    };\r\n\r\n    obj.generateNonce = function () {\r\n        // Math.random().toString(36) converts a random number into a string with letters and numbers\r\n        // ex: Math.random() produces 0.12; 0.12.toString(36) => \"0.4bipx4bipx5cxg5veqmfmkj4i\"\r\n        // \"0.4bipx4bipx5cxg5veqmfmkj4i\".substr(2,12) => 4bipx4bipx5c\r\n        // this is sufficiently random to be used as an unguessable nonce\r\n        var nonce = Math.random().toString(36).substr(2, 12);\r\n        sessionStorage.setItem(\"OAuthNonce\", nonce);\r\n        return nonce;\r\n    };\r\n\r\n    obj.getCurrentNonce = function() {\r\n        var nonce = sessionStorage.getItem(\"OAuthNonce\");\r\n        sessionStorage.removeItem(\"OAuthNonce\");\r\n        return nonce;\r\n    };\r\n\r\n    return obj;\r\n});"]}