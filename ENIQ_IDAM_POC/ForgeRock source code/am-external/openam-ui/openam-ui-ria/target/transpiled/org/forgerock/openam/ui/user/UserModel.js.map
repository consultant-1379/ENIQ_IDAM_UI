{"version":3,"sources":["../../../../../../XUI/org/forgerock/openam/ui/user/UserModel.js"],"names":["define","$","_","AbstractModel","arrayify","Configuration","Constants","Messages","Router","ServiceInvoker","flattenValues","fetchUrl","baseUrl","host","context","UserModel","extend","idAttribute","defaults","kbaInfo","silentReset","previousAttributes","set","silent","sync","method","model","options","clearPassword","bind","currentPassword","unset","errorCallback","response","addMessage","type","TYPE_DANGER","has","changed","restCall","url","default","encodeURIComponent","id","headers","suppressEvents","error","data","JSON","stringify","username","get","currentpassword","userpassword","then","chain","toJSON","pick","mapValues","val","trim","value","getMVCCRev","clear","parse","userPassword","user","result","uid","uiroles","isString","roles","split","indexOf","push","fetchById","fetch","getProtectedAttributes","concat","globalData","protectedUserAttributes","setCurrentPassword","hasRole","spread","partial","contains"],"mappings":"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","file":"UserModel.js","sourcesContent":["/*\n * The contents of this file are subject to the terms of the Common Development and\n * Distribution License (the License). You may not use this file except in compliance with the\n * License.\n *\n * You can obtain a copy of the License at legal/CDDLv1.0.txt. See the License for the\n * specific language governing permission and limitations under the License.\n *\n * When distributing Covered Software, include this CDDL Header Notice in each file and include\n * the License file at legal/CDDLv1.0.txt. If applicable, add the following below the CDDL\n * Header, with the fields enclosed by brackets [] replaced by your own identifying\n * information: \"Portions copyright [year] [name of copyright owner]\".\n *\n * Copyright 2015-2017 ForgeRock AS.\n */\n\ndefine([\n    \"jquery\",\n    \"lodash\",\n    \"org/forgerock/commons/ui/common/main/AbstractModel\",\n    \"org/forgerock/openam/ui/common/util/array/arrayify\",\n    \"org/forgerock/commons/ui/common/main/Configuration\",\n    \"org/forgerock/commons/ui/common/util/Constants\",\n    \"org/forgerock/commons/ui/common/components/Messages\",\n    \"org/forgerock/commons/ui/common/main/Router\",\n    \"org/forgerock/commons/ui/common/main/ServiceInvoker\",\n    \"org/forgerock/openam/ui/common/util/object/flattenValues\",\n    \"org/forgerock/openam/ui/common/services/fetchUrl\"\n], ($, _, AbstractModel, arrayify, Configuration, Constants, Messages, Router, ServiceInvoker, flattenValues,\n    fetchUrl) => {\n    var baseUrl = `${Constants.host}${Constants.context}/json`,\n        UserModel = AbstractModel.extend({\n            idAttribute: \"id\",\n            defaults: {\n                kbaInfo: []\n            },\n            silentReset () {\n                var previousAttributes = this.previousAttributes();\n                this.set(previousAttributes, { silent: true });\n            },\n            sync (method, model, options) {\n                var clearPassword = _.bind(function () {\n                        delete this.currentPassword;\n                        this.unset(\"password\");\n                        return this;\n                    }, this),\n                    currentPassword,\n                    errorCallback = function (response) {\n                        Messages.addMessage({\n                            type: Messages.TYPE_DANGER,\n                            response\n                        });\n                        model.silentReset();\n                    };\n\n                if (method === \"update\" || method === \"patch\") {\n                    if (_.has(this.changed, \"password\")) {\n                        // password changes have to occur via a special rest call\n                        return ServiceInvoker.restCall({\n                            url: baseUrl + fetchUrl.default(\n                                `/users/${encodeURIComponent(this.id)}?_action=changePassword`),\n                            headers: { \"Accept-API-Version\": \"protocol=1.0,resource=2.0\" },\n                            type: \"POST\",\n                            suppressEvents: true,\n                            error: errorCallback,\n                            data: JSON.stringify({\n                                username: this.get(\"id\"),\n                                currentpassword: this.currentPassword,\n                                userpassword: this.get(\"password\")\n                            })\n                        }).then(clearPassword, clearPassword);\n                    } else {\n                        // overridden implementation for AM, due to the failures which would result\n                        // if unchanged attributes are included along with the request\n                        currentPassword = this.currentPassword;\n                        delete this.currentPassword;\n                        options.error = errorCallback;\n                        return ServiceInvoker.restCall(_.extend(\n                            {\n                                type: \"PUT\",\n                                data: JSON.stringify(\n                                    _.chain(this.toJSON())\n                                        .pick([\"givenName\", \"sn\", \"mail\", \"postalAddress\", \"telephoneNumber\"])\n                                        .mapValues(function (val) {\n                                            return typeof val === \"string\" ? val.trim() : val;\n                                        })\n                                        .mapValues(function (val) {\n                                            return val || [];\n                                        })\n                                        .value()\n                                ),\n                                suppressEvents: true,\n                                url: baseUrl + fetchUrl.default(`/users/${encodeURIComponent(this.id)}`),\n                                headers: {\n                                    \"If-Match\": this.getMVCCRev(),\n                                    \"Accept-API-Version\": \"protocol=1.0,resource=2.0\",\n                                    \"currentpassword\": currentPassword\n                                }\n                            },\n                            options\n                        ));\n                    }\n                } else {\n                    // The only other supported operation is read\n                    return ServiceInvoker.restCall(_.extend(\n                        {\n                            \"url\" : baseUrl + fetchUrl.default(`/users/${encodeURIComponent(this.id)}`),\n                            \"headers\": { \"Accept-API-Version\": \"protocol=1.0,resource=2.0\" },\n                            \"type\": \"GET\"\n                        },\n                        options\n                    )).then(function (response) {\n                        model.clear();\n                        if (options.parse) {\n                            model.set(model.parse(response, options));\n                        } else {\n                            model.set(response);\n                        }\n                        return model.toJSON();\n                    });\n                }\n            },\n            parse (response) {\n                delete response.userPassword;\n\n                /**\n                 * flattenValues due to the response having many values wrapped in arrays (makes for a simpler data\n                 * structure)\n                 */\n                var user = flattenValues(response);\n                // \"kbaInfo\" property must stay as an array (it's original value)\n                user.kbaInfo = response.kbaInfo;\n\n                /**\n                 * Re-apply defaults to attributes that were not present in the response. Duplicate of what Backbone\n                 * does when a model is first initialised. Fixes scenaries where a previous server response was an value\n                 * but the next was missing the attribute and value entirely, failing to clear the previous now invalid\n                 * value from the model\n                 */\n                user = _.defaults({}, user, _.result(this, \"defaults\"));\n\n                // When we parse response the first time, amadmin don't have uid\n                user.id = user.uid || user.username;\n                if (!_.has(user, \"roles\")) {\n                    this.uiroles = [];\n                } else if (_.isString(user.roles)) {\n                    this.uiroles = user.roles.split(\",\");\n                } else {\n                    this.uiroles = user.roles;\n                }\n\n                if (_.indexOf(user.roles, \"ui-user\") === -1) {\n                    this.uiroles.push(\"ui-user\");\n                }\n\n                return user;\n            },\n            fetchById (id) {\n                return this.set({ id }, { silent: true }).fetch().then(() => { return this; });\n            },\n            getProtectedAttributes () {\n                return [\"password\"].concat(Configuration.globalData.protectedUserAttributes);\n            },\n            setCurrentPassword (currentPassword) {\n                this.currentPassword = currentPassword;\n            },\n            /**\n             * Determines whether the user has the specified role(s).\n             * @param   {string|array} roles Roles as either a string or array of roles\n             * @returns {Boolean}      Whether this model has any of the roles specified\n             */\n            hasRole (roles) {\n                return _.spread(_.partial(_.contains, this.uiroles))(arrayify(roles));\n            }\n        });\n    return new UserModel();\n});\n"]}