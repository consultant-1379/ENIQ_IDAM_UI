{"version":3,"sources":["../../../../../../../../XUI/org/forgerock/openam/ui/common/sessions/strategies/MaxIdleTimeLeftStrategy.js"],"names":["define","SessionService","getTimeLeft"],"mappings":";;AAAA;;;;;;;;;;;;;;;;AAgBA;;;;;;;;;;;;;;AAcAA,OAAO,CACH,sDADG,CAAP,EAEG,UAACC,cAAD,EAAoB;AACnB,WAAO,YAAY;AACf,eAAOA,eAAeC,WAAf,EAAP;AACH,KAFD;AAGH,CAND","file":"MaxIdleTimeLeftStrategy.js","sourcesContent":["/*\n * The contents of this file are subject to the terms of the Common Development and\n * Distribution License (the License). You may not use this file except in compliance with the\n * License.\n *\n * You can obtain a copy of the License at legal/CDDLv1.0.txt. See the License for the\n * specific language governing permission and limitations under the License.\n *\n * When distributing Covered Software, include this CDDL Header Notice in each file and include\n * the License file at legal/CDDLv1.0.txt. If applicable, add the following below the CDDL\n * Header, with the fields enclosed by brackets [] replaced by your own identifying\n * information: \"Portions copyright [year] [name of copyright owner]\".\n *\n * Copyright 2015-2017 ForgeRock AS.\n */\n\n/**\n  * Maximum Idle Time vs Session Time Left Strategy.\n  * <p/>\n  * Supports both stateful and stateless sessions.\n  * <p/>\n  * This strategy utilises the fact that all calls to the server's <code>session</code> end-point will respond with\n  * <code>401</code> if the current session has expired, while the response payload will help to decide when to\n  * next perform a validation if the session is still valid.\n  * <p/>\n  * Subsequent calls to <code>getTimeLeft</code> are used to check if the idle timeout has been reached. The number of\n  * seconds until the idle timeout is used to determine the next best time to check the session.\n  *\n  * @module org/forgerock/openam/ui/common/sessions/strategies/MaxIdleTimeLeftStrategy\n  */\ndefine([\n    \"org/forgerock/openam/ui/user/services/SessionService\"\n], (SessionService) => {\n    return function () {\n        return SessionService.getTimeLeft();\n    };\n});\n"]}