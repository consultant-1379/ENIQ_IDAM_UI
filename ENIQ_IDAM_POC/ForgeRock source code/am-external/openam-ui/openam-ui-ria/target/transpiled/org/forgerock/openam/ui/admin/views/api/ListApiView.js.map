{"version":3,"sources":["../../../../../../../../XUI/org/forgerock/openam/ui/admin/views/api/ListApiView.jsx"],"names":["getIframeSource","apiPath","context","split","item","encodeURIComponent","join","ListApiView","props","handlePathSelect","bind","handleSearchFilter","resize","router","params","iframeSource","state","collapsed","filteredTree","filter","initialTree","containerHeight","then","response","addObjectPaths","children","parentPath","objectPath","id","length","routeToPath","path","dataWithObjectPath","setState","window","addEventListener","removeEventListener","e","target","value","routeTo","configuration","routes","apiExplorer","args","slice","trigger","realm","activePaths","index","header","height","propTypes"],"mappings":"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","file":"ListApiView.js","sourcesContent":["/*\n * The contents of this file are subject to the terms of the Common Development and\n * Distribution License (the License). You may not use this file except in compliance with the\n * License.\n *\n * You can obtain a copy of the License at legal/CDDLv1.0.txt. See the License for the\n * specific language governing permission and limitations under the License.\n *\n * When distributing Covered Software, include this CDDL Header Notice in each file and include\n * the License file at legal/CDDLv1.0.txt. If applicable, add the following below the CDDL\n * Header, with the fields enclosed by brackets [] replaced by your own identifying\n * information: \"Portions copyright [year] [name of copyright owner]\".\n *\n * Copyright 2016-2017 ForgeRock AS.\n */\n\nimport { debounce, isEmpty, map } from \"lodash\";\nimport { getPathsTree } from \"org/forgerock/openam/ui/admin/services/global/ApiService\";\nimport { FormControl, Grid, Panel, Row, Col } from \"react-bootstrap\";\nimport { t } from \"i18next\";\nimport calculateHeight from \"./calculateHeight\";\nimport Constants from \"org/forgerock/commons/ui/common/util/Constants\";\nimport filterTree from \"./filterTree\";\nimport React, { Component } from \"react\";\nimport Router from \"org/forgerock/commons/ui/common/main/Router\";\nimport Tree from \"components/Tree\";\nimport withRouter from \"org/forgerock/commons/ui/common/components/hoc/withRouter\";\nimport withRouterPropType from \"org/forgerock/commons/ui/common/components/hoc/withRouterPropType\";\n\nconst getIframeSource = (apiPath) => `${Constants.context}/api/?url=${Constants.context}/json${\n    map(apiPath.split(\"/\"), (item) => encodeURIComponent(item)).join(\"/\")}?_api`;\n\nclass ListApiView extends Component {\n    constructor (props) {\n        super(props);\n        this.handlePathSelect = this.handlePathSelect.bind(this);\n        this.handleSearchFilter = this.handleSearchFilter.bind(this);\n        this.resize = this.resize.bind(this);\n\n        const apiPath = props.router.params[0];\n        const iframeSource = apiPath ? getIframeSource(`/${apiPath}`) : \"\";\n\n        this.state = {\n            collapsed: true,\n            filteredTree: [],\n            filter: \"\",\n            initialTree: [],\n            iframeSource,\n            containerHeight: calculateHeight()\n        };\n    }\n\n    componentDidMount () {\n        getPathsTree().then((response) => {\n            /*\n             * Some objects are just containers for other objects, and so do not have corresponding APIs and do not\n             * contain the path property (which is used to add links to these corresponding APIs).\n             * Because of this we add the objectPath to all the items and use this 'always present' property to\n             * ascertain an object's path in the tree.\n             */\n            const addObjectPaths = (children, parentPath = \"\") => map(children, (item) => {\n                item.objectPath = `${parentPath}${item.id}`;\n                if (item.children) {\n                    item.children = addObjectPaths(item.children, item.objectPath);\n                }\n                return item;\n            });\n\n            if (response.length && this.state.iframeSource === \"\") {\n                this.routeToPath(response[0].path);\n            }\n\n            const dataWithObjectPath = addObjectPaths(response);\n            this.setState({\n                initialTree: dataWithObjectPath,\n                filteredTree: dataWithObjectPath\n            });\n        });\n        window.addEventListener(\"resize\", debounce(this.resize, 100));\n    }\n\n    componentWillUnmount () {\n        window.removeEventListener(\"resize\", this.resize);\n    }\n\n    handleSearchFilter (e) {\n        const filter = e.target.value;\n        this.setState({\n            collapsed: isEmpty(filter),\n            filter,\n            filteredTree: isEmpty(filter) ? this.state.initialTree : filterTree(this.state.initialTree, filter)\n        });\n    }\n\n    handlePathSelect (apiPath) {\n        this.routeToPath(apiPath);\n    }\n\n    resize () {\n        this.setState({ containerHeight: calculateHeight() });\n    }\n\n    routeToPath (apiPath) {\n        Router.routeTo(Router.configuration.routes.apiExplorer, {\n            args: [apiPath.slice(1)],\n            trigger: true\n        });\n    }\n\n    render () {\n        const realm = this.props.router.params[0];\n        const activePaths = map(realm.split(\"/\"), (value, index, path) => {\n            return `/${path.slice(0, path.length - index).join(\"/\")}`;\n        });\n\n        const header = (\n            <div className=\"input-group\">\n                <FormControl\n                    onChange={ this.handleSearchFilter }\n                    placeholder={ t(\"common.form.search\") }\n                    type=\"text\"\n                />\n                <span className=\"input-group-addon\">\n                    <i className=\"fa fa-search\" />\n                </span>\n            </div>\n        );\n\n        return (\n            <Grid fluid=\"true\">\n                <Row>\n                    <Col md={ 3 }>\n                        <Panel\n                            className=\"am-iframe-overflow-scroll row\"\n                            header={ header }\n                            style={ { height: `${this.state.containerHeight}px` } }\n                        >\n                            <nav className=\"sidenav\">\n                                <Tree\n                                    activePaths={ activePaths }\n                                    collapsed={ this.state.collapsed }\n                                    data={ this.state.filteredTree }\n                                    filter={ this.state.filter }\n                                    onNodeSelect={ this.handlePathSelect }\n                                />\n                            </nav>\n                        </Panel>\n                    </Col>\n\n                    <Col md={ 9 }>\n                        <iframe\n                            className=\"am-iframe-overflow-scroll am-iframe-full-width\"\n                            src={ this.state.iframeSource }\n                            style={ { height: `${this.state.containerHeight}px` } }\n                            title={ t(\"console.api.explorer.iFrameTitle\") }\n                        />\n                    </Col>\n                </Row>\n            </Grid>\n        );\n    }\n}\n\nListApiView.propTypes = {\n    router: withRouterPropType\n};\n\nexport default withRouter(ListApiView);\n"]}