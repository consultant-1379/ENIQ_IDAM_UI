{"version":3,"sources":["../../../../../../../XUI/store/modules/local/authentication/trees/current/tree.jsm"],"names":["ADD_OR_UPDATE_NODE","SET_NODES","ADD_OR_UPDATE_CONNECTION","REMOVE_CONNECTION","SET_OUTCOMES","addOrUpdateNode","setNodes","payload","entryNodeId","addSucccessNode","addFailureNode","addOrUpdateConnection","nodeId","removeConnection","setOutcomes","initialState","state","action","startNode","meta","staticNodes","connections","_outcomes"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoBA;AACA,QAAMA,qBAAqB,4DAA3B;AACA,QAAMC,YAAY,mDAAlB;;AAEA,QAAMC,2BAA2B,kEAAjC;AACA,QAAMC,oBAAoB,2DAA1B;;AAEA,QAAMC,eAAe,sDAArB;;AAEA;AACO,QAAMC,4CAAkB,gCAAaL,kBAAb,CAAxB;AACA,QAAMM,8BAAW,gCAAaL,SAAb,EACpB,UAACM,OAAD;AAAA,eAAaA,OAAb;AAAA,KADoB,EAEpB,UAACA,OAAD,EAAUC,WAAV;AAAA,YAAuBC,eAAvB,uEAAyC,KAAzC;AAAA,YAAgDC,cAAhD,uEAAiE,KAAjE;AAAA,eAA4E;AACxED,4CADwE;AAExEC,0CAFwE;AAGxEF;AAHwE,SAA5E;AAAA,KAFoB,CAAjB;;AASA,QAAMG,wDAAwB,gCAAaT,wBAAb,EAAuC,UAACK,OAAD;AAAA,eAAaA,OAAb;AAAA,KAAvC,EACjC,UAACA,OAAD,EAAUK,MAAV;AAAA,eAAsB,EAAEA,cAAF,EAAtB;AAAA,KADiC,CAA9B;AAEA,QAAMC,8CAAmB,gCAAaV,iBAAb,EAAgC,UAACI,OAAD;AAAA,eAAaA,OAAb;AAAA,KAAhC,EAC5B,UAACA,OAAD,EAAUK,MAAV;AAAA,eAAsB,EAAEA,cAAF,EAAtB;AAAA,KAD4B,CAAzB;;AAGA,QAAME,oCAAc,gCAAaV,YAAb,EAA2B,UAACG,OAAD;AAAA,eAAaA,OAAb;AAAA,KAA3B,EAAiD,UAACA,OAAD,EAAUK,MAAV;AAAA,eAAsB,EAAEA,cAAF,EAAtB;AAAA,KAAjD,CAApB;;AAEP;AACA,QAAMG,eAAe,EAArB;sBACe,uFACVf,kBADU,EACW,UAACgB,KAAD,EAAQC,MAAR;AAAA,4BACfD,KADe,EAEfC,OAAOV,OAFQ;AAAA,KADX,mCAKVN,SALU,EAKE,UAACe,KAAD,EAAQC,MAAR,EAAmB;AAC5B,YAAMC,YAAY,mBAAMD,OAAOE,IAAP,CAAYX,WAAlB,CAAlB;;AAEA,YAAIY,2BAAmBF,SAAnB,CAAJ;AACA,YAAID,OAAOE,IAAP,CAAYV,eAAhB,EAAiC;AAC7BW,uCACOA,WADP,EAEO,sBAFP;AAIH;AACD,YAAIH,OAAOE,IAAP,CAAYT,cAAhB,EAAgC;AAC5BU,uCACOA,WADP,EAEO,sBAFP;AAIH;;AAED,4BACOH,OAAOV,OADd,EAEOa,WAFP;AAIH,KA1BU,mCA2BVlB,wBA3BU,EA2BiB,UAACc,KAAD,EAAQC,MAAR;AAAA,4BACrBD,KADqB,sBAEvBC,OAAOE,IAAP,CAAYP,MAFW,eAGjBI,MAAMC,OAAOE,IAAP,CAAYP,MAAlB,CAHiB;AAIpBS,sCACOL,MAAMC,OAAOE,IAAP,CAAYP,MAAlB,EAA0BS,WADjC,EAEOJ,OAAOV,OAFd;AAJoB;AAAA,KA3BjB,mCAqCVJ,iBArCU,EAqCU,UAACa,KAAD,EAAQC,MAAR;AAAA,4BACdD,KADc,sBAEhBC,OAAOE,IAAP,CAAYP,MAFI,eAGVI,MAAMC,OAAOE,IAAP,CAAYP,MAAlB,CAHU;AAIbS,yBAAa,kBAAKL,MAAMC,OAAOE,IAAP,CAAYP,MAAlB,EAA0BS,WAA/B,EAA4CJ,OAAOV,OAAnD;AAJA;AAAA,KArCV,mCA4CVH,YA5CU,EA4CK,UAACY,KAAD,EAAQC,MAAR;AAAA,4BACTD,KADS,sBAEXC,OAAOE,IAAP,CAAYP,MAFD,eAGLI,MAAMC,OAAOE,IAAP,CAAYP,MAAlB,CAHK;AAIRU,uBAAWL,OAAOV;AAJV;AAAA,KA5CL,oBAmDZQ,YAnDY,C","file":"tree.js","sourcesContent":["/*\n * The contents of this file are subject to the terms of the Common Development and\n * Distribution License (the License). You may not use this file except in compliance with the\n * License.\n *\n * You can obtain a copy of the License at legal/CDDLv1.0.txt. See the License for the\n * specific language governing permission and limitations under the License.\n *\n * When distributing Covered Software, include this CDDL Header Notice in each file and include\n * the License file at legal/CDDLv1.0.txt. If applicable, add the following below the CDDL\n * Header, with the fields enclosed by brackets [] replaced by your own identifying\n * information: \"Portions copyright [year] [name of copyright owner]\".\n *\n * Copyright 2017 ForgeRock AS.\n */\nimport { createAction, handleActions } from \"redux-actions\";\nimport { omit } from \"lodash\";\n\nimport { failure, start, success } from \"./nodes/static\";\n\n// Types\nconst ADD_OR_UPDATE_NODE = \"local/authentication/trees/current/tree/ADD_OR_UPDATE_NODE\";\nconst SET_NODES = \"local/authentication/trees/current/tree/SET_NODES\";\n\nconst ADD_OR_UPDATE_CONNECTION = \"local/authentication/trees/current/tree/ADD_OR_UPDATE_CONNECTION\";\nconst REMOVE_CONNECTION = \"local/authentication/trees/current/tree/REMOVE_CONNECTION\";\n\nconst SET_OUTCOMES = \"local/authentication/trees/current/tree/SET_OUTCOMES\";\n\n// Actions\nexport const addOrUpdateNode = createAction(ADD_OR_UPDATE_NODE);\nexport const setNodes = createAction(SET_NODES,\n    (payload) => payload,\n    (payload, entryNodeId, addSucccessNode = false, addFailureNode = false) => ({\n        addSucccessNode,\n        addFailureNode,\n        entryNodeId\n    })\n);\n\nexport const addOrUpdateConnection = createAction(ADD_OR_UPDATE_CONNECTION, (payload) => payload,\n    (payload, nodeId) => ({ nodeId }));\nexport const removeConnection = createAction(REMOVE_CONNECTION, (payload) => payload,\n    (payload, nodeId) => ({ nodeId }));\n\nexport const setOutcomes = createAction(SET_OUTCOMES, (payload) => payload, (payload, nodeId) => ({ nodeId }));\n\n// Reducer\nconst initialState = {};\nexport default handleActions({\n    [ADD_OR_UPDATE_NODE]: (state, action) => ({\n        ...state,\n        ...action.payload\n    }),\n    [SET_NODES]: (state, action) => {\n        const startNode = start(action.meta.entryNodeId);\n\n        let staticNodes = { ...startNode };\n        if (action.meta.addSucccessNode) {\n            staticNodes = {\n                ...staticNodes,\n                ...success()\n            };\n        }\n        if (action.meta.addFailureNode) {\n            staticNodes = {\n                ...staticNodes,\n                ...failure()\n            };\n        }\n\n        return {\n            ...action.payload,\n            ...staticNodes\n        };\n    },\n    [ADD_OR_UPDATE_CONNECTION]: (state, action) => ({\n        ...state,\n        [action.meta.nodeId]: {\n            ...state[action.meta.nodeId],\n            connections: {\n                ...state[action.meta.nodeId].connections,\n                ...action.payload\n            }\n        }\n    }),\n    [REMOVE_CONNECTION]: (state, action) => ({\n        ...state,\n        [action.meta.nodeId]: {\n            ...state[action.meta.nodeId],\n            connections: omit(state[action.meta.nodeId].connections, action.payload)\n        }\n    }),\n    [SET_OUTCOMES]: (state, action) => ({\n        ...state,\n        [action.meta.nodeId]: {\n            ...state[action.meta.nodeId],\n            _outcomes: action.payload\n        }\n    })\n}, initialState);\n"]}